/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.mediaservices.v2018_03_30_preview.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.mediaservices.v2018_03_30_preview.Mediaservices;
import com.microsoft.azure.management.mediaservices.v2018_03_30_preview.MediaService;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.mediaservices.v2018_03_30_preview.Assets;
import com.microsoft.azure.management.mediaservices.v2018_03_30_preview.ContentKeyPolicies;
import com.microsoft.azure.management.mediaservices.v2018_03_30_preview.Transforms;
import com.microsoft.azure.management.mediaservices.v2018_03_30_preview.StreamingPolicies;
import com.microsoft.azure.management.mediaservices.v2018_03_30_preview.StreamingLocators;
import com.microsoft.azure.management.mediaservices.v2018_03_30_preview.LiveEvents;
import com.microsoft.azure.management.mediaservices.v2018_03_30_preview.StreamingEndpoints;

class MediaservicesImpl extends GroupableResourcesCoreImpl<MediaService, MediaServiceImpl, MediaServiceInner, MediaservicesInner, MediaManager>  implements Mediaservices {
    protected MediaservicesImpl(MediaManager manager) {
        super(manager.inner().mediaservices(), manager);
    }

    @Override
    public Assets assets() {
        Assets accessor = this.manager().assets();
        return accessor;
    }

    @Override
    public ContentKeyPolicies contentKeyPolicies() {
        ContentKeyPolicies accessor = this.manager().contentKeyPolicies();
        return accessor;
    }

    @Override
    public Transforms transforms() {
        Transforms accessor = this.manager().transforms();
        return accessor;
    }

    @Override
    public StreamingPolicies streamingPolicies() {
        StreamingPolicies accessor = this.manager().streamingPolicies();
        return accessor;
    }

    @Override
    public StreamingLocators streamingLocators() {
        StreamingLocators accessor = this.manager().streamingLocators();
        return accessor;
    }

    @Override
    public LiveEvents liveEvents() {
        LiveEvents accessor = this.manager().liveEvents();
        return accessor;
    }

    @Override
    public StreamingEndpoints streamingEndpoints() {
        StreamingEndpoints accessor = this.manager().streamingEndpoints();
        return accessor;
    }

    @Override
    protected Observable<MediaServiceInner> getInnerAsync(String resourceGroupName, String name) {
        MediaservicesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        MediaservicesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<MediaService> listByResourceGroup(String resourceGroupName) {
        MediaservicesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    private Observable<Page<MediaServiceInner>> listByResourceGroupNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        MediaservicesInner client = this.inner();
        return client.listByResourceGroupNextAsync(nextLink)
        .flatMap(new Func1<Page<MediaServiceInner>, Observable<Page<MediaServiceInner>>>() {
            @Override
            public Observable<Page<MediaServiceInner>> call(Page<MediaServiceInner> page) {
                return Observable.just(page).concatWith(listByResourceGroupNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<MediaService> listByResourceGroupAsync(String resourceGroupName) {
        MediaservicesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMap(new Func1<Page<MediaServiceInner>, Observable<Page<MediaServiceInner>>>() {
            @Override
            public Observable<Page<MediaServiceInner>> call(Page<MediaServiceInner> page) {
                return listByResourceGroupNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<MediaServiceInner>, Iterable<MediaServiceInner>>() {
            @Override
            public Iterable<MediaServiceInner> call(Page<MediaServiceInner> page) {
                return page.items();
            }
       })
        .map(new Func1<MediaServiceInner, MediaService>() {
            @Override
            public MediaService call(MediaServiceInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public PagedList<MediaService> list() {
        MediaservicesInner client = this.inner();
        return this.wrapList(client.list());
    }

    private Observable<Page<MediaServiceInner>> listNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        MediaservicesInner client = this.inner();
        return client.listNextAsync(nextLink)
        .flatMap(new Func1<Page<MediaServiceInner>, Observable<Page<MediaServiceInner>>>() {
            @Override
            public Observable<Page<MediaServiceInner>> call(Page<MediaServiceInner> page) {
                return Observable.just(page).concatWith(listNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<MediaService> listAsync() {
        MediaservicesInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<MediaServiceInner>, Observable<Page<MediaServiceInner>>>() {
            @Override
            public Observable<Page<MediaServiceInner>> call(Page<MediaServiceInner> page) {
                return listNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<MediaServiceInner>, Iterable<MediaServiceInner>>() {
            @Override
            public Iterable<MediaServiceInner> call(Page<MediaServiceInner> page) {
                return page.items();
            }
       })
        .map(new Func1<MediaServiceInner, MediaService>() {
            @Override
            public MediaService call(MediaServiceInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public MediaServiceImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Completable syncStorageKeysAsync(String resourceGroupName, String accountName) {
        MediaservicesInner client = this.inner();
        return client.syncStorageKeysAsync(resourceGroupName, accountName).toCompletable();
    }

    @Override
    public Observable<MediaService> getBySubscriptionAsync(String accountName) {
        MediaservicesInner client = this.inner();
        return client.getBySubscriptionAsync(accountName)
        .map(new Func1<MediaServiceInner, MediaService>() {
            @Override
            public MediaService call(MediaServiceInner inner) {
                return new MediaServiceImpl(inner.name(), inner, manager());
            }
        });
    }

    @Override
    protected MediaServiceImpl wrapModel(MediaServiceInner inner) {
        return  new MediaServiceImpl(inner.name(), inner, this.manager());
    }

    @Override
    protected MediaServiceImpl wrapModel(String name) {
        return new MediaServiceImpl(name, new MediaServiceInner(), this.manager());
    }

    private MediaService wrapModel(SubscriptionMediaServiceInner inner) {
        MediaServiceInner standardInnerModel = new MediaServiceInner();
        return wrapModel(standardInnerModel);
    }

}
