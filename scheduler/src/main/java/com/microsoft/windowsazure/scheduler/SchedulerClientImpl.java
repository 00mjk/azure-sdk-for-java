// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.scheduler;

import com.microsoft.windowsazure.management.ManagementConfiguration;
import com.microsoft.windowsazure.management.SubscriptionCloudCredentials;
import com.microsoft.windowsazure.scheduler.models.JobActionType;
import com.microsoft.windowsazure.scheduler.models.JobRecurrenceFrequency;
import com.microsoft.windowsazure.scheduler.models.JobScheduleDay;
import com.microsoft.windowsazure.scheduler.models.JobState;
import com.microsoft.windowsazure.scheduler.models.RetryType;
import com.microsoft.windowsazure.services.core.ServiceClient;
import java.net.URI;
import javax.inject.Inject;
import javax.inject.Named;

public class SchedulerClientImpl extends ServiceClient<SchedulerClientImpl> implements SchedulerClient
{
    private URI baseUri;
    
    public URI getBaseUri() { return this.baseUri; }
    
    private String cloudServiceName;
    
    public String getCloudServiceName() { return this.cloudServiceName; }
    
    private SubscriptionCloudCredentials credentials;
    
    public SubscriptionCloudCredentials getCredentials() { return this.credentials; }
    
    private String jobCollectionName;
    
    public String getJobCollectionName() { return this.jobCollectionName; }
    
    private JobOperations jobs;
    
    public JobOperations getJobs() { return this.jobs; }
    
    /**
    * Initializes a new instance of the SchedulerClientImpl class.
    *
    */
    private SchedulerClientImpl()
    {
        super();
        this.jobs = new JobOperationsImpl(this);
    }
    
    /**
    * Initializes a new instance of the SchedulerClientImpl class.
    *
    */
    public SchedulerClientImpl(SubscriptionCloudCredentials credentials, String cloudServiceName, String jobCollectionName, URI baseUri)
    {
        this();
        if (credentials == null)
        {
            throw new NullPointerException("credentials");
        }
        if (cloudServiceName == null)
        {
            throw new NullPointerException("cloudServiceName");
        }
        if (jobCollectionName == null)
        {
            throw new NullPointerException("jobCollectionName");
        }
        if (baseUri == null)
        {
            throw new NullPointerException("baseUri");
        }
        this.credentials = credentials;
        this.cloudServiceName = cloudServiceName;
        this.jobCollectionName = jobCollectionName;
        this.baseUri = baseUri;
        
        httpClient = credentials.initializeClient();
    }
    
    /**
    * Initializes a new instance of the SchedulerClientImpl class.
    *
    */
    @Inject
    public SchedulerClientImpl(@Named(ManagementConfiguration.SUBSCRIPTION_CLOUD_CREDENTIALS) SubscriptionCloudCredentials credentials, String cloudServiceName, String jobCollectionName) throws java.net.URISyntaxException
    {
        this();
        if (credentials == null)
        {
            throw new NullPointerException("credentials");
        }
        if (cloudServiceName == null)
        {
            throw new NullPointerException("cloudServiceName");
        }
        if (jobCollectionName == null)
        {
            throw new NullPointerException("jobCollectionName");
        }
        this.credentials = credentials;
        this.cloudServiceName = cloudServiceName;
        this.jobCollectionName = jobCollectionName;
        this.baseUri = new URI("https://management.core.windows.net/");
        
        httpClient = credentials.initializeClient();
    }
    
    /**
    * Parse enum values for type JobActionType.
    *
    * @param value The value to parse.
    * @return The enum value.
    */
     static JobActionType parseJobActionType(String value)
    {
        if (value == "http")
        {
            return JobActionType.Http;
        }
        if (value == "https")
        {
            return JobActionType.Https;
        }
        if (value == "storageQueue")
        {
            return JobActionType.StorageQueue;
        }
        throw new IllegalArgumentException("value");
    }
    
    /**
    * Convert an enum of type JobActionType to a string.
    *
    * @param value The value to convert to a string.
    * @return The enum value as a string.
    */
     static String jobActionTypeToString(JobActionType value)
    {
        if (value == JobActionType.Http)
        {
            return "http";
        }
        if (value == JobActionType.Https)
        {
            return "https";
        }
        if (value == JobActionType.StorageQueue)
        {
            return "storageQueue";
        }
        throw new IllegalArgumentException("value");
    }
    
    /**
    * Parse enum values for type JobRecurrenceFrequency.
    *
    * @param value The value to parse.
    * @return The enum value.
    */
     static JobRecurrenceFrequency parseJobRecurrenceFrequency(String value)
    {
        if (value == "minute")
        {
            return JobRecurrenceFrequency.Minute;
        }
        if (value == "hour")
        {
            return JobRecurrenceFrequency.Hour;
        }
        if (value == "day")
        {
            return JobRecurrenceFrequency.Day;
        }
        if (value == "week")
        {
            return JobRecurrenceFrequency.Week;
        }
        if (value == "month")
        {
            return JobRecurrenceFrequency.Month;
        }
        if (value == "year")
        {
            return JobRecurrenceFrequency.Year;
        }
        throw new IllegalArgumentException("value");
    }
    
    /**
    * Convert an enum of type JobRecurrenceFrequency to a string.
    *
    * @param value The value to convert to a string.
    * @return The enum value as a string.
    */
     static String jobRecurrenceFrequencyToString(JobRecurrenceFrequency value)
    {
        if (value == JobRecurrenceFrequency.Minute)
        {
            return "minute";
        }
        if (value == JobRecurrenceFrequency.Hour)
        {
            return "hour";
        }
        if (value == JobRecurrenceFrequency.Day)
        {
            return "day";
        }
        if (value == JobRecurrenceFrequency.Week)
        {
            return "week";
        }
        if (value == JobRecurrenceFrequency.Month)
        {
            return "month";
        }
        if (value == JobRecurrenceFrequency.Year)
        {
            return "year";
        }
        throw new IllegalArgumentException("value");
    }
    
    /**
    * Parse enum values for type JobScheduleDay.
    *
    * @param value The value to parse.
    * @return The enum value.
    */
     static JobScheduleDay parseJobScheduleDay(String value)
    {
        if (value == "monday")
        {
            return JobScheduleDay.Monday;
        }
        if (value == "tuesday")
        {
            return JobScheduleDay.Tuesday;
        }
        if (value == "wednesday")
        {
            return JobScheduleDay.Wednesday;
        }
        if (value == "thursday")
        {
            return JobScheduleDay.Thursday;
        }
        if (value == "friday")
        {
            return JobScheduleDay.Friday;
        }
        if (value == "saturday")
        {
            return JobScheduleDay.Saturday;
        }
        if (value == "sunday")
        {
            return JobScheduleDay.Sunday;
        }
        throw new IllegalArgumentException("value");
    }
    
    /**
    * Convert an enum of type JobScheduleDay to a string.
    *
    * @param value The value to convert to a string.
    * @return The enum value as a string.
    */
     static String jobScheduleDayToString(JobScheduleDay value)
    {
        if (value == JobScheduleDay.Monday)
        {
            return "monday";
        }
        if (value == JobScheduleDay.Tuesday)
        {
            return "tuesday";
        }
        if (value == JobScheduleDay.Wednesday)
        {
            return "wednesday";
        }
        if (value == JobScheduleDay.Thursday)
        {
            return "thursday";
        }
        if (value == JobScheduleDay.Friday)
        {
            return "friday";
        }
        if (value == JobScheduleDay.Saturday)
        {
            return "saturday";
        }
        if (value == JobScheduleDay.Sunday)
        {
            return "sunday";
        }
        throw new IllegalArgumentException("value");
    }
    
    /**
    * Parse enum values for type JobState.
    *
    * @param value The value to parse.
    * @return The enum value.
    */
     static JobState parseJobState(String value)
    {
        if (value == "enabled")
        {
            return JobState.Enabled;
        }
        if (value == "disabled")
        {
            return JobState.Disabled;
        }
        if (value == "faulted")
        {
            return JobState.Faulted;
        }
        if (value == "completed")
        {
            return JobState.Completed;
        }
        throw new IllegalArgumentException("value");
    }
    
    /**
    * Convert an enum of type JobState to a string.
    *
    * @param value The value to convert to a string.
    * @return The enum value as a string.
    */
     static String jobStateToString(JobState value)
    {
        if (value == JobState.Enabled)
        {
            return "enabled";
        }
        if (value == JobState.Disabled)
        {
            return "disabled";
        }
        if (value == JobState.Faulted)
        {
            return "faulted";
        }
        if (value == JobState.Completed)
        {
            return "completed";
        }
        throw new IllegalArgumentException("value");
    }
    
    /**
    * Parse enum values for type RetryType.
    *
    * @param value The value to parse.
    * @return The enum value.
    */
     static RetryType parseRetryType(String value)
    {
        if (value == "none")
        {
            return RetryType.None;
        }
        if (value == "fixed")
        {
            return RetryType.Fixed;
        }
        throw new IllegalArgumentException("value");
    }
    
    /**
    * Convert an enum of type RetryType to a string.
    *
    * @param value The value to convert to a string.
    * @return The enum value as a string.
    */
     static String retryTypeToString(RetryType value)
    {
        if (value == RetryType.None)
        {
            return "none";
        }
        if (value == RetryType.Fixed)
        {
            return "fixed";
        }
        throw new IllegalArgumentException("value");
    }
}
