// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.compute.models;

import java.net.InetAddress;
import java.util.ArrayList;

/**
* The set of parameters required to update a load balanced endpoint set
*/
public class VirtualMachineUpdateLoadBalancedSetParameters
{
    private ArrayList<VirtualMachineUpdateLoadBalancedSetParameters.InputEndpoint> loadBalancedEndpoints;
    
    /**
    * A list of load balanced InputEndpoints to update.
    */
    public ArrayList<VirtualMachineUpdateLoadBalancedSetParameters.InputEndpoint> getLoadBalancedEndpoints() { return this.loadBalancedEndpoints; }
    
    /**
    * A list of load balanced InputEndpoints to update.
    */
    public void setLoadBalancedEndpoints(ArrayList<VirtualMachineUpdateLoadBalancedSetParameters.InputEndpoint> loadBalancedEndpoints) { this.loadBalancedEndpoints = loadBalancedEndpoints; }
    
    /**
    * Initializes a new instance of the
    * VirtualMachineUpdateLoadBalancedSetParameters class.
    *
    */
    public VirtualMachineUpdateLoadBalancedSetParameters()
    {
        this.loadBalancedEndpoints = new ArrayList<VirtualMachineUpdateLoadBalancedSetParameters.InputEndpoint>();
    }
    
    /**
    * The modeled external endpoint for a persistent VM role
    */
    public static class InputEndpoint
    {
        private Boolean enableDirectServerReturn;
        
        /**
        * Optional. A Boolean specifying whether this endpoint uses Direct
        * Server Return
        */
        public Boolean getEnableDirectServerReturn() { return this.enableDirectServerReturn; }
        
        /**
        * Optional. A Boolean specifying whether this endpoint uses Direct
        * Server Return
        */
        public void setEnableDirectServerReturn(Boolean enableDirectServerReturn) { this.enableDirectServerReturn = enableDirectServerReturn; }
        
        private String loadBalancedEndpointSetName;
        
        /**
        * Specifies whether this endpoint is part of shared LoadBalanced
        * endpoint and served by multiple role instances. If not specified a
        * BadRequest error will be returned. It must also be in use by the
        * deployment (at least one role in the deployment must have an
        * endpoint whose LoadBalancedEndpointSetName   matches this) otherwise
        * a BadRequest error will be returned.
        */
        public String getLoadBalancedEndpointSetName() { return this.loadBalancedEndpointSetName; }
        
        /**
        * Specifies whether this endpoint is part of shared LoadBalanced
        * endpoint and served by multiple role instances. If not specified a
        * BadRequest error will be returned. It must also be in use by the
        * deployment (at least one role in the deployment must have an
        * endpoint whose LoadBalancedEndpointSetName   matches this) otherwise
        * a BadRequest error will be returned.
        */
        public void setLoadBalancedEndpointSetName(String loadBalancedEndpointSetName) { this.loadBalancedEndpointSetName = loadBalancedEndpointSetName; }
        
        private LoadBalancerProbe loadBalancerProbe;
        
        /**
        * Optional. This represents an endpoint setting which platform load
        * balancer must monitor to detect the availability of this role before
        * forwarding traffic to this endpoint. If not specified the probe
        * settings (if any) from the existing load balanced endpoint
        * definition  will be retained.
        */
        public LoadBalancerProbe getLoadBalancerProbe() { return this.loadBalancerProbe; }
        
        /**
        * Optional. This represents an endpoint setting which platform load
        * balancer must monitor to detect the availability of this role before
        * forwarding traffic to this endpoint. If not specified the probe
        * settings (if any) from the existing load balanced endpoint
        * definition  will be retained.
        */
        public void setLoadBalancerProbe(LoadBalancerProbe loadBalancerProbe) { this.loadBalancerProbe = loadBalancerProbe; }
        
        private Integer localPort;
        
        /**
        * Specifies the internal port on which a service running inside the VM
        * is listening to serve this endpoint. WARNING: If specified then ALL
        * the endpoints of this LB set on all the roles will be updated to
        * have THIS local port. To keep unique local ports on each role for a
        * load balanced endpoint specify this as 0 (zero) and if you need to
        * change those use UpdateRole. In case of port conflict with a local
        * port (or probe port) on a role a BadRequestwill be returned.
        */
        public Integer getLocalPort() { return this.localPort; }
        
        /**
        * Specifies the internal port on which a service running inside the VM
        * is listening to serve this endpoint. WARNING: If specified then ALL
        * the endpoints of this LB set on all the roles will be updated to
        * have THIS local port. To keep unique local ports on each role for a
        * load balanced endpoint specify this as 0 (zero) and if you need to
        * change those use UpdateRole. In case of port conflict with a local
        * port (or probe port) on a role a BadRequestwill be returned.
        */
        public void setLocalPort(Integer localPort) { this.localPort = localPort; }
        
        private String name;
        
        /**
        * Optional.  The name of the InputEndpoint.  The name is ignored if
        * specified
        */
        public String getName() { return this.name; }
        
        /**
        * Optional.  The name of the InputEndpoint.  The name is ignored if
        * specified
        */
        public void setName(String name) { this.name = name; }
        
        private Integer port;
        
        /**
        * An integer specifying the public port for this endpoint. Allowed
        * values are between 1 and 65535 inclusive. A unqiue Port and Protocol
        * combination must be specified for each InputEndpoint in the list.
        */
        public Integer getPort() { return this.port; }
        
        /**
        * An integer specifying the public port for this endpoint. Allowed
        * values are between 1 and 65535 inclusive. A unqiue Port and Protocol
        * combination must be specified for each InputEndpoint in the list.
        */
        public void setPort(Integer port) { this.port = port; }
        
        private String protocol;
        
        /**
        * Specifies the transport protocol for the endpoint.
        */
        public String getProtocol() { return this.protocol; }
        
        /**
        * Specifies the transport protocol for the endpoint.
        */
        public void setProtocol(String protocol) { this.protocol = protocol; }
        
        private ArrayList<AccessControlListRule> rules;
        
        /**
        * A collection of access control rules which control the external
        * network traffic reaching to this endpoint. NOTES: (1) To remove the
        * ACLs from a load-balanced endpoint just omit this element. (2) ACLs
        * are set as specified. There is no merge done with existing ACLs.
        */
        public ArrayList<AccessControlListRule> getRules() { return this.rules; }
        
        /**
        * A collection of access control rules which control the external
        * network traffic reaching to this endpoint. NOTES: (1) To remove the
        * ACLs from a load-balanced endpoint just omit this element. (2) ACLs
        * are set as specified. There is no merge done with existing ACLs.
        */
        public void setRules(ArrayList<AccessControlListRule> rules) { this.rules = rules; }
        
        private InetAddress virtualIPAddress;
        
        /**
        * The virtual IP address of the endpoint.
        */
        public InetAddress getVirtualIPAddress() { return this.virtualIPAddress; }
        
        /**
        * The virtual IP address of the endpoint.
        */
        public void setVirtualIPAddress(InetAddress virtualIPAddress) { this.virtualIPAddress = virtualIPAddress; }
        
        /**
        * Initializes a new instance of the InputEndpoint class.
        *
        */
        public InputEndpoint()
        {
            this.rules = new ArrayList<AccessControlListRule>();
        }
    }
}
