/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.sql;

import com.microsoft.azure.management.sql.models.Database;
import com.microsoft.azure.management.sql.models.DatabaseCreateOrUpdateParameters;
import com.microsoft.azure.management.sql.models.DatabaseCreateOrUpdateResponse;
import com.microsoft.azure.management.sql.models.DatabaseGetResponse;
import com.microsoft.azure.management.sql.models.DatabaseListResponse;
import com.microsoft.azure.management.sql.models.DatabaseMetric;
import com.microsoft.azure.management.sql.models.DatabaseMetricListResponse;
import com.microsoft.azure.management.sql.models.DatabaseProperties;
import com.microsoft.azure.management.sql.models.ErrorResponse;
import com.microsoft.windowsazure.core.OperationResponse;
import com.microsoft.windowsazure.core.OperationStatus;
import com.microsoft.windowsazure.core.ServiceOperations;
import com.microsoft.windowsazure.core.pipeline.apache.CustomHttpDelete;
import com.microsoft.windowsazure.core.utils.CollectionStringBuilder;
import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.tracing.ClientRequestTrackingHandler;
import com.microsoft.windowsazure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.xml.bind.DatatypeConverter;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.NullNode;
import org.codehaus.jackson.node.ObjectNode;

/**
* Represents all the operations for operating on Azure SQL Databases.  Contains
* operations to: Create, Retrieve, Update, and Delete databases, and also
* includes the ability to get the event logs for a database.
*/
public class DatabaseOperationsImpl implements ServiceOperations<SqlManagementClientImpl>, DatabaseOperations {
    /**
    * Initializes a new instance of the DatabaseOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    DatabaseOperationsImpl(SqlManagementClientImpl client) {
        this.client = client;
    }
    
    private SqlManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.azure.management.sql.SqlManagementClientImpl.
    * @return The Client value.
    */
    public SqlManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * Begins creating a new Azure SQL Database or updating an existing Azure
    * SQL Database. To determine the status of the operation call
    * GetDatabaseOperationStatus.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the Azure SQL Database Server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server on
    * which the database is hosted.
    * @param databaseName Required. The name of the Azure SQL Database to be
    * operated on (Updated or created).
    * @param parameters Required. The required parameters for createing or
    * updating a database.
    * @return Response for long running Azure Sql Database operations.
    */
    @Override
    public Future<DatabaseCreateOrUpdateResponse> beginCreateOrUpdateAsync(final String resourceGroupName, final String serverName, final String databaseName, final DatabaseCreateOrUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseCreateOrUpdateResponse>() { 
            @Override
            public DatabaseCreateOrUpdateResponse call() throws Exception {
                return beginCreateOrUpdate(resourceGroupName, serverName, databaseName, parameters);
            }
         });
    }
    
    /**
    * Begins creating a new Azure SQL Database or updating an existing Azure
    * SQL Database. To determine the status of the operation call
    * GetDatabaseOperationStatus.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the Azure SQL Database Server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server on
    * which the database is hosted.
    * @param databaseName Required. The name of the Azure SQL Database to be
    * operated on (Updated or created).
    * @param parameters Required. The required parameters for createing or
    * updating a database.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Response for long running Azure Sql Database operations.
    */
    @Override
    public DatabaseCreateOrUpdateResponse beginCreateOrUpdate(String resourceGroupName, String serverName, String databaseName, DatabaseCreateOrUpdateParameters parameters) throws IOException, ServiceException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (serverName == null) {
            throw new NullPointerException("serverName");
        }
        if (databaseName == null) {
            throw new NullPointerException("databaseName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getLocation() == null) {
            throw new NullPointerException("parameters.Location");
        }
        if (parameters.getProperties() == null) {
            throw new NullPointerException("parameters.Properties");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseName", databaseName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginCreateOrUpdateAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "";
        url = url + "/subscriptions/";
        if (this.getClient().getCredentials().getSubscriptionId() != null) {
            url = url + URLEncoder.encode(this.getClient().getCredentials().getSubscriptionId(), "UTF-8");
        }
        url = url + "/resourceGroups/";
        url = url + URLEncoder.encode(resourceGroupName, "UTF-8");
        url = url + "/providers/";
        url = url + "Microsoft.Sql";
        url = url + "/servers/";
        url = url + URLEncoder.encode(serverName, "UTF-8");
        url = url + "/databases/";
        url = url + URLEncoder.encode(databaseName, "UTF-8");
        ArrayList<String> queryParameters = new ArrayList<String>();
        queryParameters.add("api-version=" + "2014-04-01");
        if (queryParameters.size() > 0) {
            url = url + "?" + CollectionStringBuilder.join(queryParameters, "&");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json; charset=utf-8");
        
        // Serialize Request
        String requestContent = null;
        JsonNode requestDoc = null;
        
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode databaseCreateOrUpdateParametersValue = objectMapper.createObjectNode();
        requestDoc = databaseCreateOrUpdateParametersValue;
        
        ObjectNode propertiesValue = objectMapper.createObjectNode();
        ((ObjectNode) databaseCreateOrUpdateParametersValue).put("properties", propertiesValue);
        
        if (parameters.getProperties().getEdition() != null) {
            ((ObjectNode) propertiesValue).put("edition", parameters.getProperties().getEdition());
        }
        
        if (parameters.getProperties().getCollation() != null) {
            ((ObjectNode) propertiesValue).put("collation", parameters.getProperties().getCollation());
        }
        
        if (parameters.getProperties().getMaxSizeBytes() != null) {
            ((ObjectNode) propertiesValue).put("maxSizeBytes", Long.toString(parameters.getProperties().getMaxSizeBytes()));
        }
        
        if (parameters.getProperties().getRequestedServiceObjectiveId() != null) {
            ((ObjectNode) propertiesValue).put("requestedServiceObjectiveId", parameters.getProperties().getRequestedServiceObjectiveId());
        }
        
        if (parameters.getProperties().getRequestedServiceObjectiveName() != null) {
            ((ObjectNode) propertiesValue).put("requestedServiceObjectiveName", parameters.getProperties().getRequestedServiceObjectiveName());
        }
        
        if (parameters.getProperties().getElasticPoolName() != null) {
            ((ObjectNode) propertiesValue).put("resourcePoolName", parameters.getProperties().getElasticPoolName());
        }
        
        ((ObjectNode) databaseCreateOrUpdateParametersValue).put("location", parameters.getLocation());
        
        if (parameters.getTags() != null) {
            ObjectNode tagsDictionary = objectMapper.createObjectNode();
            for (Map.Entry<String, String> entry : parameters.getTags().entrySet()) {
                String tagsKey = entry.getKey();
                String tagsValue = entry.getValue();
                ((ObjectNode) tagsDictionary).put(tagsKey, tagsValue);
            }
            ((ObjectNode) databaseCreateOrUpdateParametersValue).put("tags", tagsDictionary);
        }
        
        StringWriter stringWriter = new StringWriter();
        objectMapper.writeValue(stringWriter, requestDoc);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/json; charset=utf-8");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_CREATED && statusCode != HttpStatus.SC_ACCEPTED) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DatabaseCreateOrUpdateResponse result = null;
            // Deserialize Response
            if (statusCode == HttpStatus.SC_OK || statusCode == HttpStatus.SC_CREATED || statusCode == HttpStatus.SC_ACCEPTED) {
                InputStream responseContent = httpResponse.getEntity().getContent();
                result = new DatabaseCreateOrUpdateResponse();
                JsonNode responseDoc = null;
                if (responseContent == null == false) {
                    responseDoc = objectMapper.readTree(responseContent);
                }
                
                if (responseDoc != null && responseDoc instanceof NullNode == false) {
                    ErrorResponse errorInstance = new ErrorResponse();
                    result.setError(errorInstance);
                    
                    JsonNode codeValue = responseDoc.get("code");
                    if (codeValue != null && codeValue instanceof NullNode == false) {
                        String codeInstance;
                        codeInstance = codeValue.getTextValue();
                        errorInstance.setCode(codeInstance);
                    }
                    
                    JsonNode messageValue = responseDoc.get("message");
                    if (messageValue != null && messageValue instanceof NullNode == false) {
                        String messageInstance;
                        messageInstance = messageValue.getTextValue();
                        errorInstance.setMessage(messageInstance);
                    }
                    
                    JsonNode targetValue = responseDoc.get("target");
                    if (targetValue != null && targetValue instanceof NullNode == false) {
                        String targetInstance;
                        targetInstance = targetValue.getTextValue();
                        errorInstance.setTarget(targetInstance);
                    }
                    
                    Database databaseInstance = new Database();
                    result.setDatabase(databaseInstance);
                    
                    JsonNode propertiesValue2 = responseDoc.get("properties");
                    if (propertiesValue2 != null && propertiesValue2 instanceof NullNode == false) {
                        DatabaseProperties propertiesInstance = new DatabaseProperties();
                        databaseInstance.setProperties(propertiesInstance);
                        
                        JsonNode collationValue = propertiesValue2.get("collation");
                        if (collationValue != null && collationValue instanceof NullNode == false) {
                            String collationInstance;
                            collationInstance = collationValue.getTextValue();
                            propertiesInstance.setCollation(collationInstance);
                        }
                        
                        JsonNode creationDateValue = propertiesValue2.get("creationDate");
                        if (creationDateValue != null && creationDateValue instanceof NullNode == false) {
                            Calendar creationDateInstance;
                            creationDateInstance = DatatypeConverter.parseDateTime(creationDateValue.getTextValue());
                            propertiesInstance.setCreationDate(creationDateInstance);
                        }
                        
                        JsonNode currentServiceObjectiveIdValue = propertiesValue2.get("currentServiceObjectiveId");
                        if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue instanceof NullNode == false) {
                            String currentServiceObjectiveIdInstance;
                            currentServiceObjectiveIdInstance = currentServiceObjectiveIdValue.getTextValue();
                            propertiesInstance.setCurrentServiceObjectiveId(currentServiceObjectiveIdInstance);
                        }
                        
                        JsonNode databaseIdValue = propertiesValue2.get("databaseId");
                        if (databaseIdValue != null && databaseIdValue instanceof NullNode == false) {
                            String databaseIdInstance;
                            databaseIdInstance = databaseIdValue.getTextValue();
                            propertiesInstance.setDatabaseId(databaseIdInstance);
                        }
                        
                        JsonNode earliestRestoreDateValue = propertiesValue2.get("earliestRestoreDate");
                        if (earliestRestoreDateValue != null && earliestRestoreDateValue instanceof NullNode == false) {
                            Calendar earliestRestoreDateInstance;
                            earliestRestoreDateInstance = DatatypeConverter.parseDateTime(earliestRestoreDateValue.getTextValue());
                            propertiesInstance.setEarliestRestoreDate(earliestRestoreDateInstance);
                        }
                        
                        JsonNode editionValue = propertiesValue2.get("edition");
                        if (editionValue != null && editionValue instanceof NullNode == false) {
                            String editionInstance;
                            editionInstance = editionValue.getTextValue();
                            propertiesInstance.setEdition(editionInstance);
                        }
                        
                        JsonNode maxSizeBytesValue = propertiesValue2.get("maxSizeBytes");
                        if (maxSizeBytesValue != null && maxSizeBytesValue instanceof NullNode == false) {
                            long maxSizeBytesInstance;
                            maxSizeBytesInstance = maxSizeBytesValue.getLongValue();
                            propertiesInstance.setMaxSizeBytes(maxSizeBytesInstance);
                        }
                        
                        JsonNode requestedServiceObjectiveIdValue = propertiesValue2.get("requestedServiceObjectiveId");
                        if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue instanceof NullNode == false) {
                            String requestedServiceObjectiveIdInstance;
                            requestedServiceObjectiveIdInstance = requestedServiceObjectiveIdValue.getTextValue();
                            propertiesInstance.setRequestedServiceObjectiveId(requestedServiceObjectiveIdInstance);
                        }
                        
                        JsonNode requestedServiceObjectiveNameValue = propertiesValue2.get("requestedServiceObjectiveName");
                        if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue instanceof NullNode == false) {
                            String requestedServiceObjectiveNameInstance;
                            requestedServiceObjectiveNameInstance = requestedServiceObjectiveNameValue.getTextValue();
                            propertiesInstance.setRequestedServiceObjectiveName(requestedServiceObjectiveNameInstance);
                        }
                        
                        JsonNode serviceLevelObjectiveValue = propertiesValue2.get("serviceLevelObjective");
                        if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue instanceof NullNode == false) {
                            String serviceLevelObjectiveInstance;
                            serviceLevelObjectiveInstance = serviceLevelObjectiveValue.getTextValue();
                            propertiesInstance.setServiceObjective(serviceLevelObjectiveInstance);
                        }
                        
                        JsonNode statusValue = propertiesValue2.get("status");
                        if (statusValue != null && statusValue instanceof NullNode == false) {
                            String statusInstance;
                            statusInstance = statusValue.getTextValue();
                            propertiesInstance.setStatus(statusInstance);
                        }
                        
                        JsonNode resourcePoolNameValue = propertiesValue2.get("resourcePoolName");
                        if (resourcePoolNameValue != null && resourcePoolNameValue instanceof NullNode == false) {
                            String resourcePoolNameInstance;
                            resourcePoolNameInstance = resourcePoolNameValue.getTextValue();
                            propertiesInstance.setElasticPoolName(resourcePoolNameInstance);
                        }
                    }
                    
                    JsonNode idValue = responseDoc.get("id");
                    if (idValue != null && idValue instanceof NullNode == false) {
                        String idInstance;
                        idInstance = idValue.getTextValue();
                        databaseInstance.setId(idInstance);
                    }
                    
                    JsonNode nameValue = responseDoc.get("name");
                    if (nameValue != null && nameValue instanceof NullNode == false) {
                        String nameInstance;
                        nameInstance = nameValue.getTextValue();
                        databaseInstance.setName(nameInstance);
                    }
                    
                    JsonNode typeValue = responseDoc.get("type");
                    if (typeValue != null && typeValue instanceof NullNode == false) {
                        String typeInstance;
                        typeInstance = typeValue.getTextValue();
                        databaseInstance.setType(typeInstance);
                    }
                    
                    JsonNode locationValue = responseDoc.get("location");
                    if (locationValue != null && locationValue instanceof NullNode == false) {
                        String locationInstance;
                        locationInstance = locationValue.getTextValue();
                        databaseInstance.setLocation(locationInstance);
                    }
                    
                    JsonNode tagsSequenceElement = ((JsonNode) responseDoc.get("tags"));
                    if (tagsSequenceElement != null && tagsSequenceElement instanceof NullNode == false) {
                        Iterator<Map.Entry<String, JsonNode>> itr = tagsSequenceElement.getFields();
                        while (itr.hasNext()) {
                            Map.Entry<String, JsonNode> property = itr.next();
                            String tagsKey2 = property.getKey();
                            String tagsValue2 = property.getValue().getTextValue();
                            databaseInstance.getTags().put(tagsKey2, tagsValue2);
                        }
                    }
                }
                
            }
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("Location").length > 0) {
                result.setOperationStatusLink(httpResponse.getFirstHeader("Location").getValue());
            }
            if (httpResponse.getHeaders("Retry-After").length > 0) {
                result.setRetryAfter(DatatypeConverter.parseInt(httpResponse.getFirstHeader("Retry-After").getValue()));
            }
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            if (statusCode == HttpStatus.SC_CREATED) {
                result.setStatus(OperationStatus.Succeeded);
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Creates a new Azure SQL Database or updates an existing Azure SQL
    * Database.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server on
    * which the database is hosted.
    * @param databaseName Required. The name of the Azure SQL Database to be
    * operated on (Updated or created).
    * @param parameters Required. The required parameters for createing or
    * updating a database.
    * @return Response for long running Azure Sql Database operations.
    */
    @Override
    public Future<DatabaseCreateOrUpdateResponse> createOrUpdateAsync(final String resourceGroupName, final String serverName, final String databaseName, final DatabaseCreateOrUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseCreateOrUpdateResponse>() { 
            @Override
            public DatabaseCreateOrUpdateResponse call() throws Exception {
                return createOrUpdate(resourceGroupName, serverName, databaseName, parameters);
            }
         });
    }
    
    /**
    * Creates a new Azure SQL Database or updates an existing Azure SQL
    * Database.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server on
    * which the database is hosted.
    * @param databaseName Required. The name of the Azure SQL Database to be
    * operated on (Updated or created).
    * @param parameters Required. The required parameters for createing or
    * updating a database.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws IOException Thrown if there was an error setting up tracing for
    * the request.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Response for long running Azure Sql Database operations.
    */
    @Override
    public DatabaseCreateOrUpdateResponse createOrUpdate(String resourceGroupName, String serverName, String databaseName, DatabaseCreateOrUpdateParameters parameters) throws InterruptedException, ExecutionException, IOException, ServiceException {
        SqlManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseName", databaseName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createOrUpdateAsync", tracingParameters);
        }
        try {
            if (shouldTrace) {
                client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
            }
            
            DatabaseCreateOrUpdateResponse response = client2.getDatabasesOperations().beginCreateOrUpdateAsync(resourceGroupName, serverName, databaseName, parameters).get();
            if (response.getStatus() == OperationStatus.Succeeded) {
                return response;
            }
            DatabaseCreateOrUpdateResponse result = client2.getDatabasesOperations().getDatabaseOperationStatusAsync(response.getOperationStatusLink()).get();
            int delayInSeconds = response.getRetryAfter();
            if (delayInSeconds == 0) {
                delayInSeconds = 30;
            }
            if (client2.getLongRunningOperationInitialTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationInitialTimeout();
            }
            while ((result.getStatus() != OperationStatus.InProgress) == false) {
                Thread.sleep(delayInSeconds * 1000);
                result = client2.getDatabasesOperations().getDatabaseOperationStatusAsync(response.getOperationStatusLink()).get();
                delayInSeconds = result.getRetryAfter();
                if (delayInSeconds == 0) {
                    delayInSeconds = 15;
                }
                if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                    delayInSeconds = client2.getLongRunningOperationRetryTimeout();
                }
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            
            return result;
        } finally {
            if (client2 != null && shouldTrace) {
                client2.close();
            }
        }
    }
    
    /**
    * Deletes the Azure SQL Database with the given name.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the Azure SQL Database Server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server on
    * which the Azure SQL Database Database is hosted.
    * @param databaseName Required. The name of the Azure SQL Database to be
    * deleted.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteAsync(final String resourceGroupName, final String serverName, final String databaseName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return delete(resourceGroupName, serverName, databaseName);
            }
         });
    }
    
    /**
    * Deletes the Azure SQL Database with the given name.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the Azure SQL Database Server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server on
    * which the Azure SQL Database Database is hosted.
    * @param databaseName Required. The name of the Azure SQL Database to be
    * deleted.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse delete(String resourceGroupName, String serverName, String databaseName) throws IOException, ServiceException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (serverName == null) {
            throw new NullPointerException("serverName");
        }
        if (databaseName == null) {
            throw new NullPointerException("databaseName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseName", databaseName);
            CloudTracing.enter(invocationId, this, "deleteAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "";
        url = url + "/subscriptions/";
        if (this.getClient().getCredentials().getSubscriptionId() != null) {
            url = url + URLEncoder.encode(this.getClient().getCredentials().getSubscriptionId(), "UTF-8");
        }
        url = url + "/resourceGroups/";
        url = url + URLEncoder.encode(resourceGroupName, "UTF-8");
        url = url + "/providers/";
        url = url + "Microsoft.Sql";
        url = url + "/servers/";
        url = url + URLEncoder.encode(serverName, "UTF-8");
        url = url + "/databases/";
        url = url + URLEncoder.encode(databaseName, "UTF-8");
        ArrayList<String> queryParameters = new ArrayList<String>();
        queryParameters.add("api-version=" + "2014-04-01");
        if (queryParameters.size() > 0) {
            url = url + "?" + CollectionStringBuilder.join(queryParameters, "&");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        CustomHttpDelete httpRequest = new CustomHttpDelete(url);
        
        // Set Headers
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_NO_CONTENT) {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            // Deserialize Response
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Returns information about an Azure SQL Database.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server on
    * which the database is hosted.
    * @param databaseName Required. The name of the Azure SQL Database to be
    * retrieved.
    * @return Represents the response to a Get Azure Sql Database request.
    */
    @Override
    public Future<DatabaseGetResponse> getAsync(final String resourceGroupName, final String serverName, final String databaseName) {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseGetResponse>() { 
            @Override
            public DatabaseGetResponse call() throws Exception {
                return get(resourceGroupName, serverName, databaseName);
            }
         });
    }
    
    /**
    * Returns information about an Azure SQL Database.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server on
    * which the database is hosted.
    * @param databaseName Required. The name of the Azure SQL Database to be
    * retrieved.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Represents the response to a Get Azure Sql Database request.
    */
    @Override
    public DatabaseGetResponse get(String resourceGroupName, String serverName, String databaseName) throws IOException, ServiceException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (serverName == null) {
            throw new NullPointerException("serverName");
        }
        if (databaseName == null) {
            throw new NullPointerException("databaseName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseName", databaseName);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "";
        url = url + "/subscriptions/";
        if (this.getClient().getCredentials().getSubscriptionId() != null) {
            url = url + URLEncoder.encode(this.getClient().getCredentials().getSubscriptionId(), "UTF-8");
        }
        url = url + "/resourceGroups/";
        url = url + URLEncoder.encode(resourceGroupName, "UTF-8");
        url = url + "/providers/";
        url = url + "Microsoft.Sql";
        url = url + "/servers/";
        url = url + URLEncoder.encode(serverName, "UTF-8");
        url = url + "/databases/";
        url = url + URLEncoder.encode(databaseName, "UTF-8");
        ArrayList<String> queryParameters = new ArrayList<String>();
        queryParameters.add("api-version=" + "2014-04-01");
        if (queryParameters.size() > 0) {
            url = url + "?" + CollectionStringBuilder.join(queryParameters, "&");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DatabaseGetResponse result = null;
            // Deserialize Response
            if (statusCode == HttpStatus.SC_OK) {
                InputStream responseContent = httpResponse.getEntity().getContent();
                result = new DatabaseGetResponse();
                ObjectMapper objectMapper = new ObjectMapper();
                JsonNode responseDoc = null;
                if (responseContent == null == false) {
                    responseDoc = objectMapper.readTree(responseContent);
                }
                
                if (responseDoc != null && responseDoc instanceof NullNode == false) {
                    Database databaseInstance = new Database();
                    result.setDatabase(databaseInstance);
                    
                    JsonNode propertiesValue = responseDoc.get("properties");
                    if (propertiesValue != null && propertiesValue instanceof NullNode == false) {
                        DatabaseProperties propertiesInstance = new DatabaseProperties();
                        databaseInstance.setProperties(propertiesInstance);
                        
                        JsonNode collationValue = propertiesValue.get("collation");
                        if (collationValue != null && collationValue instanceof NullNode == false) {
                            String collationInstance;
                            collationInstance = collationValue.getTextValue();
                            propertiesInstance.setCollation(collationInstance);
                        }
                        
                        JsonNode creationDateValue = propertiesValue.get("creationDate");
                        if (creationDateValue != null && creationDateValue instanceof NullNode == false) {
                            Calendar creationDateInstance;
                            creationDateInstance = DatatypeConverter.parseDateTime(creationDateValue.getTextValue());
                            propertiesInstance.setCreationDate(creationDateInstance);
                        }
                        
                        JsonNode currentServiceObjectiveIdValue = propertiesValue.get("currentServiceObjectiveId");
                        if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue instanceof NullNode == false) {
                            String currentServiceObjectiveIdInstance;
                            currentServiceObjectiveIdInstance = currentServiceObjectiveIdValue.getTextValue();
                            propertiesInstance.setCurrentServiceObjectiveId(currentServiceObjectiveIdInstance);
                        }
                        
                        JsonNode databaseIdValue = propertiesValue.get("databaseId");
                        if (databaseIdValue != null && databaseIdValue instanceof NullNode == false) {
                            String databaseIdInstance;
                            databaseIdInstance = databaseIdValue.getTextValue();
                            propertiesInstance.setDatabaseId(databaseIdInstance);
                        }
                        
                        JsonNode earliestRestoreDateValue = propertiesValue.get("earliestRestoreDate");
                        if (earliestRestoreDateValue != null && earliestRestoreDateValue instanceof NullNode == false) {
                            Calendar earliestRestoreDateInstance;
                            earliestRestoreDateInstance = DatatypeConverter.parseDateTime(earliestRestoreDateValue.getTextValue());
                            propertiesInstance.setEarliestRestoreDate(earliestRestoreDateInstance);
                        }
                        
                        JsonNode editionValue = propertiesValue.get("edition");
                        if (editionValue != null && editionValue instanceof NullNode == false) {
                            String editionInstance;
                            editionInstance = editionValue.getTextValue();
                            propertiesInstance.setEdition(editionInstance);
                        }
                        
                        JsonNode maxSizeBytesValue = propertiesValue.get("maxSizeBytes");
                        if (maxSizeBytesValue != null && maxSizeBytesValue instanceof NullNode == false) {
                            long maxSizeBytesInstance;
                            maxSizeBytesInstance = maxSizeBytesValue.getLongValue();
                            propertiesInstance.setMaxSizeBytes(maxSizeBytesInstance);
                        }
                        
                        JsonNode requestedServiceObjectiveIdValue = propertiesValue.get("requestedServiceObjectiveId");
                        if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue instanceof NullNode == false) {
                            String requestedServiceObjectiveIdInstance;
                            requestedServiceObjectiveIdInstance = requestedServiceObjectiveIdValue.getTextValue();
                            propertiesInstance.setRequestedServiceObjectiveId(requestedServiceObjectiveIdInstance);
                        }
                        
                        JsonNode requestedServiceObjectiveNameValue = propertiesValue.get("requestedServiceObjectiveName");
                        if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue instanceof NullNode == false) {
                            String requestedServiceObjectiveNameInstance;
                            requestedServiceObjectiveNameInstance = requestedServiceObjectiveNameValue.getTextValue();
                            propertiesInstance.setRequestedServiceObjectiveName(requestedServiceObjectiveNameInstance);
                        }
                        
                        JsonNode serviceLevelObjectiveValue = propertiesValue.get("serviceLevelObjective");
                        if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue instanceof NullNode == false) {
                            String serviceLevelObjectiveInstance;
                            serviceLevelObjectiveInstance = serviceLevelObjectiveValue.getTextValue();
                            propertiesInstance.setServiceObjective(serviceLevelObjectiveInstance);
                        }
                        
                        JsonNode statusValue = propertiesValue.get("status");
                        if (statusValue != null && statusValue instanceof NullNode == false) {
                            String statusInstance;
                            statusInstance = statusValue.getTextValue();
                            propertiesInstance.setStatus(statusInstance);
                        }
                        
                        JsonNode resourcePoolNameValue = propertiesValue.get("resourcePoolName");
                        if (resourcePoolNameValue != null && resourcePoolNameValue instanceof NullNode == false) {
                            String resourcePoolNameInstance;
                            resourcePoolNameInstance = resourcePoolNameValue.getTextValue();
                            propertiesInstance.setElasticPoolName(resourcePoolNameInstance);
                        }
                    }
                    
                    JsonNode idValue = responseDoc.get("id");
                    if (idValue != null && idValue instanceof NullNode == false) {
                        String idInstance;
                        idInstance = idValue.getTextValue();
                        databaseInstance.setId(idInstance);
                    }
                    
                    JsonNode nameValue = responseDoc.get("name");
                    if (nameValue != null && nameValue instanceof NullNode == false) {
                        String nameInstance;
                        nameInstance = nameValue.getTextValue();
                        databaseInstance.setName(nameInstance);
                    }
                    
                    JsonNode typeValue = responseDoc.get("type");
                    if (typeValue != null && typeValue instanceof NullNode == false) {
                        String typeInstance;
                        typeInstance = typeValue.getTextValue();
                        databaseInstance.setType(typeInstance);
                    }
                    
                    JsonNode locationValue = responseDoc.get("location");
                    if (locationValue != null && locationValue instanceof NullNode == false) {
                        String locationInstance;
                        locationInstance = locationValue.getTextValue();
                        databaseInstance.setLocation(locationInstance);
                    }
                    
                    JsonNode tagsSequenceElement = ((JsonNode) responseDoc.get("tags"));
                    if (tagsSequenceElement != null && tagsSequenceElement instanceof NullNode == false) {
                        Iterator<Map.Entry<String, JsonNode>> itr = tagsSequenceElement.getFields();
                        while (itr.hasNext()) {
                            Map.Entry<String, JsonNode> property = itr.next();
                            String tagsKey = property.getKey();
                            String tagsValue = property.getValue().getTextValue();
                            databaseInstance.getTags().put(tagsKey, tagsValue);
                        }
                    }
                }
                
            }
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Returns information about an Azure SQL Database.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server on
    * which the database is hosted.
    * @param databaseId Required. The Id of the Azure SQL Database to be
    * retrieved.
    * @return Represents the response to a List Azure Sql Database request.
    */
    @Override
    public Future<DatabaseListResponse> getByIdAsync(final String resourceGroupName, final String serverName, final String databaseId) {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseListResponse>() { 
            @Override
            public DatabaseListResponse call() throws Exception {
                return getById(resourceGroupName, serverName, databaseId);
            }
         });
    }
    
    /**
    * Returns information about an Azure SQL Database.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server on
    * which the database is hosted.
    * @param databaseId Required. The Id of the Azure SQL Database to be
    * retrieved.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Represents the response to a List Azure Sql Database request.
    */
    @Override
    public DatabaseListResponse getById(String resourceGroupName, String serverName, String databaseId) throws IOException, ServiceException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (serverName == null) {
            throw new NullPointerException("serverName");
        }
        if (databaseId == null) {
            throw new NullPointerException("databaseId");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseId", databaseId);
            CloudTracing.enter(invocationId, this, "getByIdAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "";
        url = url + "/subscriptions/";
        if (this.getClient().getCredentials().getSubscriptionId() != null) {
            url = url + URLEncoder.encode(this.getClient().getCredentials().getSubscriptionId(), "UTF-8");
        }
        url = url + "/resourceGroups/";
        url = url + URLEncoder.encode(resourceGroupName, "UTF-8");
        url = url + "/providers/";
        url = url + "Microsoft.Sql";
        url = url + "/servers/";
        url = url + URLEncoder.encode(serverName, "UTF-8");
        url = url + "/databases";
        ArrayList<String> queryParameters = new ArrayList<String>();
        ArrayList<String> odataFilter = new ArrayList<String>();
        odataFilter.add("properties/databaseId eq guid'" + URLEncoder.encode(databaseId, "UTF-8") + "'");
        if (odataFilter.size() > 0) {
            queryParameters.add("$filter=" + CollectionStringBuilder.join(odataFilter, null));
        }
        queryParameters.add("api-version=" + "2014-04-01");
        if (queryParameters.size() > 0) {
            url = url + "?" + CollectionStringBuilder.join(queryParameters, "&");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DatabaseListResponse result = null;
            // Deserialize Response
            if (statusCode == HttpStatus.SC_OK) {
                InputStream responseContent = httpResponse.getEntity().getContent();
                result = new DatabaseListResponse();
                ObjectMapper objectMapper = new ObjectMapper();
                JsonNode responseDoc = null;
                if (responseContent == null == false) {
                    responseDoc = objectMapper.readTree(responseContent);
                }
                
                if (responseDoc != null && responseDoc instanceof NullNode == false) {
                    JsonNode valueArray = responseDoc.get("value");
                    if (valueArray != null && valueArray instanceof NullNode == false) {
                        for (JsonNode valueValue : ((ArrayNode) valueArray)) {
                            Database databaseInstance = new Database();
                            result.getDatabases().add(databaseInstance);
                            
                            JsonNode propertiesValue = valueValue.get("properties");
                            if (propertiesValue != null && propertiesValue instanceof NullNode == false) {
                                DatabaseProperties propertiesInstance = new DatabaseProperties();
                                databaseInstance.setProperties(propertiesInstance);
                                
                                JsonNode collationValue = propertiesValue.get("collation");
                                if (collationValue != null && collationValue instanceof NullNode == false) {
                                    String collationInstance;
                                    collationInstance = collationValue.getTextValue();
                                    propertiesInstance.setCollation(collationInstance);
                                }
                                
                                JsonNode creationDateValue = propertiesValue.get("creationDate");
                                if (creationDateValue != null && creationDateValue instanceof NullNode == false) {
                                    Calendar creationDateInstance;
                                    creationDateInstance = DatatypeConverter.parseDateTime(creationDateValue.getTextValue());
                                    propertiesInstance.setCreationDate(creationDateInstance);
                                }
                                
                                JsonNode currentServiceObjectiveIdValue = propertiesValue.get("currentServiceObjectiveId");
                                if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue instanceof NullNode == false) {
                                    String currentServiceObjectiveIdInstance;
                                    currentServiceObjectiveIdInstance = currentServiceObjectiveIdValue.getTextValue();
                                    propertiesInstance.setCurrentServiceObjectiveId(currentServiceObjectiveIdInstance);
                                }
                                
                                JsonNode databaseIdValue = propertiesValue.get("databaseId");
                                if (databaseIdValue != null && databaseIdValue instanceof NullNode == false) {
                                    String databaseIdInstance;
                                    databaseIdInstance = databaseIdValue.getTextValue();
                                    propertiesInstance.setDatabaseId(databaseIdInstance);
                                }
                                
                                JsonNode earliestRestoreDateValue = propertiesValue.get("earliestRestoreDate");
                                if (earliestRestoreDateValue != null && earliestRestoreDateValue instanceof NullNode == false) {
                                    Calendar earliestRestoreDateInstance;
                                    earliestRestoreDateInstance = DatatypeConverter.parseDateTime(earliestRestoreDateValue.getTextValue());
                                    propertiesInstance.setEarliestRestoreDate(earliestRestoreDateInstance);
                                }
                                
                                JsonNode editionValue = propertiesValue.get("edition");
                                if (editionValue != null && editionValue instanceof NullNode == false) {
                                    String editionInstance;
                                    editionInstance = editionValue.getTextValue();
                                    propertiesInstance.setEdition(editionInstance);
                                }
                                
                                JsonNode maxSizeBytesValue = propertiesValue.get("maxSizeBytes");
                                if (maxSizeBytesValue != null && maxSizeBytesValue instanceof NullNode == false) {
                                    long maxSizeBytesInstance;
                                    maxSizeBytesInstance = maxSizeBytesValue.getLongValue();
                                    propertiesInstance.setMaxSizeBytes(maxSizeBytesInstance);
                                }
                                
                                JsonNode requestedServiceObjectiveIdValue = propertiesValue.get("requestedServiceObjectiveId");
                                if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue instanceof NullNode == false) {
                                    String requestedServiceObjectiveIdInstance;
                                    requestedServiceObjectiveIdInstance = requestedServiceObjectiveIdValue.getTextValue();
                                    propertiesInstance.setRequestedServiceObjectiveId(requestedServiceObjectiveIdInstance);
                                }
                                
                                JsonNode requestedServiceObjectiveNameValue = propertiesValue.get("requestedServiceObjectiveName");
                                if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue instanceof NullNode == false) {
                                    String requestedServiceObjectiveNameInstance;
                                    requestedServiceObjectiveNameInstance = requestedServiceObjectiveNameValue.getTextValue();
                                    propertiesInstance.setRequestedServiceObjectiveName(requestedServiceObjectiveNameInstance);
                                }
                                
                                JsonNode serviceLevelObjectiveValue = propertiesValue.get("serviceLevelObjective");
                                if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue instanceof NullNode == false) {
                                    String serviceLevelObjectiveInstance;
                                    serviceLevelObjectiveInstance = serviceLevelObjectiveValue.getTextValue();
                                    propertiesInstance.setServiceObjective(serviceLevelObjectiveInstance);
                                }
                                
                                JsonNode statusValue = propertiesValue.get("status");
                                if (statusValue != null && statusValue instanceof NullNode == false) {
                                    String statusInstance;
                                    statusInstance = statusValue.getTextValue();
                                    propertiesInstance.setStatus(statusInstance);
                                }
                                
                                JsonNode resourcePoolNameValue = propertiesValue.get("resourcePoolName");
                                if (resourcePoolNameValue != null && resourcePoolNameValue instanceof NullNode == false) {
                                    String resourcePoolNameInstance;
                                    resourcePoolNameInstance = resourcePoolNameValue.getTextValue();
                                    propertiesInstance.setElasticPoolName(resourcePoolNameInstance);
                                }
                            }
                            
                            JsonNode idValue = valueValue.get("id");
                            if (idValue != null && idValue instanceof NullNode == false) {
                                String idInstance;
                                idInstance = idValue.getTextValue();
                                databaseInstance.setId(idInstance);
                            }
                            
                            JsonNode nameValue = valueValue.get("name");
                            if (nameValue != null && nameValue instanceof NullNode == false) {
                                String nameInstance;
                                nameInstance = nameValue.getTextValue();
                                databaseInstance.setName(nameInstance);
                            }
                            
                            JsonNode typeValue = valueValue.get("type");
                            if (typeValue != null && typeValue instanceof NullNode == false) {
                                String typeInstance;
                                typeInstance = typeValue.getTextValue();
                                databaseInstance.setType(typeInstance);
                            }
                            
                            JsonNode locationValue = valueValue.get("location");
                            if (locationValue != null && locationValue instanceof NullNode == false) {
                                String locationInstance;
                                locationInstance = locationValue.getTextValue();
                                databaseInstance.setLocation(locationInstance);
                            }
                            
                            JsonNode tagsSequenceElement = ((JsonNode) valueValue.get("tags"));
                            if (tagsSequenceElement != null && tagsSequenceElement instanceof NullNode == false) {
                                Iterator<Map.Entry<String, JsonNode>> itr = tagsSequenceElement.getFields();
                                while (itr.hasNext()) {
                                    Map.Entry<String, JsonNode> property = itr.next();
                                    String tagsKey = property.getKey();
                                    String tagsValue = property.getValue().getTextValue();
                                    databaseInstance.getTags().put(tagsKey, tagsValue);
                                }
                            }
                        }
                    }
                }
                
            }
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Gets the status of an Azure Sql Database create or update operation.
    *
    * @param operationStatusLink Required. Location value returned by the Begin
    * operation
    * @return Response for long running Azure Sql Database operations.
    */
    @Override
    public Future<DatabaseCreateOrUpdateResponse> getDatabaseOperationStatusAsync(final String operationStatusLink) {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseCreateOrUpdateResponse>() { 
            @Override
            public DatabaseCreateOrUpdateResponse call() throws Exception {
                return getDatabaseOperationStatus(operationStatusLink);
            }
         });
    }
    
    /**
    * Gets the status of an Azure Sql Database create or update operation.
    *
    * @param operationStatusLink Required. Location value returned by the Begin
    * operation
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Response for long running Azure Sql Database operations.
    */
    @Override
    public DatabaseCreateOrUpdateResponse getDatabaseOperationStatus(String operationStatusLink) throws IOException, ServiceException {
        // Validate
        if (operationStatusLink == null) {
            throw new NullPointerException("operationStatusLink");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("operationStatusLink", operationStatusLink);
            CloudTracing.enter(invocationId, this, "getDatabaseOperationStatusAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "";
        url = url + operationStatusLink;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_CREATED && statusCode != HttpStatus.SC_ACCEPTED) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DatabaseCreateOrUpdateResponse result = null;
            // Deserialize Response
            if (statusCode == HttpStatus.SC_OK || statusCode == HttpStatus.SC_CREATED || statusCode == HttpStatus.SC_ACCEPTED) {
                InputStream responseContent = httpResponse.getEntity().getContent();
                result = new DatabaseCreateOrUpdateResponse();
                ObjectMapper objectMapper = new ObjectMapper();
                JsonNode responseDoc = null;
                if (responseContent == null == false) {
                    responseDoc = objectMapper.readTree(responseContent);
                }
                
                if (responseDoc != null && responseDoc instanceof NullNode == false) {
                    ErrorResponse errorInstance = new ErrorResponse();
                    result.setError(errorInstance);
                    
                    JsonNode codeValue = responseDoc.get("code");
                    if (codeValue != null && codeValue instanceof NullNode == false) {
                        String codeInstance;
                        codeInstance = codeValue.getTextValue();
                        errorInstance.setCode(codeInstance);
                    }
                    
                    JsonNode messageValue = responseDoc.get("message");
                    if (messageValue != null && messageValue instanceof NullNode == false) {
                        String messageInstance;
                        messageInstance = messageValue.getTextValue();
                        errorInstance.setMessage(messageInstance);
                    }
                    
                    JsonNode targetValue = responseDoc.get("target");
                    if (targetValue != null && targetValue instanceof NullNode == false) {
                        String targetInstance;
                        targetInstance = targetValue.getTextValue();
                        errorInstance.setTarget(targetInstance);
                    }
                    
                    Database databaseInstance = new Database();
                    result.setDatabase(databaseInstance);
                    
                    JsonNode propertiesValue = responseDoc.get("properties");
                    if (propertiesValue != null && propertiesValue instanceof NullNode == false) {
                        DatabaseProperties propertiesInstance = new DatabaseProperties();
                        databaseInstance.setProperties(propertiesInstance);
                        
                        JsonNode collationValue = propertiesValue.get("collation");
                        if (collationValue != null && collationValue instanceof NullNode == false) {
                            String collationInstance;
                            collationInstance = collationValue.getTextValue();
                            propertiesInstance.setCollation(collationInstance);
                        }
                        
                        JsonNode creationDateValue = propertiesValue.get("creationDate");
                        if (creationDateValue != null && creationDateValue instanceof NullNode == false) {
                            Calendar creationDateInstance;
                            creationDateInstance = DatatypeConverter.parseDateTime(creationDateValue.getTextValue());
                            propertiesInstance.setCreationDate(creationDateInstance);
                        }
                        
                        JsonNode currentServiceObjectiveIdValue = propertiesValue.get("currentServiceObjectiveId");
                        if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue instanceof NullNode == false) {
                            String currentServiceObjectiveIdInstance;
                            currentServiceObjectiveIdInstance = currentServiceObjectiveIdValue.getTextValue();
                            propertiesInstance.setCurrentServiceObjectiveId(currentServiceObjectiveIdInstance);
                        }
                        
                        JsonNode databaseIdValue = propertiesValue.get("databaseId");
                        if (databaseIdValue != null && databaseIdValue instanceof NullNode == false) {
                            String databaseIdInstance;
                            databaseIdInstance = databaseIdValue.getTextValue();
                            propertiesInstance.setDatabaseId(databaseIdInstance);
                        }
                        
                        JsonNode earliestRestoreDateValue = propertiesValue.get("earliestRestoreDate");
                        if (earliestRestoreDateValue != null && earliestRestoreDateValue instanceof NullNode == false) {
                            Calendar earliestRestoreDateInstance;
                            earliestRestoreDateInstance = DatatypeConverter.parseDateTime(earliestRestoreDateValue.getTextValue());
                            propertiesInstance.setEarliestRestoreDate(earliestRestoreDateInstance);
                        }
                        
                        JsonNode editionValue = propertiesValue.get("edition");
                        if (editionValue != null && editionValue instanceof NullNode == false) {
                            String editionInstance;
                            editionInstance = editionValue.getTextValue();
                            propertiesInstance.setEdition(editionInstance);
                        }
                        
                        JsonNode maxSizeBytesValue = propertiesValue.get("maxSizeBytes");
                        if (maxSizeBytesValue != null && maxSizeBytesValue instanceof NullNode == false) {
                            long maxSizeBytesInstance;
                            maxSizeBytesInstance = maxSizeBytesValue.getLongValue();
                            propertiesInstance.setMaxSizeBytes(maxSizeBytesInstance);
                        }
                        
                        JsonNode requestedServiceObjectiveIdValue = propertiesValue.get("requestedServiceObjectiveId");
                        if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue instanceof NullNode == false) {
                            String requestedServiceObjectiveIdInstance;
                            requestedServiceObjectiveIdInstance = requestedServiceObjectiveIdValue.getTextValue();
                            propertiesInstance.setRequestedServiceObjectiveId(requestedServiceObjectiveIdInstance);
                        }
                        
                        JsonNode requestedServiceObjectiveNameValue = propertiesValue.get("requestedServiceObjectiveName");
                        if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue instanceof NullNode == false) {
                            String requestedServiceObjectiveNameInstance;
                            requestedServiceObjectiveNameInstance = requestedServiceObjectiveNameValue.getTextValue();
                            propertiesInstance.setRequestedServiceObjectiveName(requestedServiceObjectiveNameInstance);
                        }
                        
                        JsonNode serviceLevelObjectiveValue = propertiesValue.get("serviceLevelObjective");
                        if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue instanceof NullNode == false) {
                            String serviceLevelObjectiveInstance;
                            serviceLevelObjectiveInstance = serviceLevelObjectiveValue.getTextValue();
                            propertiesInstance.setServiceObjective(serviceLevelObjectiveInstance);
                        }
                        
                        JsonNode statusValue = propertiesValue.get("status");
                        if (statusValue != null && statusValue instanceof NullNode == false) {
                            String statusInstance;
                            statusInstance = statusValue.getTextValue();
                            propertiesInstance.setStatus(statusInstance);
                        }
                        
                        JsonNode resourcePoolNameValue = propertiesValue.get("resourcePoolName");
                        if (resourcePoolNameValue != null && resourcePoolNameValue instanceof NullNode == false) {
                            String resourcePoolNameInstance;
                            resourcePoolNameInstance = resourcePoolNameValue.getTextValue();
                            propertiesInstance.setElasticPoolName(resourcePoolNameInstance);
                        }
                    }
                    
                    JsonNode idValue = responseDoc.get("id");
                    if (idValue != null && idValue instanceof NullNode == false) {
                        String idInstance;
                        idInstance = idValue.getTextValue();
                        databaseInstance.setId(idInstance);
                    }
                    
                    JsonNode nameValue = responseDoc.get("name");
                    if (nameValue != null && nameValue instanceof NullNode == false) {
                        String nameInstance;
                        nameInstance = nameValue.getTextValue();
                        databaseInstance.setName(nameInstance);
                    }
                    
                    JsonNode typeValue = responseDoc.get("type");
                    if (typeValue != null && typeValue instanceof NullNode == false) {
                        String typeInstance;
                        typeInstance = typeValue.getTextValue();
                        databaseInstance.setType(typeInstance);
                    }
                    
                    JsonNode locationValue = responseDoc.get("location");
                    if (locationValue != null && locationValue instanceof NullNode == false) {
                        String locationInstance;
                        locationInstance = locationValue.getTextValue();
                        databaseInstance.setLocation(locationInstance);
                    }
                    
                    JsonNode tagsSequenceElement = ((JsonNode) responseDoc.get("tags"));
                    if (tagsSequenceElement != null && tagsSequenceElement instanceof NullNode == false) {
                        Iterator<Map.Entry<String, JsonNode>> itr = tagsSequenceElement.getFields();
                        while (itr.hasNext()) {
                            Map.Entry<String, JsonNode> property = itr.next();
                            String tagsKey = property.getKey();
                            String tagsValue = property.getValue().getTextValue();
                            databaseInstance.getTags().put(tagsKey, tagsValue);
                        }
                    }
                }
                
            }
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            if (statusCode == HttpStatus.SC_CREATED) {
                result.setStatus(OperationStatus.Succeeded);
            }
            if (statusCode == HttpStatus.SC_OK) {
                result.setStatus(OperationStatus.Succeeded);
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Returns information about Azure SQL Databases.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server in
    * which the Azure SQL Databases are hosted.
    * @return Represents the response to a List Azure Sql Database request.
    */
    @Override
    public Future<DatabaseListResponse> listAsync(final String resourceGroupName, final String serverName) {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseListResponse>() { 
            @Override
            public DatabaseListResponse call() throws Exception {
                return list(resourceGroupName, serverName);
            }
         });
    }
    
    /**
    * Returns information about Azure SQL Databases.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server in
    * which the Azure SQL Databases are hosted.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Represents the response to a List Azure Sql Database request.
    */
    @Override
    public DatabaseListResponse list(String resourceGroupName, String serverName) throws IOException, ServiceException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (serverName == null) {
            throw new NullPointerException("serverName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("serverName", serverName);
            CloudTracing.enter(invocationId, this, "listAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "";
        url = url + "/subscriptions/";
        if (this.getClient().getCredentials().getSubscriptionId() != null) {
            url = url + URLEncoder.encode(this.getClient().getCredentials().getSubscriptionId(), "UTF-8");
        }
        url = url + "/resourceGroups/";
        url = url + URLEncoder.encode(resourceGroupName, "UTF-8");
        url = url + "/providers/";
        url = url + "Microsoft.Sql";
        url = url + "/servers/";
        url = url + URLEncoder.encode(serverName, "UTF-8");
        url = url + "/databases";
        ArrayList<String> queryParameters = new ArrayList<String>();
        queryParameters.add("api-version=" + "2014-04-01");
        if (queryParameters.size() > 0) {
            url = url + "?" + CollectionStringBuilder.join(queryParameters, "&");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DatabaseListResponse result = null;
            // Deserialize Response
            if (statusCode == HttpStatus.SC_OK) {
                InputStream responseContent = httpResponse.getEntity().getContent();
                result = new DatabaseListResponse();
                ObjectMapper objectMapper = new ObjectMapper();
                JsonNode responseDoc = null;
                if (responseContent == null == false) {
                    responseDoc = objectMapper.readTree(responseContent);
                }
                
                if (responseDoc != null && responseDoc instanceof NullNode == false) {
                    JsonNode valueArray = responseDoc.get("value");
                    if (valueArray != null && valueArray instanceof NullNode == false) {
                        for (JsonNode valueValue : ((ArrayNode) valueArray)) {
                            Database databaseInstance = new Database();
                            result.getDatabases().add(databaseInstance);
                            
                            JsonNode propertiesValue = valueValue.get("properties");
                            if (propertiesValue != null && propertiesValue instanceof NullNode == false) {
                                DatabaseProperties propertiesInstance = new DatabaseProperties();
                                databaseInstance.setProperties(propertiesInstance);
                                
                                JsonNode collationValue = propertiesValue.get("collation");
                                if (collationValue != null && collationValue instanceof NullNode == false) {
                                    String collationInstance;
                                    collationInstance = collationValue.getTextValue();
                                    propertiesInstance.setCollation(collationInstance);
                                }
                                
                                JsonNode creationDateValue = propertiesValue.get("creationDate");
                                if (creationDateValue != null && creationDateValue instanceof NullNode == false) {
                                    Calendar creationDateInstance;
                                    creationDateInstance = DatatypeConverter.parseDateTime(creationDateValue.getTextValue());
                                    propertiesInstance.setCreationDate(creationDateInstance);
                                }
                                
                                JsonNode currentServiceObjectiveIdValue = propertiesValue.get("currentServiceObjectiveId");
                                if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue instanceof NullNode == false) {
                                    String currentServiceObjectiveIdInstance;
                                    currentServiceObjectiveIdInstance = currentServiceObjectiveIdValue.getTextValue();
                                    propertiesInstance.setCurrentServiceObjectiveId(currentServiceObjectiveIdInstance);
                                }
                                
                                JsonNode databaseIdValue = propertiesValue.get("databaseId");
                                if (databaseIdValue != null && databaseIdValue instanceof NullNode == false) {
                                    String databaseIdInstance;
                                    databaseIdInstance = databaseIdValue.getTextValue();
                                    propertiesInstance.setDatabaseId(databaseIdInstance);
                                }
                                
                                JsonNode earliestRestoreDateValue = propertiesValue.get("earliestRestoreDate");
                                if (earliestRestoreDateValue != null && earliestRestoreDateValue instanceof NullNode == false) {
                                    Calendar earliestRestoreDateInstance;
                                    earliestRestoreDateInstance = DatatypeConverter.parseDateTime(earliestRestoreDateValue.getTextValue());
                                    propertiesInstance.setEarliestRestoreDate(earliestRestoreDateInstance);
                                }
                                
                                JsonNode editionValue = propertiesValue.get("edition");
                                if (editionValue != null && editionValue instanceof NullNode == false) {
                                    String editionInstance;
                                    editionInstance = editionValue.getTextValue();
                                    propertiesInstance.setEdition(editionInstance);
                                }
                                
                                JsonNode maxSizeBytesValue = propertiesValue.get("maxSizeBytes");
                                if (maxSizeBytesValue != null && maxSizeBytesValue instanceof NullNode == false) {
                                    long maxSizeBytesInstance;
                                    maxSizeBytesInstance = maxSizeBytesValue.getLongValue();
                                    propertiesInstance.setMaxSizeBytes(maxSizeBytesInstance);
                                }
                                
                                JsonNode requestedServiceObjectiveIdValue = propertiesValue.get("requestedServiceObjectiveId");
                                if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue instanceof NullNode == false) {
                                    String requestedServiceObjectiveIdInstance;
                                    requestedServiceObjectiveIdInstance = requestedServiceObjectiveIdValue.getTextValue();
                                    propertiesInstance.setRequestedServiceObjectiveId(requestedServiceObjectiveIdInstance);
                                }
                                
                                JsonNode requestedServiceObjectiveNameValue = propertiesValue.get("requestedServiceObjectiveName");
                                if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue instanceof NullNode == false) {
                                    String requestedServiceObjectiveNameInstance;
                                    requestedServiceObjectiveNameInstance = requestedServiceObjectiveNameValue.getTextValue();
                                    propertiesInstance.setRequestedServiceObjectiveName(requestedServiceObjectiveNameInstance);
                                }
                                
                                JsonNode serviceLevelObjectiveValue = propertiesValue.get("serviceLevelObjective");
                                if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue instanceof NullNode == false) {
                                    String serviceLevelObjectiveInstance;
                                    serviceLevelObjectiveInstance = serviceLevelObjectiveValue.getTextValue();
                                    propertiesInstance.setServiceObjective(serviceLevelObjectiveInstance);
                                }
                                
                                JsonNode statusValue = propertiesValue.get("status");
                                if (statusValue != null && statusValue instanceof NullNode == false) {
                                    String statusInstance;
                                    statusInstance = statusValue.getTextValue();
                                    propertiesInstance.setStatus(statusInstance);
                                }
                                
                                JsonNode resourcePoolNameValue = propertiesValue.get("resourcePoolName");
                                if (resourcePoolNameValue != null && resourcePoolNameValue instanceof NullNode == false) {
                                    String resourcePoolNameInstance;
                                    resourcePoolNameInstance = resourcePoolNameValue.getTextValue();
                                    propertiesInstance.setElasticPoolName(resourcePoolNameInstance);
                                }
                            }
                            
                            JsonNode idValue = valueValue.get("id");
                            if (idValue != null && idValue instanceof NullNode == false) {
                                String idInstance;
                                idInstance = idValue.getTextValue();
                                databaseInstance.setId(idInstance);
                            }
                            
                            JsonNode nameValue = valueValue.get("name");
                            if (nameValue != null && nameValue instanceof NullNode == false) {
                                String nameInstance;
                                nameInstance = nameValue.getTextValue();
                                databaseInstance.setName(nameInstance);
                            }
                            
                            JsonNode typeValue = valueValue.get("type");
                            if (typeValue != null && typeValue instanceof NullNode == false) {
                                String typeInstance;
                                typeInstance = typeValue.getTextValue();
                                databaseInstance.setType(typeInstance);
                            }
                            
                            JsonNode locationValue = valueValue.get("location");
                            if (locationValue != null && locationValue instanceof NullNode == false) {
                                String locationInstance;
                                locationInstance = locationValue.getTextValue();
                                databaseInstance.setLocation(locationInstance);
                            }
                            
                            JsonNode tagsSequenceElement = ((JsonNode) valueValue.get("tags"));
                            if (tagsSequenceElement != null && tagsSequenceElement instanceof NullNode == false) {
                                Iterator<Map.Entry<String, JsonNode>> itr = tagsSequenceElement.getFields();
                                while (itr.hasNext()) {
                                    Map.Entry<String, JsonNode> property = itr.next();
                                    String tagsKey = property.getKey();
                                    String tagsValue = property.getValue().getTextValue();
                                    databaseInstance.getTags().put(tagsKey, tagsValue);
                                }
                            }
                        }
                    }
                }
                
            }
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Returns information about Azure SQL Database usages.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server in
    * which the Azure SQL Databases are hosted.
    * @param databaseName Required. The name of the Azure SQL Database.
    * @return Represents the response to a List Azure Sql Database metrics
    * request.
    */
    @Override
    public Future<DatabaseMetricListResponse> listUsagesAsync(final String resourceGroupName, final String serverName, final String databaseName) {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseMetricListResponse>() { 
            @Override
            public DatabaseMetricListResponse call() throws Exception {
                return listUsages(resourceGroupName, serverName, databaseName);
            }
         });
    }
    
    /**
    * Returns information about Azure SQL Database usages.
    *
    * @param resourceGroupName Required. The name of the Resource Group to
    * which the server belongs.
    * @param serverName Required. The name of the Azure SQL Database Server in
    * which the Azure SQL Databases are hosted.
    * @param databaseName Required. The name of the Azure SQL Database.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Represents the response to a List Azure Sql Database metrics
    * request.
    */
    @Override
    public DatabaseMetricListResponse listUsages(String resourceGroupName, String serverName, String databaseName) throws IOException, ServiceException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (serverName == null) {
            throw new NullPointerException("serverName");
        }
        if (databaseName == null) {
            throw new NullPointerException("databaseName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseName", databaseName);
            CloudTracing.enter(invocationId, this, "listUsagesAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "";
        url = url + "/subscriptions/";
        if (this.getClient().getCredentials().getSubscriptionId() != null) {
            url = url + URLEncoder.encode(this.getClient().getCredentials().getSubscriptionId(), "UTF-8");
        }
        url = url + "/resourceGroups/";
        url = url + URLEncoder.encode(resourceGroupName, "UTF-8");
        url = url + "/providers/";
        url = url + "Microsoft.Sql";
        url = url + "/servers/";
        url = url + URLEncoder.encode(serverName, "UTF-8");
        url = url + "/databases/";
        url = url + URLEncoder.encode(databaseName, "UTF-8");
        url = url + "/usages";
        ArrayList<String> queryParameters = new ArrayList<String>();
        queryParameters.add("api-version=" + "2014-04-01");
        if (queryParameters.size() > 0) {
            url = url + "?" + CollectionStringBuilder.join(queryParameters, "&");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DatabaseMetricListResponse result = null;
            // Deserialize Response
            if (statusCode == HttpStatus.SC_OK) {
                InputStream responseContent = httpResponse.getEntity().getContent();
                result = new DatabaseMetricListResponse();
                ObjectMapper objectMapper = new ObjectMapper();
                JsonNode responseDoc = null;
                if (responseContent == null == false) {
                    responseDoc = objectMapper.readTree(responseContent);
                }
                
                if (responseDoc != null && responseDoc instanceof NullNode == false) {
                    JsonNode valueArray = responseDoc.get("value");
                    if (valueArray != null && valueArray instanceof NullNode == false) {
                        for (JsonNode valueValue : ((ArrayNode) valueArray)) {
                            DatabaseMetric databaseMetricInstance = new DatabaseMetric();
                            result.getMetrics().add(databaseMetricInstance);
                            
                            JsonNode resourceNameValue = valueValue.get("resourceName");
                            if (resourceNameValue != null && resourceNameValue instanceof NullNode == false) {
                                String resourceNameInstance;
                                resourceNameInstance = resourceNameValue.getTextValue();
                                databaseMetricInstance.setResourceName(resourceNameInstance);
                            }
                            
                            JsonNode displayNameValue = valueValue.get("displayName");
                            if (displayNameValue != null && displayNameValue instanceof NullNode == false) {
                                String displayNameInstance;
                                displayNameInstance = displayNameValue.getTextValue();
                                databaseMetricInstance.setDisplayName(displayNameInstance);
                            }
                            
                            JsonNode currentValueValue = valueValue.get("currentValue");
                            if (currentValueValue != null && currentValueValue instanceof NullNode == false) {
                                double currentValueInstance;
                                currentValueInstance = currentValueValue.getDoubleValue();
                                databaseMetricInstance.setCurrentValue(currentValueInstance);
                            }
                            
                            JsonNode limitValue = valueValue.get("limit");
                            if (limitValue != null && limitValue instanceof NullNode == false) {
                                double limitInstance;
                                limitInstance = limitValue.getDoubleValue();
                                databaseMetricInstance.setLimit(limitInstance);
                            }
                            
                            JsonNode unitValue = valueValue.get("unit");
                            if (unitValue != null && unitValue instanceof NullNode == false) {
                                String unitInstance;
                                unitInstance = unitValue.getTextValue();
                                databaseMetricInstance.setUnit(unitInstance);
                            }
                            
                            JsonNode nextResetTimeValue = valueValue.get("nextResetTime");
                            if (nextResetTimeValue != null && nextResetTimeValue instanceof NullNode == false) {
                                Calendar nextResetTimeInstance;
                                nextResetTimeInstance = DatatypeConverter.parseDateTime(nextResetTimeValue.getTextValue());
                                databaseMetricInstance.setNextResetTime(nextResetTimeInstance);
                            }
                        }
                    }
                }
                
            }
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
}
