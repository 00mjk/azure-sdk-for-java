/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.sql;

import com.microsoft.windowsazure.core.OperationResponse;
import com.microsoft.windowsazure.core.ServiceOperations;
import com.microsoft.windowsazure.core.pipeline.apache.CustomHttpDelete;
import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.management.sql.models.DatabaseCopyCreateParameters;
import com.microsoft.windowsazure.management.sql.models.DatabaseCopyListResponse;
import com.microsoft.windowsazure.management.sql.models.DatabaseCopyResponse;
import com.microsoft.windowsazure.management.sql.models.DatabaseCopyUpdateParameters;
import com.microsoft.windowsazure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.text.ParseException;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
* The SQL Database Management API includes operations for managing SQL Database
* Copies for a subscription.
*/
public class DatabaseCopyOperationsImpl implements ServiceOperations<SqlManagementClientImpl>, DatabaseCopyOperations
{
    /**
    * Initializes a new instance of the DatabaseCopyOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    DatabaseCopyOperationsImpl(SqlManagementClientImpl client)
    {
        this.client = client;
    }
    
    private SqlManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.sql.SqlManagementClientImpl.
    * @return The Client value.
    */
    public SqlManagementClientImpl getClient()
    {
        return this.client;
    }
    
    /**
    * The Create Database Copy operation starts a database copy.
    *
    * @param serverName The name of the SQL Server where the source database
    * resides
    * @param databaseName The name of the source database
    * @param parameters Additional parameters for the create database copy
    * operation
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<DatabaseCopyResponse> createAsync(final String serverName, final String databaseName, final DatabaseCopyCreateParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseCopyResponse>() { 
            @Override
            public DatabaseCopyResponse call() throws Exception
            {
                return create(serverName, databaseName, parameters);
            }
         });
    }
    
    /**
    * The Create Database Copy operation starts a database copy.
    *
    * @param serverName The name of the SQL Server where the source database
    * resides
    * @param databaseName The name of the source database
    * @param parameters Additional parameters for the create database copy
    * operation
    * @throws ParserConfigurationException Thrown if there was an error
    * configuring the parser for the response body.
    * @throws SAXException Thrown if there was an error parsing the response
    * body.
    * @throws TransformerException Thrown if there was an error creating the
    * DOM transformer.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public DatabaseCopyResponse create(String serverName, String databaseName, DatabaseCopyCreateParameters parameters) throws ParserConfigurationException, SAXException, TransformerException, IOException, ServiceException, ParseException
    {
        // Validate
        if (serverName == null)
        {
            throw new NullPointerException("serverName");
        }
        if (databaseName == null)
        {
            throw new NullPointerException("databaseName");
        }
        if (parameters == null)
        {
            throw new NullPointerException("parameters");
        }
        if (parameters.getPartnerDatabase() == null)
        {
            throw new NullPointerException("parameters.PartnerDatabase");
        }
        if (parameters.getPartnerServer() == null)
        {
            throw new NullPointerException("parameters.PartnerServer");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseName", databaseName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName + "/databasecopies";
        
        // Create HTTP transport objects
        HttpPost httpRequest = new HttpPost(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("x-ms-version", "2012-03-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element serviceResourceElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "ServiceResource");
        requestDoc.appendChild(serviceResourceElement);
        
        Element partnerServerElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "PartnerServer");
        partnerServerElement.appendChild(requestDoc.createTextNode(parameters.getPartnerServer()));
        serviceResourceElement.appendChild(partnerServerElement);
        
        Element partnerDatabaseElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "PartnerDatabase");
        partnerDatabaseElement.appendChild(requestDoc.createTextNode(parameters.getPartnerDatabase()));
        serviceResourceElement.appendChild(partnerDatabaseElement);
        
        if (parameters.getMaxLagInMinutes() != null)
        {
            Element maxLagInMinutesElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "MaxLagInMinutes");
            maxLagInMinutesElement.appendChild(requestDoc.createTextNode(Integer.toString(parameters.getMaxLagInMinutes())));
            serviceResourceElement.appendChild(maxLagInMinutesElement);
        }
        
        Element isContinuousElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "IsContinuous");
        isContinuousElement.appendChild(requestDoc.createTextNode(Boolean.toString(parameters.isContinuous()).toLowerCase()));
        serviceResourceElement.appendChild(isContinuousElement);
        
        Element isForcedTerminateElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "IsForcedTerminate");
        isForcedTerminateElement.appendChild(requestDoc.createTextNode(Boolean.toString(parameters.isForcedTerminate()).toLowerCase()));
        serviceResourceElement.appendChild(isForcedTerminateElement);
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_CREATED)
            {
                ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DatabaseCopyResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new DatabaseCopyResponse();
            DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder2 = documentBuilderFactory2.newDocumentBuilder();
            Document responseDoc = documentBuilder2.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagName("ServiceResource");
            Element serviceResourceElement2 = elements.getLength() > 0 ? ((Element) elements.item(0)) : null;
            if (serviceResourceElement2 != null)
            {
                NodeList elements2 = serviceResourceElement2.getElementsByTagName("Name");
                Element nameElement = elements2.getLength() > 0 ? ((Element) elements2.item(0)) : null;
                if (nameElement != null)
                {
                    String nameInstance;
                    nameInstance = nameElement.getTextContent();
                    result.setName(nameInstance);
                }
                
                NodeList elements3 = serviceResourceElement2.getElementsByTagName("State");
                Element stateElement = elements3.getLength() > 0 ? ((Element) elements3.item(0)) : null;
                if (stateElement != null)
                {
                    String stateInstance;
                    stateInstance = stateElement.getTextContent();
                    result.setState(stateInstance);
                }
                
                NodeList elements4 = serviceResourceElement2.getElementsByTagName("SourceServerName");
                Element sourceServerNameElement = elements4.getLength() > 0 ? ((Element) elements4.item(0)) : null;
                if (sourceServerNameElement != null)
                {
                    String sourceServerNameInstance;
                    sourceServerNameInstance = sourceServerNameElement.getTextContent();
                    result.setSourceServerName(sourceServerNameInstance);
                }
                
                NodeList elements5 = serviceResourceElement2.getElementsByTagName("SourceDatabaseName");
                Element sourceDatabaseNameElement = elements5.getLength() > 0 ? ((Element) elements5.item(0)) : null;
                if (sourceDatabaseNameElement != null)
                {
                    String sourceDatabaseNameInstance;
                    sourceDatabaseNameInstance = sourceDatabaseNameElement.getTextContent();
                    result.setSourceDatabaseName(sourceDatabaseNameInstance);
                }
                
                NodeList elements6 = serviceResourceElement2.getElementsByTagName("DestinationServerName");
                Element destinationServerNameElement = elements6.getLength() > 0 ? ((Element) elements6.item(0)) : null;
                if (destinationServerNameElement != null)
                {
                    String destinationServerNameInstance;
                    destinationServerNameInstance = destinationServerNameElement.getTextContent();
                    result.setDestinationServerName(destinationServerNameInstance);
                }
                
                NodeList elements7 = serviceResourceElement2.getElementsByTagName("DestinationDatabaseName");
                Element destinationDatabaseNameElement = elements7.getLength() > 0 ? ((Element) elements7.item(0)) : null;
                if (destinationDatabaseNameElement != null)
                {
                    String destinationDatabaseNameInstance;
                    destinationDatabaseNameInstance = destinationDatabaseNameElement.getTextContent();
                    result.setDestinationDatabaseName(destinationDatabaseNameInstance);
                }
                
                NodeList elements8 = serviceResourceElement2.getElementsByTagName("MaxLagInMinutes");
                Element maxLagInMinutesElement2 = elements8.getLength() > 0 ? ((Element) elements8.item(0)) : null;
                if (maxLagInMinutesElement2 != null && (maxLagInMinutesElement2.getTextContent() != null && maxLagInMinutesElement2.getTextContent().isEmpty() != true) == false)
                {
                    int maxLagInMinutesInstance;
                    maxLagInMinutesInstance = Integer.parseInt(maxLagInMinutesElement2.getTextContent());
                    result.setMaxLagInMinutes(maxLagInMinutesInstance);
                }
                
                NodeList elements9 = serviceResourceElement2.getElementsByTagName("IsContinuous");
                Element isContinuousElement2 = elements9.getLength() > 0 ? ((Element) elements9.item(0)) : null;
                if (isContinuousElement2 != null)
                {
                    boolean isContinuousInstance;
                    isContinuousInstance = Boolean.parseBoolean(isContinuousElement2.getTextContent());
                    result.setIsContinuous(isContinuousInstance);
                }
                
                NodeList elements10 = serviceResourceElement2.getElementsByTagName("ReplicationState");
                Element replicationStateElement = elements10.getLength() > 0 ? ((Element) elements10.item(0)) : null;
                if (replicationStateElement != null)
                {
                    byte replicationStateInstance;
                    replicationStateInstance = Byte.valueOf(replicationStateElement.getTextContent());
                    result.setReplicationState(replicationStateInstance);
                }
                
                NodeList elements11 = serviceResourceElement2.getElementsByTagName("ReplicationStateDescription");
                Element replicationStateDescriptionElement = elements11.getLength() > 0 ? ((Element) elements11.item(0)) : null;
                if (replicationStateDescriptionElement != null)
                {
                    String replicationStateDescriptionInstance;
                    replicationStateDescriptionInstance = replicationStateDescriptionElement.getTextContent();
                    result.setReplicationStateDescription(replicationStateDescriptionInstance);
                }
                
                NodeList elements12 = serviceResourceElement2.getElementsByTagName("LocalDatabaseId");
                Element localDatabaseIdElement = elements12.getLength() > 0 ? ((Element) elements12.item(0)) : null;
                if (localDatabaseIdElement != null)
                {
                    int localDatabaseIdInstance;
                    localDatabaseIdInstance = Integer.parseInt(localDatabaseIdElement.getTextContent());
                    result.setLocalDatabaseId(localDatabaseIdInstance);
                }
                
                NodeList elements13 = serviceResourceElement2.getElementsByTagName("IsLocalDatabaseReplicationTarget");
                Element isLocalDatabaseReplicationTargetElement = elements13.getLength() > 0 ? ((Element) elements13.item(0)) : null;
                if (isLocalDatabaseReplicationTargetElement != null)
                {
                    boolean isLocalDatabaseReplicationTargetInstance;
                    isLocalDatabaseReplicationTargetInstance = Boolean.parseBoolean(isLocalDatabaseReplicationTargetElement.getTextContent());
                    result.setIsLocalDatabaseReplicationTarget(isLocalDatabaseReplicationTargetInstance);
                }
                
                NodeList elements14 = serviceResourceElement2.getElementsByTagName("IsInterlinkConnected");
                Element isInterlinkConnectedElement = elements14.getLength() > 0 ? ((Element) elements14.item(0)) : null;
                if (isInterlinkConnectedElement != null)
                {
                    boolean isInterlinkConnectedInstance;
                    isInterlinkConnectedInstance = Boolean.parseBoolean(isInterlinkConnectedElement.getTextContent());
                    result.setIsInterlinkConnected(isInterlinkConnectedInstance);
                }
                
                NodeList elements15 = serviceResourceElement2.getElementsByTagName("TextStartDate");
                Element textStartDateElement = elements15.getLength() > 0 ? ((Element) elements15.item(0)) : null;
                if (textStartDateElement != null)
                {
                }
                
                NodeList elements16 = serviceResourceElement2.getElementsByTagName("TextModifyDate");
                Element textModifyDateElement = elements16.getLength() > 0 ? ((Element) elements16.item(0)) : null;
                if (textModifyDateElement != null)
                {
                }
                
                NodeList elements17 = serviceResourceElement2.getElementsByTagName("PercentComplete");
                Element percentCompleteElement = elements17.getLength() > 0 ? ((Element) elements17.item(0)) : null;
                if (percentCompleteElement != null && (percentCompleteElement.getTextContent() != null && percentCompleteElement.getTextContent().isEmpty() != true) == false)
                {
                    float percentCompleteInstance;
                    percentCompleteInstance = Float.parseFloat(percentCompleteElement.getTextContent());
                    result.setPercentComplete(percentCompleteInstance);
                }
                
                NodeList elements18 = serviceResourceElement2.getElementsByTagName("IsForcedTerminate");
                Element isForcedTerminateElement2 = elements18.getLength() > 0 ? ((Element) elements18.item(0)) : null;
                if (isForcedTerminateElement2 != null && (isForcedTerminateElement2.getTextContent() != null && isForcedTerminateElement2.getTextContent().isEmpty() != true) == false)
                {
                    boolean isForcedTerminateInstance;
                    isForcedTerminateInstance = Boolean.parseBoolean(isForcedTerminateElement2.getTextContent());
                    result.setIsForcedTerminate(isForcedTerminateInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * The Delete Database Copy operation stops a SQL Database copy.
    *
    * @param serverName The name of the source or destination SQL Server
    * instance
    * @param databaseName The name of the database
    * @param databaseCopyName The unique identifier for the database copy to
    * stop
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteAsync(final String serverName, final String databaseName, final String databaseCopyName)
    {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception
            {
                return delete(serverName, databaseName, databaseCopyName);
            }
         });
    }
    
    /**
    * The Delete Database Copy operation stops a SQL Database copy.
    *
    * @param serverName The name of the source or destination SQL Server
    * instance
    * @param databaseName The name of the database
    * @param databaseCopyName The unique identifier for the database copy to
    * stop
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse delete(String serverName, String databaseName, String databaseCopyName) throws IOException, ServiceException
    {
        // Validate
        if (serverName == null)
        {
            throw new NullPointerException("serverName");
        }
        if (databaseName == null)
        {
            throw new NullPointerException("databaseName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseName", databaseName);
            tracingParameters.put("databaseCopyName", databaseCopyName);
            CloudTracing.enter(invocationId, this, "deleteAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName + "/databasecopies/" + databaseCopyName;
        
        // Create HTTP transport objects
        CustomHttpDelete httpRequest = new CustomHttpDelete(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("x-ms-version", "2012-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK)
            {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * The Get Database Copy operation retrieves information about a SQL Server
    * database copy.
    *
    * @param serverName The name of the source or destination SQL Server
    * instance
    * @param databaseName The name of the database
    * @param databaseCopyName The unique identifier for the database copy to
    * retrieve
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<DatabaseCopyResponse> getAsync(final String serverName, final String databaseName, final String databaseCopyName)
    {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseCopyResponse>() { 
            @Override
            public DatabaseCopyResponse call() throws Exception
            {
                return get(serverName, databaseName, databaseCopyName);
            }
         });
    }
    
    /**
    * The Get Database Copy operation retrieves information about a SQL Server
    * database copy.
    *
    * @param serverName The name of the source or destination SQL Server
    * instance
    * @param databaseName The name of the database
    * @param databaseCopyName The unique identifier for the database copy to
    * retrieve
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParserConfigurationException Thrown if there was a serious
    * configuration error with the document parser.
    * @throws SAXException Thrown if there was an error parsing the XML
    * response.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public DatabaseCopyResponse get(String serverName, String databaseName, String databaseCopyName) throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException
    {
        // Validate
        if (serverName == null)
        {
            throw new NullPointerException("serverName");
        }
        if (databaseName == null)
        {
            throw new NullPointerException("databaseName");
        }
        if (databaseCopyName == null)
        {
            throw new NullPointerException("databaseCopyName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseName", databaseName);
            tracingParameters.put("databaseCopyName", databaseCopyName);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName + "/databasecopies/" + databaseCopyName;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2012-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK)
            {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DatabaseCopyResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new DatabaseCopyResponse();
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document responseDoc = documentBuilder.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagName("ServiceResource");
            Element serviceResourceElement = elements.getLength() > 0 ? ((Element) elements.item(0)) : null;
            if (serviceResourceElement != null)
            {
                NodeList elements2 = serviceResourceElement.getElementsByTagName("Name");
                Element nameElement = elements2.getLength() > 0 ? ((Element) elements2.item(0)) : null;
                if (nameElement != null)
                {
                    String nameInstance;
                    nameInstance = nameElement.getTextContent();
                    result.setName(nameInstance);
                }
                
                NodeList elements3 = serviceResourceElement.getElementsByTagName("State");
                Element stateElement = elements3.getLength() > 0 ? ((Element) elements3.item(0)) : null;
                if (stateElement != null)
                {
                    String stateInstance;
                    stateInstance = stateElement.getTextContent();
                    result.setState(stateInstance);
                }
                
                NodeList elements4 = serviceResourceElement.getElementsByTagName("SourceServerName");
                Element sourceServerNameElement = elements4.getLength() > 0 ? ((Element) elements4.item(0)) : null;
                if (sourceServerNameElement != null)
                {
                    String sourceServerNameInstance;
                    sourceServerNameInstance = sourceServerNameElement.getTextContent();
                    result.setSourceServerName(sourceServerNameInstance);
                }
                
                NodeList elements5 = serviceResourceElement.getElementsByTagName("SourceDatabaseName");
                Element sourceDatabaseNameElement = elements5.getLength() > 0 ? ((Element) elements5.item(0)) : null;
                if (sourceDatabaseNameElement != null)
                {
                    String sourceDatabaseNameInstance;
                    sourceDatabaseNameInstance = sourceDatabaseNameElement.getTextContent();
                    result.setSourceDatabaseName(sourceDatabaseNameInstance);
                }
                
                NodeList elements6 = serviceResourceElement.getElementsByTagName("DestinationServerName");
                Element destinationServerNameElement = elements6.getLength() > 0 ? ((Element) elements6.item(0)) : null;
                if (destinationServerNameElement != null)
                {
                    String destinationServerNameInstance;
                    destinationServerNameInstance = destinationServerNameElement.getTextContent();
                    result.setDestinationServerName(destinationServerNameInstance);
                }
                
                NodeList elements7 = serviceResourceElement.getElementsByTagName("DestinationDatabaseName");
                Element destinationDatabaseNameElement = elements7.getLength() > 0 ? ((Element) elements7.item(0)) : null;
                if (destinationDatabaseNameElement != null)
                {
                    String destinationDatabaseNameInstance;
                    destinationDatabaseNameInstance = destinationDatabaseNameElement.getTextContent();
                    result.setDestinationDatabaseName(destinationDatabaseNameInstance);
                }
                
                NodeList elements8 = serviceResourceElement.getElementsByTagName("MaxLagInMinutes");
                Element maxLagInMinutesElement = elements8.getLength() > 0 ? ((Element) elements8.item(0)) : null;
                if (maxLagInMinutesElement != null && (maxLagInMinutesElement.getTextContent() != null && maxLagInMinutesElement.getTextContent().isEmpty() != true) == false)
                {
                    int maxLagInMinutesInstance;
                    maxLagInMinutesInstance = Integer.parseInt(maxLagInMinutesElement.getTextContent());
                    result.setMaxLagInMinutes(maxLagInMinutesInstance);
                }
                
                NodeList elements9 = serviceResourceElement.getElementsByTagName("IsContinuous");
                Element isContinuousElement = elements9.getLength() > 0 ? ((Element) elements9.item(0)) : null;
                if (isContinuousElement != null)
                {
                    boolean isContinuousInstance;
                    isContinuousInstance = Boolean.parseBoolean(isContinuousElement.getTextContent());
                    result.setIsContinuous(isContinuousInstance);
                }
                
                NodeList elements10 = serviceResourceElement.getElementsByTagName("ReplicationState");
                Element replicationStateElement = elements10.getLength() > 0 ? ((Element) elements10.item(0)) : null;
                if (replicationStateElement != null)
                {
                    byte replicationStateInstance;
                    replicationStateInstance = Byte.valueOf(replicationStateElement.getTextContent());
                    result.setReplicationState(replicationStateInstance);
                }
                
                NodeList elements11 = serviceResourceElement.getElementsByTagName("ReplicationStateDescription");
                Element replicationStateDescriptionElement = elements11.getLength() > 0 ? ((Element) elements11.item(0)) : null;
                if (replicationStateDescriptionElement != null)
                {
                    String replicationStateDescriptionInstance;
                    replicationStateDescriptionInstance = replicationStateDescriptionElement.getTextContent();
                    result.setReplicationStateDescription(replicationStateDescriptionInstance);
                }
                
                NodeList elements12 = serviceResourceElement.getElementsByTagName("LocalDatabaseId");
                Element localDatabaseIdElement = elements12.getLength() > 0 ? ((Element) elements12.item(0)) : null;
                if (localDatabaseIdElement != null)
                {
                    int localDatabaseIdInstance;
                    localDatabaseIdInstance = Integer.parseInt(localDatabaseIdElement.getTextContent());
                    result.setLocalDatabaseId(localDatabaseIdInstance);
                }
                
                NodeList elements13 = serviceResourceElement.getElementsByTagName("IsLocalDatabaseReplicationTarget");
                Element isLocalDatabaseReplicationTargetElement = elements13.getLength() > 0 ? ((Element) elements13.item(0)) : null;
                if (isLocalDatabaseReplicationTargetElement != null)
                {
                    boolean isLocalDatabaseReplicationTargetInstance;
                    isLocalDatabaseReplicationTargetInstance = Boolean.parseBoolean(isLocalDatabaseReplicationTargetElement.getTextContent());
                    result.setIsLocalDatabaseReplicationTarget(isLocalDatabaseReplicationTargetInstance);
                }
                
                NodeList elements14 = serviceResourceElement.getElementsByTagName("IsInterlinkConnected");
                Element isInterlinkConnectedElement = elements14.getLength() > 0 ? ((Element) elements14.item(0)) : null;
                if (isInterlinkConnectedElement != null)
                {
                    boolean isInterlinkConnectedInstance;
                    isInterlinkConnectedInstance = Boolean.parseBoolean(isInterlinkConnectedElement.getTextContent());
                    result.setIsInterlinkConnected(isInterlinkConnectedInstance);
                }
                
                NodeList elements15 = serviceResourceElement.getElementsByTagName("TextStartDate");
                Element textStartDateElement = elements15.getLength() > 0 ? ((Element) elements15.item(0)) : null;
                if (textStartDateElement != null)
                {
                }
                
                NodeList elements16 = serviceResourceElement.getElementsByTagName("TextModifyDate");
                Element textModifyDateElement = elements16.getLength() > 0 ? ((Element) elements16.item(0)) : null;
                if (textModifyDateElement != null)
                {
                }
                
                NodeList elements17 = serviceResourceElement.getElementsByTagName("PercentComplete");
                Element percentCompleteElement = elements17.getLength() > 0 ? ((Element) elements17.item(0)) : null;
                if (percentCompleteElement != null && (percentCompleteElement.getTextContent() != null && percentCompleteElement.getTextContent().isEmpty() != true) == false)
                {
                    float percentCompleteInstance;
                    percentCompleteInstance = Float.parseFloat(percentCompleteElement.getTextContent());
                    result.setPercentComplete(percentCompleteInstance);
                }
                
                NodeList elements18 = serviceResourceElement.getElementsByTagName("IsForcedTerminate");
                Element isForcedTerminateElement = elements18.getLength() > 0 ? ((Element) elements18.item(0)) : null;
                if (isForcedTerminateElement != null && (isForcedTerminateElement.getTextContent() != null && isForcedTerminateElement.getTextContent().isEmpty() != true) == false)
                {
                    boolean isForcedTerminateInstance;
                    isForcedTerminateInstance = Boolean.parseBoolean(isForcedTerminateElement.getTextContent());
                    result.setIsForcedTerminate(isForcedTerminateInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    *
    * @param serverName The name of the database server to be queried
    * @param databaseName The name of the database to be queried
    * @return Response containing the list of database copies for a given
    * database.
    */
    @Override
    public Future<DatabaseCopyListResponse> listAsync(final String serverName, final String databaseName)
    {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseCopyListResponse>() { 
            @Override
            public DatabaseCopyListResponse call() throws Exception
            {
                return list(serverName, databaseName);
            }
         });
    }
    
    /**
    *
    * @param serverName The name of the database server to be queried
    * @param databaseName The name of the database to be queried
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParserConfigurationException Thrown if there was a serious
    * configuration error with the document parser.
    * @throws SAXException Thrown if there was an error parsing the XML
    * response.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @return Response containing the list of database copies for a given
    * database.
    */
    @Override
    public DatabaseCopyListResponse list(String serverName, String databaseName) throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException
    {
        // Validate
        if (serverName == null)
        {
            throw new NullPointerException("serverName");
        }
        if (databaseName == null)
        {
            throw new NullPointerException("databaseName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseName", databaseName);
            CloudTracing.enter(invocationId, this, "listAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName + "/databasecopies";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2012-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK)
            {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DatabaseCopyListResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new DatabaseCopyListResponse();
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document responseDoc = documentBuilder.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagName("ServiceResources");
            Element serviceResourcesSequenceElement = elements.getLength() > 0 ? ((Element) elements.item(0)) : null;
            if (serviceResourcesSequenceElement != null)
            {
                for (int i1 = 0; i1 < serviceResourcesSequenceElement.getElementsByTagName("ServiceResource").getLength(); i1 = i1 + 1)
                {
                    org.w3c.dom.Element serviceResourcesElement = ((org.w3c.dom.Element) serviceResourcesSequenceElement.getElementsByTagName("ServiceResource").item(i1));
                    DatabaseCopyResponse serviceResourceInstance = new DatabaseCopyResponse();
                    result.getDatabaseCopies().add(serviceResourceInstance);
                    
                    NodeList elements2 = serviceResourcesElement.getElementsByTagName("Name");
                    Element nameElement = elements2.getLength() > 0 ? ((Element) elements2.item(0)) : null;
                    if (nameElement != null)
                    {
                        String nameInstance;
                        nameInstance = nameElement.getTextContent();
                        serviceResourceInstance.setName(nameInstance);
                    }
                    
                    NodeList elements3 = serviceResourcesElement.getElementsByTagName("State");
                    Element stateElement = elements3.getLength() > 0 ? ((Element) elements3.item(0)) : null;
                    if (stateElement != null)
                    {
                        String stateInstance;
                        stateInstance = stateElement.getTextContent();
                        serviceResourceInstance.setState(stateInstance);
                    }
                    
                    NodeList elements4 = serviceResourcesElement.getElementsByTagName("SourceServerName");
                    Element sourceServerNameElement = elements4.getLength() > 0 ? ((Element) elements4.item(0)) : null;
                    if (sourceServerNameElement != null)
                    {
                        String sourceServerNameInstance;
                        sourceServerNameInstance = sourceServerNameElement.getTextContent();
                        serviceResourceInstance.setSourceServerName(sourceServerNameInstance);
                    }
                    
                    NodeList elements5 = serviceResourcesElement.getElementsByTagName("SourceDatabaseName");
                    Element sourceDatabaseNameElement = elements5.getLength() > 0 ? ((Element) elements5.item(0)) : null;
                    if (sourceDatabaseNameElement != null)
                    {
                        String sourceDatabaseNameInstance;
                        sourceDatabaseNameInstance = sourceDatabaseNameElement.getTextContent();
                        serviceResourceInstance.setSourceDatabaseName(sourceDatabaseNameInstance);
                    }
                    
                    NodeList elements6 = serviceResourcesElement.getElementsByTagName("DestinationServerName");
                    Element destinationServerNameElement = elements6.getLength() > 0 ? ((Element) elements6.item(0)) : null;
                    if (destinationServerNameElement != null)
                    {
                        String destinationServerNameInstance;
                        destinationServerNameInstance = destinationServerNameElement.getTextContent();
                        serviceResourceInstance.setDestinationServerName(destinationServerNameInstance);
                    }
                    
                    NodeList elements7 = serviceResourcesElement.getElementsByTagName("DestinationDatabaseName");
                    Element destinationDatabaseNameElement = elements7.getLength() > 0 ? ((Element) elements7.item(0)) : null;
                    if (destinationDatabaseNameElement != null)
                    {
                        String destinationDatabaseNameInstance;
                        destinationDatabaseNameInstance = destinationDatabaseNameElement.getTextContent();
                        serviceResourceInstance.setDestinationDatabaseName(destinationDatabaseNameInstance);
                    }
                    
                    NodeList elements8 = serviceResourcesElement.getElementsByTagName("MaxLagInMinutes");
                    Element maxLagInMinutesElement = elements8.getLength() > 0 ? ((Element) elements8.item(0)) : null;
                    if (maxLagInMinutesElement != null && (maxLagInMinutesElement.getTextContent() != null && maxLagInMinutesElement.getTextContent().isEmpty() != true) == false)
                    {
                        int maxLagInMinutesInstance;
                        maxLagInMinutesInstance = Integer.parseInt(maxLagInMinutesElement.getTextContent());
                        serviceResourceInstance.setMaxLagInMinutes(maxLagInMinutesInstance);
                    }
                    
                    NodeList elements9 = serviceResourcesElement.getElementsByTagName("IsContinuous");
                    Element isContinuousElement = elements9.getLength() > 0 ? ((Element) elements9.item(0)) : null;
                    if (isContinuousElement != null)
                    {
                        boolean isContinuousInstance;
                        isContinuousInstance = Boolean.parseBoolean(isContinuousElement.getTextContent());
                        serviceResourceInstance.setIsContinuous(isContinuousInstance);
                    }
                    
                    NodeList elements10 = serviceResourcesElement.getElementsByTagName("ReplicationState");
                    Element replicationStateElement = elements10.getLength() > 0 ? ((Element) elements10.item(0)) : null;
                    if (replicationStateElement != null)
                    {
                        byte replicationStateInstance;
                        replicationStateInstance = Byte.valueOf(replicationStateElement.getTextContent());
                        serviceResourceInstance.setReplicationState(replicationStateInstance);
                    }
                    
                    NodeList elements11 = serviceResourcesElement.getElementsByTagName("ReplicationStateDescription");
                    Element replicationStateDescriptionElement = elements11.getLength() > 0 ? ((Element) elements11.item(0)) : null;
                    if (replicationStateDescriptionElement != null)
                    {
                        String replicationStateDescriptionInstance;
                        replicationStateDescriptionInstance = replicationStateDescriptionElement.getTextContent();
                        serviceResourceInstance.setReplicationStateDescription(replicationStateDescriptionInstance);
                    }
                    
                    NodeList elements12 = serviceResourcesElement.getElementsByTagName("LocalDatabaseId");
                    Element localDatabaseIdElement = elements12.getLength() > 0 ? ((Element) elements12.item(0)) : null;
                    if (localDatabaseIdElement != null)
                    {
                        int localDatabaseIdInstance;
                        localDatabaseIdInstance = Integer.parseInt(localDatabaseIdElement.getTextContent());
                        serviceResourceInstance.setLocalDatabaseId(localDatabaseIdInstance);
                    }
                    
                    NodeList elements13 = serviceResourcesElement.getElementsByTagName("IsLocalDatabaseReplicationTarget");
                    Element isLocalDatabaseReplicationTargetElement = elements13.getLength() > 0 ? ((Element) elements13.item(0)) : null;
                    if (isLocalDatabaseReplicationTargetElement != null)
                    {
                        boolean isLocalDatabaseReplicationTargetInstance;
                        isLocalDatabaseReplicationTargetInstance = Boolean.parseBoolean(isLocalDatabaseReplicationTargetElement.getTextContent());
                        serviceResourceInstance.setIsLocalDatabaseReplicationTarget(isLocalDatabaseReplicationTargetInstance);
                    }
                    
                    NodeList elements14 = serviceResourcesElement.getElementsByTagName("IsInterlinkConnected");
                    Element isInterlinkConnectedElement = elements14.getLength() > 0 ? ((Element) elements14.item(0)) : null;
                    if (isInterlinkConnectedElement != null)
                    {
                        boolean isInterlinkConnectedInstance;
                        isInterlinkConnectedInstance = Boolean.parseBoolean(isInterlinkConnectedElement.getTextContent());
                        serviceResourceInstance.setIsInterlinkConnected(isInterlinkConnectedInstance);
                    }
                    
                    NodeList elements15 = serviceResourcesElement.getElementsByTagName("TextStartDate");
                    Element textStartDateElement = elements15.getLength() > 0 ? ((Element) elements15.item(0)) : null;
                    if (textStartDateElement != null)
                    {
                    }
                    
                    NodeList elements16 = serviceResourcesElement.getElementsByTagName("TextModifyDate");
                    Element textModifyDateElement = elements16.getLength() > 0 ? ((Element) elements16.item(0)) : null;
                    if (textModifyDateElement != null)
                    {
                    }
                    
                    NodeList elements17 = serviceResourcesElement.getElementsByTagName("PercentComplete");
                    Element percentCompleteElement = elements17.getLength() > 0 ? ((Element) elements17.item(0)) : null;
                    if (percentCompleteElement != null && (percentCompleteElement.getTextContent() != null && percentCompleteElement.getTextContent().isEmpty() != true) == false)
                    {
                        float percentCompleteInstance;
                        percentCompleteInstance = Float.parseFloat(percentCompleteElement.getTextContent());
                        serviceResourceInstance.setPercentComplete(percentCompleteInstance);
                    }
                    
                    NodeList elements18 = serviceResourcesElement.getElementsByTagName("IsForcedTerminate");
                    Element isForcedTerminateElement = elements18.getLength() > 0 ? ((Element) elements18.item(0)) : null;
                    if (isForcedTerminateElement != null && (isForcedTerminateElement.getTextContent() != null && isForcedTerminateElement.getTextContent().isEmpty() != true) == false)
                    {
                        boolean isForcedTerminateInstance;
                        isForcedTerminateInstance = Boolean.parseBoolean(isForcedTerminateElement.getTextContent());
                        serviceResourceInstance.setIsForcedTerminate(isForcedTerminateInstance);
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * The Update Database Copy operation updates a SQL Server database copy.
    *
    * @param serverName The name of the source or destination SQL Server
    * instance
    * @param databaseName The name of the database
    * @param databaseCopyName The unique identifier for the database copy to
    * update
    * @param parameters Additional parameters for the update database copy
    * operation
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<DatabaseCopyResponse> updateAsync(final String serverName, final String databaseName, final String databaseCopyName, final DatabaseCopyUpdateParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<DatabaseCopyResponse>() { 
            @Override
            public DatabaseCopyResponse call() throws Exception
            {
                return update(serverName, databaseName, databaseCopyName, parameters);
            }
         });
    }
    
    /**
    * The Update Database Copy operation updates a SQL Server database copy.
    *
    * @param serverName The name of the source or destination SQL Server
    * instance
    * @param databaseName The name of the database
    * @param databaseCopyName The unique identifier for the database copy to
    * update
    * @param parameters Additional parameters for the update database copy
    * operation
    * @throws ParserConfigurationException Thrown if there was an error
    * configuring the parser for the response body.
    * @throws SAXException Thrown if there was an error parsing the response
    * body.
    * @throws TransformerException Thrown if there was an error creating the
    * DOM transformer.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public DatabaseCopyResponse update(String serverName, String databaseName, String databaseCopyName, DatabaseCopyUpdateParameters parameters) throws ParserConfigurationException, SAXException, TransformerException, IOException, ServiceException, ParseException
    {
        // Validate
        if (serverName == null)
        {
            throw new NullPointerException("serverName");
        }
        if (databaseName == null)
        {
            throw new NullPointerException("databaseName");
        }
        if (parameters == null)
        {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("databaseName", databaseName);
            tracingParameters.put("databaseCopyName", databaseCopyName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName + "/databasecopies/" + databaseCopyName;
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("x-ms-version", "2012-03-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element serviceResourceElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "ServiceResource");
        requestDoc.appendChild(serviceResourceElement);
        
        if (parameters.getPartnerServer() != null)
        {
            Element partnerServerElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "PartnerServer");
            partnerServerElement.appendChild(requestDoc.createTextNode(parameters.getPartnerServer()));
            serviceResourceElement.appendChild(partnerServerElement);
        }
        
        if (parameters.getPartnerDatabase() != null)
        {
            Element partnerDatabaseElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "PartnerDatabase");
            partnerDatabaseElement.appendChild(requestDoc.createTextNode(parameters.getPartnerDatabase()));
            serviceResourceElement.appendChild(partnerDatabaseElement);
        }
        
        if (parameters.getMaxLagInMinutes() != null)
        {
            Element maxLagInMinutesElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "MaxLagInMinutes");
            maxLagInMinutesElement.appendChild(requestDoc.createTextNode(Integer.toString(parameters.getMaxLagInMinutes())));
            serviceResourceElement.appendChild(maxLagInMinutesElement);
        }
        
        if (parameters.isContinuous() != null)
        {
            Element isContinuousElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "IsContinuous");
            isContinuousElement.appendChild(requestDoc.createTextNode(Boolean.toString(parameters.isContinuous()).toLowerCase()));
            serviceResourceElement.appendChild(isContinuousElement);
        }
        
        if (parameters.isForcedTerminate() != null)
        {
            Element isForcedTerminateElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "IsForcedTerminate");
            isForcedTerminateElement.appendChild(requestDoc.createTextNode(Boolean.toString(parameters.isForcedTerminate()).toLowerCase()));
            serviceResourceElement.appendChild(isForcedTerminateElement);
        }
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK)
            {
                ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DatabaseCopyResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new DatabaseCopyResponse();
            DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder2 = documentBuilderFactory2.newDocumentBuilder();
            Document responseDoc = documentBuilder2.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagName("ServiceResource");
            Element serviceResourceElement2 = elements.getLength() > 0 ? ((Element) elements.item(0)) : null;
            if (serviceResourceElement2 != null)
            {
                NodeList elements2 = serviceResourceElement2.getElementsByTagName("Name");
                Element nameElement = elements2.getLength() > 0 ? ((Element) elements2.item(0)) : null;
                if (nameElement != null)
                {
                    String nameInstance;
                    nameInstance = nameElement.getTextContent();
                    result.setName(nameInstance);
                }
                
                NodeList elements3 = serviceResourceElement2.getElementsByTagName("State");
                Element stateElement = elements3.getLength() > 0 ? ((Element) elements3.item(0)) : null;
                if (stateElement != null)
                {
                    String stateInstance;
                    stateInstance = stateElement.getTextContent();
                    result.setState(stateInstance);
                }
                
                NodeList elements4 = serviceResourceElement2.getElementsByTagName("SourceServerName");
                Element sourceServerNameElement = elements4.getLength() > 0 ? ((Element) elements4.item(0)) : null;
                if (sourceServerNameElement != null)
                {
                    String sourceServerNameInstance;
                    sourceServerNameInstance = sourceServerNameElement.getTextContent();
                    result.setSourceServerName(sourceServerNameInstance);
                }
                
                NodeList elements5 = serviceResourceElement2.getElementsByTagName("SourceDatabaseName");
                Element sourceDatabaseNameElement = elements5.getLength() > 0 ? ((Element) elements5.item(0)) : null;
                if (sourceDatabaseNameElement != null)
                {
                    String sourceDatabaseNameInstance;
                    sourceDatabaseNameInstance = sourceDatabaseNameElement.getTextContent();
                    result.setSourceDatabaseName(sourceDatabaseNameInstance);
                }
                
                NodeList elements6 = serviceResourceElement2.getElementsByTagName("DestinationServerName");
                Element destinationServerNameElement = elements6.getLength() > 0 ? ((Element) elements6.item(0)) : null;
                if (destinationServerNameElement != null)
                {
                    String destinationServerNameInstance;
                    destinationServerNameInstance = destinationServerNameElement.getTextContent();
                    result.setDestinationServerName(destinationServerNameInstance);
                }
                
                NodeList elements7 = serviceResourceElement2.getElementsByTagName("DestinationDatabaseName");
                Element destinationDatabaseNameElement = elements7.getLength() > 0 ? ((Element) elements7.item(0)) : null;
                if (destinationDatabaseNameElement != null)
                {
                    String destinationDatabaseNameInstance;
                    destinationDatabaseNameInstance = destinationDatabaseNameElement.getTextContent();
                    result.setDestinationDatabaseName(destinationDatabaseNameInstance);
                }
                
                NodeList elements8 = serviceResourceElement2.getElementsByTagName("MaxLagInMinutes");
                Element maxLagInMinutesElement2 = elements8.getLength() > 0 ? ((Element) elements8.item(0)) : null;
                if (maxLagInMinutesElement2 != null && (maxLagInMinutesElement2.getTextContent() != null && maxLagInMinutesElement2.getTextContent().isEmpty() != true) == false)
                {
                    int maxLagInMinutesInstance;
                    maxLagInMinutesInstance = Integer.parseInt(maxLagInMinutesElement2.getTextContent());
                    result.setMaxLagInMinutes(maxLagInMinutesInstance);
                }
                
                NodeList elements9 = serviceResourceElement2.getElementsByTagName("IsContinuous");
                Element isContinuousElement2 = elements9.getLength() > 0 ? ((Element) elements9.item(0)) : null;
                if (isContinuousElement2 != null)
                {
                    boolean isContinuousInstance;
                    isContinuousInstance = Boolean.parseBoolean(isContinuousElement2.getTextContent());
                    result.setIsContinuous(isContinuousInstance);
                }
                
                NodeList elements10 = serviceResourceElement2.getElementsByTagName("ReplicationState");
                Element replicationStateElement = elements10.getLength() > 0 ? ((Element) elements10.item(0)) : null;
                if (replicationStateElement != null)
                {
                    byte replicationStateInstance;
                    replicationStateInstance = Byte.valueOf(replicationStateElement.getTextContent());
                    result.setReplicationState(replicationStateInstance);
                }
                
                NodeList elements11 = serviceResourceElement2.getElementsByTagName("ReplicationStateDescription");
                Element replicationStateDescriptionElement = elements11.getLength() > 0 ? ((Element) elements11.item(0)) : null;
                if (replicationStateDescriptionElement != null)
                {
                    String replicationStateDescriptionInstance;
                    replicationStateDescriptionInstance = replicationStateDescriptionElement.getTextContent();
                    result.setReplicationStateDescription(replicationStateDescriptionInstance);
                }
                
                NodeList elements12 = serviceResourceElement2.getElementsByTagName("LocalDatabaseId");
                Element localDatabaseIdElement = elements12.getLength() > 0 ? ((Element) elements12.item(0)) : null;
                if (localDatabaseIdElement != null)
                {
                    int localDatabaseIdInstance;
                    localDatabaseIdInstance = Integer.parseInt(localDatabaseIdElement.getTextContent());
                    result.setLocalDatabaseId(localDatabaseIdInstance);
                }
                
                NodeList elements13 = serviceResourceElement2.getElementsByTagName("IsLocalDatabaseReplicationTarget");
                Element isLocalDatabaseReplicationTargetElement = elements13.getLength() > 0 ? ((Element) elements13.item(0)) : null;
                if (isLocalDatabaseReplicationTargetElement != null)
                {
                    boolean isLocalDatabaseReplicationTargetInstance;
                    isLocalDatabaseReplicationTargetInstance = Boolean.parseBoolean(isLocalDatabaseReplicationTargetElement.getTextContent());
                    result.setIsLocalDatabaseReplicationTarget(isLocalDatabaseReplicationTargetInstance);
                }
                
                NodeList elements14 = serviceResourceElement2.getElementsByTagName("IsInterlinkConnected");
                Element isInterlinkConnectedElement = elements14.getLength() > 0 ? ((Element) elements14.item(0)) : null;
                if (isInterlinkConnectedElement != null)
                {
                    boolean isInterlinkConnectedInstance;
                    isInterlinkConnectedInstance = Boolean.parseBoolean(isInterlinkConnectedElement.getTextContent());
                    result.setIsInterlinkConnected(isInterlinkConnectedInstance);
                }
                
                NodeList elements15 = serviceResourceElement2.getElementsByTagName("TextStartDate");
                Element textStartDateElement = elements15.getLength() > 0 ? ((Element) elements15.item(0)) : null;
                if (textStartDateElement != null)
                {
                }
                
                NodeList elements16 = serviceResourceElement2.getElementsByTagName("TextModifyDate");
                Element textModifyDateElement = elements16.getLength() > 0 ? ((Element) elements16.item(0)) : null;
                if (textModifyDateElement != null)
                {
                }
                
                NodeList elements17 = serviceResourceElement2.getElementsByTagName("PercentComplete");
                Element percentCompleteElement = elements17.getLength() > 0 ? ((Element) elements17.item(0)) : null;
                if (percentCompleteElement != null && (percentCompleteElement.getTextContent() != null && percentCompleteElement.getTextContent().isEmpty() != true) == false)
                {
                    float percentCompleteInstance;
                    percentCompleteInstance = Float.parseFloat(percentCompleteElement.getTextContent());
                    result.setPercentComplete(percentCompleteInstance);
                }
                
                NodeList elements18 = serviceResourceElement2.getElementsByTagName("IsForcedTerminate");
                Element isForcedTerminateElement2 = elements18.getLength() > 0 ? ((Element) elements18.item(0)) : null;
                if (isForcedTerminateElement2 != null && (isForcedTerminateElement2.getTextContent() != null && isForcedTerminateElement2.getTextContent().isEmpty() != true) == false)
                {
                    boolean isForcedTerminateInstance;
                    isForcedTerminateInstance = Boolean.parseBoolean(isForcedTerminateElement2.getTextContent());
                    result.setIsForcedTerminate(isForcedTerminateInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
}
