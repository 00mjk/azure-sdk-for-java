// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.sql;

import com.microsoft.windowsazure.management.OperationResponse;
import com.microsoft.windowsazure.management.sql.models.ServerChangeAdministratorPasswordParameters;
import com.microsoft.windowsazure.management.sql.models.ServerCreateParameters;
import com.microsoft.windowsazure.management.sql.models.ServerCreateResponse;
import com.microsoft.windowsazure.management.sql.models.ServerListResponse;
import com.microsoft.windowsazure.services.core.ServiceException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.concurrent.Future;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import org.xml.sax.SAXException;

/**
* The SQL Database Management API includes operations for managing SQL Database
* servers for a subscription.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/gg715271.aspx for more
* information)
*/
public interface ServerOperations
{
    /**
    * The Set Server Administrator Password operation sets the administrative
    * password of a SQL Database server for a subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715272.aspx for
    * more information)
    *
    * @param serverName The server that will have the change made to the
    * administrative user
    * @param parameters Parameters for the Manage Administrator Password
    * operation
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse changeAdministratorPassword(String serverName, ServerChangeAdministratorPasswordParameters parameters) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException;
    
    /**
    * The Set Server Administrator Password operation sets the administrative
    * password of a SQL Database server for a subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715272.aspx for
    * more information)
    *
    * @param serverName The server that will have the change made to the
    * administrative user
    * @param parameters Parameters for the Manage Administrator Password
    * operation
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> changeAdministratorPasswordAsync(String serverName, ServerChangeAdministratorPasswordParameters parameters);
    
    /**
    * The Create Server operation adds a new SQL Database server to a
    * subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715274.aspx for
    * more information)
    *
    * @param parameters Parameters supplied to the Create Server operation.
    * @return The response returned from the Create Server operation
    */
    ServerCreateResponse create(ServerCreateParameters parameters) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException, ParseException;
    
    /**
    * The Create Server operation adds a new SQL Database server to a
    * subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715274.aspx for
    * more information)
    *
    * @param parameters Parameters supplied to the Create Server operation.
    * @return The response returned from the Create Server operation
    */
    Future<ServerCreateResponse> createAsync(ServerCreateParameters parameters);
    
    /**
    * The Drop Server operation drops a SQL Database server from a
    * subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx for
    * more information)
    *
    * @param serverName The name of the server to be deleted
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse delete(String serverName) throws IOException, ServiceException;
    
    /**
    * The Drop Server operation drops a SQL Database server from a
    * subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx for
    * more information)
    *
    * @param serverName The name of the server to be deleted
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> deleteAsync(String serverName);
    
    /**
    * The Get Servers operation enumerates SQL Database servers that are
    * provisioned for a subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715269.aspx for
    * more information)
    *
    * @return The response structure for the Server List operation
    */
    ServerListResponse list() throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException;
    
    /**
    * The Get Servers operation enumerates SQL Database servers that are
    * provisioned for a subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715269.aspx for
    * more information)
    *
    * @return The response structure for the Server List operation
    */
    Future<ServerListResponse> listAsync();
}
