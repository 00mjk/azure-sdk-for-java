/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.sql.models;

import com.microsoft.windowsazure.core.OperationResponse;

/**
* A standard service response including an HTTP status code and request ID.
*/
public class DatabaseCopyResponse extends OperationResponse
{
    private String destinationDatabaseName;
    
    /**
    * The name of the destination database.
    */
    public String getDestinationDatabaseName()
    {
        return this.destinationDatabaseName;
    }
    
    /**
    * The name of the destination database.
    */
    public void setDestinationDatabaseName(String destinationDatabaseName)
    {
        this.destinationDatabaseName = destinationDatabaseName;
    }
    
    private String destinationServerName;
    
    /**
    * The name of the destination server.
    */
    public String getDestinationServerName()
    {
        return this.destinationServerName;
    }
    
    /**
    * The name of the destination server.
    */
    public void setDestinationServerName(String destinationServerName)
    {
        this.destinationServerName = destinationServerName;
    }
    
    private boolean isContinuous;
    
    /**
    * Whether the copy is continous.
    */
    public boolean isContinuous()
    {
        return this.isContinuous;
    }
    
    /**
    * Whether the copy is continous.
    */
    public void setIsContinuous(boolean isContinuous)
    {
        this.isContinuous = isContinuous;
    }
    
    private Boolean isForcedTerminate;
    
    /**
    * Whether database copy termination will be forced.
    */
    public Boolean isForcedTerminate()
    {
        return this.isForcedTerminate;
    }
    
    /**
    * Whether database copy termination will be forced.
    */
    public void setIsForcedTerminate(Boolean isForcedTerminate)
    {
        this.isForcedTerminate = isForcedTerminate;
    }
    
    private boolean isInterlinkConnected;
    
    /**
    * Whether the database copy is interlink connected.
    */
    public boolean isInterlinkConnected()
    {
        return this.isInterlinkConnected;
    }
    
    /**
    * Whether the database copy is interlink connected.
    */
    public void setIsInterlinkConnected(boolean isInterlinkConnected)
    {
        this.isInterlinkConnected = isInterlinkConnected;
    }
    
    private boolean isLocalDatabaseReplicationTarget;
    
    /**
    * Whether the local database is a replication target.
    */
    public boolean isLocalDatabaseReplicationTarget()
    {
        return this.isLocalDatabaseReplicationTarget;
    }
    
    /**
    * Whether the local database is a replication target.
    */
    public void setIsLocalDatabaseReplicationTarget(boolean isLocalDatabaseReplicationTarget)
    {
        this.isLocalDatabaseReplicationTarget = isLocalDatabaseReplicationTarget;
    }
    
    private int localDatabaseId;
    
    /**
    * The ID of the local database.
    */
    public int getLocalDatabaseId()
    {
        return this.localDatabaseId;
    }
    
    /**
    * The ID of the local database.
    */
    public void setLocalDatabaseId(int localDatabaseId)
    {
        this.localDatabaseId = localDatabaseId;
    }
    
    private Integer maxLagInMinutes;
    
    /**
    * The RPO for the copy.
    */
    public Integer getMaxLagInMinutes()
    {
        return this.maxLagInMinutes;
    }
    
    /**
    * The RPO for the copy.
    */
    public void setMaxLagInMinutes(Integer maxLagInMinutes)
    {
        this.maxLagInMinutes = maxLagInMinutes;
    }
    
    private String name;
    
    /**
    * A unique identifier for the database copy.
    */
    public String getName()
    {
        return this.name;
    }
    
    /**
    * A unique identifier for the database copy.
    */
    public void setName(String name)
    {
        this.name = name;
    }
    
    private Float percentComplete;
    
    /**
    * Progress towards copy completion.
    */
    public Float getPercentComplete()
    {
        return this.percentComplete;
    }
    
    /**
    * Progress towards copy completion.
    */
    public void setPercentComplete(Float percentComplete)
    {
        this.percentComplete = percentComplete;
    }
    
    private byte replicationState;
    
    /**
    * A value indicating the replication state for the database.
    */
    public byte getReplicationState()
    {
        return this.replicationState;
    }
    
    /**
    * A value indicating the replication state for the database.
    */
    public void setReplicationState(byte replicationState)
    {
        this.replicationState = replicationState;
    }
    
    private String replicationStateDescription;
    
    /**
    * A description of the replication state for the database.
    */
    public String getReplicationStateDescription()
    {
        return this.replicationStateDescription;
    }
    
    /**
    * A description of the replication state for the database.
    */
    public void setReplicationStateDescription(String replicationStateDescription)
    {
        this.replicationStateDescription = replicationStateDescription;
    }
    
    private String sourceDatabaseName;
    
    /**
    * The name of the source database.
    */
    public String getSourceDatabaseName()
    {
        return this.sourceDatabaseName;
    }
    
    /**
    * The name of the source database.
    */
    public void setSourceDatabaseName(String sourceDatabaseName)
    {
        this.sourceDatabaseName = sourceDatabaseName;
    }
    
    private String sourceServerName;
    
    /**
    * The name of the source server.
    */
    public String getSourceServerName()
    {
        return this.sourceServerName;
    }
    
    /**
    * The name of the source server.
    */
    public void setSourceServerName(String sourceServerName)
    {
        this.sourceServerName = sourceServerName;
    }
    
    private String state;
    
    /**
    * The state of the database copy.
    */
    public String getState()
    {
        return this.state;
    }
    
    /**
    * The state of the database copy.
    */
    public void setState(String state)
    {
        this.state = state;
    }
    
    private String textModifyDate;
    
    /**
    * The UTC date when the database copy became transactionally consistent.
    */
    public String getTextModifyDate()
    {
        return this.textModifyDate;
    }
    
    /**
    * The UTC date when the database copy became transactionally consistent.
    */
    public void setTextModifyDate(String textModifyDate)
    {
        this.textModifyDate = textModifyDate;
    }
    
    private String textStartDate;
    
    /**
    * The UTC date when the database copy was initiated.
    */
    public String getTextStartDate()
    {
        return this.textStartDate;
    }
    
    /**
    * The UTC date when the database copy was initiated.
    */
    public void setTextStartDate(String textStartDate)
    {
        this.textStartDate = textStartDate;
    }
}
