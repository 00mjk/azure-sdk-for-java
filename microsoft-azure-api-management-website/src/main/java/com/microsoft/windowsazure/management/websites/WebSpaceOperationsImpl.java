// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.websites;

import com.microsoft.windowsazure.management.websites.models.WebSite;
import com.microsoft.windowsazure.management.websites.models.WebSiteComputeMode;
import com.microsoft.windowsazure.management.websites.models.WebSiteListParameters;
import com.microsoft.windowsazure.management.websites.models.WebSiteMode;
import com.microsoft.windowsazure.management.websites.models.WebSiteRuntimeAvailabilityState;
import com.microsoft.windowsazure.management.websites.models.WebSiteSslState;
import com.microsoft.windowsazure.management.websites.models.WebSiteState;
import com.microsoft.windowsazure.management.websites.models.WebSiteUsageState;
import com.microsoft.windowsazure.management.websites.models.WebSpaceAvailabilityState;
import com.microsoft.windowsazure.management.websites.models.WebSpaceStatus;
import com.microsoft.windowsazure.management.websites.models.WebSpaceWorkerSize;
import com.microsoft.windowsazure.management.websites.models.WebSpacesCreatePublishingUserParameters;
import com.microsoft.windowsazure.management.websites.models.WebSpacesCreatePublishingUserResponse;
import com.microsoft.windowsazure.management.websites.models.WebSpacesGetDnsSuffixResponse;
import com.microsoft.windowsazure.management.websites.models.WebSpacesGetResponse;
import com.microsoft.windowsazure.management.websites.models.WebSpacesListGeoRegionsResponse;
import com.microsoft.windowsazure.management.websites.models.WebSpacesListPublishingUsersResponse;
import com.microsoft.windowsazure.management.websites.models.WebSpacesListResponse;
import com.microsoft.windowsazure.management.websites.models.WebSpacesListWebSitesResponse;
import com.microsoft.windowsazure.services.core.ServiceException;
import com.microsoft.windowsazure.services.core.ServiceOperations;
import com.microsoft.windowsazure.services.core.utils.CommaStringBuilder;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.commons.codec.binary.Base64;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
* Operations for managing web spaces beneath your subscription.
*/
public class WebSpaceOperationsImpl implements ServiceOperations<WebSiteManagementClientImpl>, WebSpaceOperations
{
    /**
    * Initializes a new instance of the WebSpaceOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    WebSpaceOperationsImpl(WebSiteManagementClientImpl client)
    {
        this.client = client;
    }
    
    private WebSiteManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.websites.WebSiteManagementClientImpl.
    */
    public WebSiteManagementClientImpl getClient() { return this.client; }
    
    /**
    * Creates a source control user allowed to publish to this web space.
    *
    * @param username The user name.
    * @param password The user password.
    * @param parameters Parameters supplied to the Create Publishing User
    * operation.
    * @return The Create Publishing User operation response.
    */
    @Override
    public Future<WebSpacesCreatePublishingUserResponse> createPublishingUserAsync(final String username, final String password, final WebSpacesCreatePublishingUserParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<WebSpacesCreatePublishingUserResponse>() { @Override
        public WebSpacesCreatePublishingUserResponse call() throws Exception
        {
            return createPublishingUser(username, password, parameters);
        }
         });
    }
    
    /**
    * Creates a source control user allowed to publish to this web space.
    *
    * @param username The user name.
    * @param password The user password.
    * @param parameters Parameters supplied to the Create Publishing User
    * operation.
    * @return The Create Publishing User operation response.
    */
    @Override
    public WebSpacesCreatePublishingUserResponse createPublishingUser(String username, String password, WebSpacesCreatePublishingUserParameters parameters) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException
    {
        // Validate
        if (username == null)
        {
            throw new NullPointerException("username");
        }
        if (password == null)
        {
            throw new NullPointerException("password");
        }
        if (parameters != null)
        {
            if (parameters.getPublishingPassword() == null)
            {
                throw new NullPointerException("parameters.PublishingPassword");
            }
            if (parameters.getPublishingUserName() == null)
            {
                throw new NullPointerException("parameters.PublishingUserName");
            }
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/WebSpaces?properties=publishingCredentials";
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        if (parameters != null)
        {
            Element userElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "User");
            requestDoc.appendChild(userElement);
            
            if (parameters.getName() != null)
            {
                Element nameElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Name");
                nameElement.appendChild(requestDoc.createTextNode(parameters.getName()));
                userElement.appendChild(nameElement);
            }
            
            Element publishingPasswordElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "PublishingPassword");
            publishingPasswordElement.appendChild(requestDoc.createTextNode(parameters.getPublishingPassword()));
            userElement.appendChild(publishingPasswordElement);
            
            Element publishingUserNameElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "PublishingUserName");
            publishingUserNameElement.appendChild(requestDoc.createTextNode(parameters.getPublishingUserName()));
            userElement.appendChild(publishingUserNameElement);
        }
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 201)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        WebSpacesCreatePublishingUserResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new WebSpacesCreatePublishingUserResponse();
        DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder2 = documentBuilderFactory2.newDocumentBuilder();
        Document responseDoc = documentBuilder2.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("User");
        Element userElement2 = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (userElement2 != null)
        {
            NodeList elements2 = userElement2.getElementsByTagName("Name");
            Element nameElement2 = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (nameElement2 != null)
            {
                String nameInstance;
                nameInstance = nameElement2.getTextContent();
                result.setName(nameInstance);
            }
            
            NodeList elements3 = userElement2.getElementsByTagName("PublishingPassword");
            Element publishingPasswordElement2 = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
            if (publishingPasswordElement2 != null)
            {
                String publishingPasswordInstance;
                publishingPasswordInstance = publishingPasswordElement2.getTextContent();
                result.setPublishingPassword(publishingPasswordInstance);
            }
            
            NodeList elements4 = userElement2.getElementsByTagName("PublishingUserName");
            Element publishingUserNameElement2 = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
            if (publishingUserNameElement2 != null)
            {
                String publishingUserNameInstance;
                publishingUserNameInstance = publishingUserNameElement2.getTextContent();
                result.setPublishingUserName(publishingUserNameInstance);
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * You can retrieve details for a specified webspace name by issuing an HTTP
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn167017.aspx for
    * more information)
    *
    * @param webSpaceName The name of the web space.
    * @return The Get Web Space Details operation response.
    */
    @Override
    public Future<WebSpacesGetResponse> getAsync(final String webSpaceName)
    {
        return this.getClient().getExecutorService().submit(new Callable<WebSpacesGetResponse>() { @Override
        public WebSpacesGetResponse call() throws Exception
        {
            return get(webSpaceName);
        }
         });
    }
    
    /**
    * You can retrieve details for a specified webspace name by issuing an HTTP
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn167017.aspx for
    * more information)
    *
    * @param webSpaceName The name of the web space.
    * @return The Get Web Space Details operation response.
    */
    @Override
    public WebSpacesGetResponse get(String webSpaceName) throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException, URISyntaxException
    {
        // Validate
        if (webSpaceName == null)
        {
            throw new NullPointerException("webSpaceName");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/WebSpaces/" + webSpaceName;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        WebSpacesGetResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new WebSpacesGetResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("WebSpaces");
        Element webSpacesElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (webSpacesElement != null)
        {
            NodeList elements2 = webSpacesElement.getElementsByTagName("AvailabilityState");
            Element availabilityStateElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (availabilityStateElement != null)
            {
                WebSpaceAvailabilityState availabilityStateInstance;
                availabilityStateInstance = WebSpaceAvailabilityState.valueOf(availabilityStateElement.getTextContent());
                result.setAvailabilityState(availabilityStateInstance);
            }
            
            NodeList elements3 = webSpacesElement.getElementsByTagName("CurrentNumberOfWorkers");
            Element currentNumberOfWorkersElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
            if (currentNumberOfWorkersElement != null && (currentNumberOfWorkersElement.getTextContent() != null && currentNumberOfWorkersElement.getTextContent().isEmpty() != true) == false)
            {
                boolean isNil = false;
                String nilAttribute = currentNumberOfWorkersElement.getAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "nil");
                if (nilAttribute != null)
                {
                    isNil = nilAttribute == "true";
                }
                if (isNil == false)
                {
                    int currentNumberOfWorkersInstance;
                    currentNumberOfWorkersInstance = Integer.parseInt(currentNumberOfWorkersElement.getTextContent());
                    result.setCurrentNumberOfWorkers(currentNumberOfWorkersInstance);
                }
            }
            
            NodeList elements4 = webSpacesElement.getElementsByTagName("CurrentWorkerSize");
            Element currentWorkerSizeElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
            if (currentWorkerSizeElement != null && (currentWorkerSizeElement.getTextContent() != null && currentWorkerSizeElement.getTextContent().isEmpty() != true) == false)
            {
                boolean isNil2 = false;
                String nilAttribute2 = currentWorkerSizeElement.getAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "nil");
                if (nilAttribute2 != null)
                {
                    isNil2 = nilAttribute2 == "true";
                }
                if (isNil2 == false)
                {
                    WebSpaceWorkerSize currentWorkerSizeInstance;
                    currentWorkerSizeInstance = WebSpaceWorkerSize.valueOf(currentWorkerSizeElement.getTextContent());
                    result.setCurrentWorkerSize(currentWorkerSizeInstance);
                }
            }
            
            NodeList elements5 = webSpacesElement.getElementsByTagName("GeoLocation");
            Element geoLocationElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
            if (geoLocationElement != null)
            {
                String geoLocationInstance;
                geoLocationInstance = geoLocationElement.getTextContent();
                result.setGeoLocation(geoLocationInstance);
            }
            
            NodeList elements6 = webSpacesElement.getElementsByTagName("GeoRegion");
            Element geoRegionElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
            if (geoRegionElement != null)
            {
                String geoRegionInstance;
                geoRegionInstance = geoRegionElement.getTextContent();
                result.setGeoRegion(geoRegionInstance);
            }
            
            NodeList elements7 = webSpacesElement.getElementsByTagName("Name");
            Element nameElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
            if (nameElement != null)
            {
                String nameInstance;
                nameInstance = nameElement.getTextContent();
                result.setName(nameInstance);
            }
            
            NodeList elements8 = webSpacesElement.getElementsByTagName("Plan");
            Element planElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
            if (planElement != null)
            {
                String planInstance;
                planInstance = planElement.getTextContent();
                result.setPlan(planInstance);
            }
            
            NodeList elements9 = webSpacesElement.getElementsByTagName("Status");
            Element statusElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
            if (statusElement != null)
            {
                WebSpaceStatus statusInstance;
                statusInstance = WebSpaceStatus.valueOf(statusElement.getTextContent());
                result.setStatus(statusInstance);
            }
            
            NodeList elements10 = webSpacesElement.getElementsByTagName("Subscription");
            Element subscriptionElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
            if (subscriptionElement != null)
            {
                String subscriptionInstance;
                subscriptionInstance = subscriptionElement.getTextContent();
                result.setSubscription(subscriptionInstance);
            }
            
            NodeList elements11 = webSpacesElement.getElementsByTagName("WorkerSize");
            Element workerSizeElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
            if (workerSizeElement != null && (workerSizeElement.getTextContent() != null && workerSizeElement.getTextContent().isEmpty() != true) == false)
            {
                WebSpaceWorkerSize workerSizeInstance;
                workerSizeInstance = WebSpaceWorkerSize.valueOf(workerSizeElement.getTextContent());
                result.setWorkerSize(workerSizeInstance);
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * Get the dns suffix for this subscription.
    *
    * @return The Get DNS Suffix operation response.
    */
    @Override
    public Future<WebSpacesGetDnsSuffixResponse> getDnsSuffixAsync()
    {
        return this.getClient().getExecutorService().submit(new Callable<WebSpacesGetDnsSuffixResponse>() { @Override
        public WebSpacesGetDnsSuffixResponse call() throws Exception
        {
            return getDnsSuffix();
        }
         });
    }
    
    /**
    * Get the dns suffix for this subscription.
    *
    * @return The Get DNS Suffix operation response.
    */
    @Override
    public WebSpacesGetDnsSuffixResponse getDnsSuffix() throws IOException, ServiceException, ParserConfigurationException, SAXException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/WebSpaces?properties=dnssuffix";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        WebSpacesGetDnsSuffixResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new WebSpacesGetDnsSuffixResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://schemas.microsoft.com/2003/10/Serialization/", "string");
        Element stringElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (stringElement != null)
        {
            result.setDnsSuffix(stringElement.getTextContent());
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * You can list the webspaces under the current subscription by issuing a
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166961.aspx for
    * more information)
    *
    * @return The List Web Spaces operation response.
    */
    @Override
    public Future<WebSpacesListResponse> listAsync()
    {
        return this.getClient().getExecutorService().submit(new Callable<WebSpacesListResponse>() { @Override
        public WebSpacesListResponse call() throws Exception
        {
            return list();
        }
         });
    }
    
    /**
    * You can list the webspaces under the current subscription by issuing a
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166961.aspx for
    * more information)
    *
    * @return The List Web Spaces operation response.
    */
    @Override
    public WebSpacesListResponse list() throws IOException, ServiceException, ParserConfigurationException, SAXException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/WebSpaces";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        WebSpacesListResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new WebSpacesListResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("WebSpaces");
        Element webSpacesSequenceElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (webSpacesSequenceElement != null)
        {
            for (int i1 = 0; i1 < webSpacesSequenceElement.getElementsByTagName("WebSpace").getLength(); i1 = i1 + 1)
            {
                org.w3c.dom.Element webSpacesElement = ((org.w3c.dom.Element)webSpacesSequenceElement.getElementsByTagName("WebSpace").item(i1));
                WebSpacesListResponse.WebSpace webSpaceInstance = new WebSpacesListResponse.WebSpace();
                result.getWebSpaces().add(webSpaceInstance);
                
                NodeList elements2 = webSpacesElement.getElementsByTagName("AvailabilityState");
                Element availabilityStateElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
                if (availabilityStateElement != null)
                {
                    WebSpaceAvailabilityState availabilityStateInstance;
                    availabilityStateInstance = WebSpaceAvailabilityState.valueOf(availabilityStateElement.getTextContent());
                    webSpaceInstance.setAvailabilityState(availabilityStateInstance);
                }
                
                NodeList elements3 = webSpacesElement.getElementsByTagName("CurrentNumberOfWorkers");
                Element currentNumberOfWorkersElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                if (currentNumberOfWorkersElement != null && (currentNumberOfWorkersElement.getTextContent() != null && currentNumberOfWorkersElement.getTextContent().isEmpty() != true) == false)
                {
                    boolean isNil = false;
                    String nilAttribute = currentNumberOfWorkersElement.getAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if (nilAttribute != null)
                    {
                        isNil = nilAttribute == "true";
                    }
                    if (isNil == false)
                    {
                        int currentNumberOfWorkersInstance;
                        currentNumberOfWorkersInstance = Integer.parseInt(currentNumberOfWorkersElement.getTextContent());
                        webSpaceInstance.setCurrentNumberOfWorkers(currentNumberOfWorkersInstance);
                    }
                }
                
                NodeList elements4 = webSpacesElement.getElementsByTagName("CurrentWorkerSize");
                Element currentWorkerSizeElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                if (currentWorkerSizeElement != null && (currentWorkerSizeElement.getTextContent() != null && currentWorkerSizeElement.getTextContent().isEmpty() != true) == false)
                {
                    boolean isNil2 = false;
                    String nilAttribute2 = currentWorkerSizeElement.getAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if (nilAttribute2 != null)
                    {
                        isNil2 = nilAttribute2 == "true";
                    }
                    if (isNil2 == false)
                    {
                        WebSpaceWorkerSize currentWorkerSizeInstance;
                        currentWorkerSizeInstance = WebSpaceWorkerSize.valueOf(currentWorkerSizeElement.getTextContent());
                        webSpaceInstance.setCurrentWorkerSize(currentWorkerSizeInstance);
                    }
                }
                
                NodeList elements5 = webSpacesElement.getElementsByTagName("GeoLocation");
                Element geoLocationElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                if (geoLocationElement != null)
                {
                    String geoLocationInstance;
                    geoLocationInstance = geoLocationElement.getTextContent();
                    webSpaceInstance.setGeoLocation(geoLocationInstance);
                }
                
                NodeList elements6 = webSpacesElement.getElementsByTagName("GeoRegion");
                Element geoRegionElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                if (geoRegionElement != null)
                {
                    String geoRegionInstance;
                    geoRegionInstance = geoRegionElement.getTextContent();
                    webSpaceInstance.setGeoRegion(geoRegionInstance);
                }
                
                NodeList elements7 = webSpacesElement.getElementsByTagName("Name");
                Element nameElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                if (nameElement != null)
                {
                    String nameInstance;
                    nameInstance = nameElement.getTextContent();
                    webSpaceInstance.setName(nameInstance);
                }
                
                NodeList elements8 = webSpacesElement.getElementsByTagName("Plan");
                Element planElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                if (planElement != null)
                {
                    String planInstance;
                    planInstance = planElement.getTextContent();
                    webSpaceInstance.setPlan(planInstance);
                }
                
                NodeList elements9 = webSpacesElement.getElementsByTagName("Status");
                Element statusElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
                if (statusElement != null)
                {
                    WebSpaceStatus statusInstance;
                    statusInstance = WebSpaceStatus.valueOf(statusElement.getTextContent());
                    webSpaceInstance.setStatus(statusInstance);
                }
                
                NodeList elements10 = webSpacesElement.getElementsByTagName("Subscription");
                Element subscriptionElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
                if (subscriptionElement != null)
                {
                    String subscriptionInstance;
                    subscriptionInstance = subscriptionElement.getTextContent();
                    webSpaceInstance.setSubscription(subscriptionInstance);
                }
                
                NodeList elements11 = webSpacesElement.getElementsByTagName("WorkerSize");
                Element workerSizeElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                if (workerSizeElement != null && (workerSizeElement.getTextContent() != null && workerSizeElement.getTextContent().isEmpty() != true) == false)
                {
                    WebSpaceWorkerSize workerSizeInstance;
                    workerSizeInstance = WebSpaceWorkerSize.valueOf(workerSizeElement.getTextContent());
                    webSpaceInstance.setWorkerSize(workerSizeInstance);
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * Get the available geo regions for this webspace.
    *
    * @return The Get DNS Suffix operation response.
    */
    @Override
    public Future<WebSpacesListGeoRegionsResponse> listGeoRegionsAsync()
    {
        return this.getClient().getExecutorService().submit(new Callable<WebSpacesListGeoRegionsResponse>() { @Override
        public WebSpacesListGeoRegionsResponse call() throws Exception
        {
            return listGeoRegions();
        }
         });
    }
    
    /**
    * Get the available geo regions for this webspace.
    *
    * @return The Get DNS Suffix operation response.
    */
    @Override
    public WebSpacesListGeoRegionsResponse listGeoRegions() throws IOException, ServiceException, ParserConfigurationException, SAXException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/WebSpaces?properties=georegions";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        WebSpacesListGeoRegionsResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new WebSpacesListGeoRegionsResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("GeoRegions");
        Element geoRegionsSequenceElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (geoRegionsSequenceElement != null)
        {
            for (int i1 = 0; i1 < geoRegionsSequenceElement.getElementsByTagName("GeoRegion").getLength(); i1 = i1 + 1)
            {
                org.w3c.dom.Element geoRegionsElement = ((org.w3c.dom.Element)geoRegionsSequenceElement.getElementsByTagName("GeoRegion").item(i1));
                WebSpacesListGeoRegionsResponse.GeoRegion geoRegionInstance = new WebSpacesListGeoRegionsResponse.GeoRegion();
                result.getGeoRegions().add(geoRegionInstance);
                
                NodeList elements2 = geoRegionsElement.getElementsByTagName("Description");
                Element descriptionElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
                if (descriptionElement != null)
                {
                    String descriptionInstance;
                    descriptionInstance = descriptionElement.getTextContent();
                    geoRegionInstance.setDescription(descriptionInstance);
                }
                
                NodeList elements3 = geoRegionsElement.getElementsByTagName("Name");
                Element nameElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                if (nameElement != null)
                {
                    String nameInstance;
                    nameInstance = nameElement.getTextContent();
                    geoRegionInstance.setName(nameInstance);
                }
                
                NodeList elements4 = geoRegionsElement.getElementsByTagName("SortOrder");
                Element sortOrderElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                if (sortOrderElement != null)
                {
                    boolean isNil = false;
                    String nilAttribute = sortOrderElement.getAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if (nilAttribute != null)
                    {
                        isNil = nilAttribute == "true";
                    }
                    if (isNil == false)
                    {
                        int sortOrderInstance;
                        sortOrderInstance = Integer.parseInt(sortOrderElement.getTextContent());
                        geoRegionInstance.setSortOrder(sortOrderInstance);
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * Get the source control users allowed to publish to this web space.
    *
    * @return The List Publishing Users operation response.
    */
    @Override
    public Future<WebSpacesListPublishingUsersResponse> listPublishingUsersAsync()
    {
        return this.getClient().getExecutorService().submit(new Callable<WebSpacesListPublishingUsersResponse>() { @Override
        public WebSpacesListPublishingUsersResponse call() throws Exception
        {
            return listPublishingUsers();
        }
         });
    }
    
    /**
    * Get the source control users allowed to publish to this web space.
    *
    * @return The List Publishing Users operation response.
    */
    @Override
    public WebSpacesListPublishingUsersResponse listPublishingUsers() throws IOException, ServiceException, ParserConfigurationException, SAXException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/WebSpaces?properties=publishingUsers";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        WebSpacesListPublishingUsersResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new WebSpacesListPublishingUsersResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "ArrayOfstring");
        Element arrayOfstringSequenceElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (arrayOfstringSequenceElement != null)
        {
            for (int i1 = 0; i1 < arrayOfstringSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string").getLength(); i1 = i1 + 1)
            {
                org.w3c.dom.Element arrayOfstringElement = ((org.w3c.dom.Element)arrayOfstringSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string").item(i1));
                WebSpacesListPublishingUsersResponse.User stringInstance = new WebSpacesListPublishingUsersResponse.User();
                result.getUsers().add(stringInstance);
                
                String stringInstance2;
                stringInstance2 = arrayOfstringElement.getTextContent();
                stringInstance.setName(stringInstance2);
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * You can retrieve a list of all web sites in a web space by issuing an
    * HTTP GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236429.aspx for
    * more information)
    *
    * @param webSpaceName The name of the web space.
    * @param parameters Additional parameters
    * @return The List Web Sites operation response.
    */
    @Override
    public Future<WebSpacesListWebSitesResponse> listWebSitesAsync(final String webSpaceName, final WebSiteListParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<WebSpacesListWebSitesResponse>() { @Override
        public WebSpacesListWebSitesResponse call() throws Exception
        {
            return listWebSites(webSpaceName, parameters);
        }
         });
    }
    
    /**
    * You can retrieve a list of all web sites in a web space by issuing an
    * HTTP GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236429.aspx for
    * more information)
    *
    * @param webSpaceName The name of the web space.
    * @param parameters Additional parameters
    * @return The List Web Sites operation response.
    */
    @Override
    public WebSpacesListWebSitesResponse listWebSites(String webSpaceName, WebSiteListParameters parameters) throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException, URISyntaxException
    {
        // Validate
        if (webSpaceName == null)
        {
            throw new NullPointerException("webSpaceName");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/WebSpaces/" + webSpaceName + "/sites?";
        if (parameters.getPropertiesToInclude() != null && parameters.getPropertiesToInclude().size() > 0)
        {
            url = url + "&propertiesToInclude=" + URLEncoder.encode(CommaStringBuilder.join(parameters.getPropertiesToInclude()));
        }
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        WebSpacesListWebSitesResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new WebSpacesListWebSitesResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("Sites");
        Element sitesSequenceElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (sitesSequenceElement != null)
        {
            for (int i1 = 0; i1 < sitesSequenceElement.getElementsByTagName("Site").getLength(); i1 = i1 + 1)
            {
                org.w3c.dom.Element sitesElement = ((org.w3c.dom.Element)sitesSequenceElement.getElementsByTagName("Site").item(i1));
                WebSite siteInstance = new WebSite();
                result.getWebSites().add(siteInstance);
                
                NodeList elements2 = sitesElement.getElementsByTagName("AdminEnabled");
                Element adminEnabledElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
                if (adminEnabledElement != null)
                {
                    boolean adminEnabledInstance;
                    adminEnabledInstance = Boolean.parseBoolean(adminEnabledElement.getTextContent());
                    siteInstance.setAdminEnabled(adminEnabledInstance);
                }
                
                NodeList elements3 = sitesElement.getElementsByTagName("AvailabilityState");
                Element availabilityStateElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                if (availabilityStateElement != null)
                {
                    WebSpaceAvailabilityState availabilityStateInstance;
                    availabilityStateInstance = WebSpaceAvailabilityState.valueOf(availabilityStateElement.getTextContent());
                    siteInstance.setAvailabilityState(availabilityStateInstance);
                }
                
                NodeList elements4 = sitesElement.getElementsByTagName("ComputeMode");
                Element computeModeElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                if (computeModeElement != null)
                {
                    WebSiteComputeMode computeModeInstance;
                    computeModeInstance = WebSiteComputeMode.valueOf(computeModeElement.getTextContent());
                    siteInstance.setComputeMode(computeModeInstance);
                }
                
                NodeList elements5 = sitesElement.getElementsByTagName("Enabled");
                Element enabledElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                if (enabledElement != null)
                {
                    boolean enabledInstance;
                    enabledInstance = Boolean.parseBoolean(enabledElement.getTextContent());
                    siteInstance.setEnabled(enabledInstance);
                }
                
                NodeList elements6 = sitesElement.getElementsByTagName("EnabledHostNames");
                Element enabledHostNamesSequenceElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                if (enabledHostNamesSequenceElement != null)
                {
                    for (int i2 = 0; i2 < enabledHostNamesSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string").getLength(); i2 = i2 + 1)
                    {
                        org.w3c.dom.Element enabledHostNamesElement = ((org.w3c.dom.Element)enabledHostNamesSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string").item(i2));
                        siteInstance.getEnabledHostNames().add(enabledHostNamesElement.getTextContent());
                    }
                }
                
                NodeList elements7 = sitesElement.getElementsByTagName("HostNameSslStates");
                Element hostNameSslStatesSequenceElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                if (hostNameSslStatesSequenceElement != null)
                {
                    for (int i3 = 0; i3 < hostNameSslStatesSequenceElement.getElementsByTagName("WebSiteHostNameSslState").getLength(); i3 = i3 + 1)
                    {
                        org.w3c.dom.Element hostNameSslStatesElement = ((org.w3c.dom.Element)hostNameSslStatesSequenceElement.getElementsByTagName("WebSiteHostNameSslState").item(i3));
                        WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                        siteInstance.getHostNameSslStates().add(webSiteHostNameSslStateInstance);
                        
                        NodeList elements8 = hostNameSslStatesElement.getElementsByTagName("Name");
                        Element nameElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                        if (nameElement != null)
                        {
                            String nameInstance;
                            nameInstance = nameElement.getTextContent();
                            webSiteHostNameSslStateInstance.setName(nameInstance);
                        }
                        
                        NodeList elements9 = hostNameSslStatesElement.getElementsByTagName("SslState");
                        Element sslStateElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
                        if (sslStateElement != null)
                        {
                            WebSiteSslState sslStateInstance;
                            sslStateInstance = WebSiteSslState.valueOf(sslStateElement.getTextContent());
                            webSiteHostNameSslStateInstance.setSslState(sslStateInstance);
                        }
                        
                        NodeList elements10 = hostNameSslStatesElement.getElementsByTagName("Thumbprint");
                        Element thumbprintElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
                        if (thumbprintElement != null)
                        {
                            boolean isNil = false;
                            String nilAttribute = thumbprintElement.getAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "nil");
                            if (nilAttribute != null)
                            {
                                isNil = nilAttribute == "true";
                            }
                            if (isNil == false)
                            {
                                String thumbprintInstance;
                                thumbprintInstance = thumbprintElement.getTextContent();
                                webSiteHostNameSslStateInstance.setThumbprint(thumbprintInstance);
                            }
                        }
                        
                        NodeList elements11 = hostNameSslStatesElement.getElementsByTagName("VirtualIP");
                        Element virtualIPElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                        if (virtualIPElement != null)
                        {
                            boolean isNil2 = false;
                            String nilAttribute2 = virtualIPElement.getAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "nil");
                            if (nilAttribute2 != null)
                            {
                                isNil2 = nilAttribute2 == "true";
                            }
                            if (isNil2 == false)
                            {
                                InetAddress virtualIPInstance;
                                virtualIPInstance = InetAddress.getByName(virtualIPElement.getTextContent());
                                webSiteHostNameSslStateInstance.setVirtualIP(virtualIPInstance);
                            }
                        }
                    }
                }
                
                NodeList elements12 = sitesElement.getElementsByTagName("HostNames");
                Element hostNamesSequenceElement = elements12.getLength() > 0 ? ((Element)elements12.item(0)) : null;
                if (hostNamesSequenceElement != null)
                {
                    for (int i4 = 0; i4 < hostNamesSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string").getLength(); i4 = i4 + 1)
                    {
                        org.w3c.dom.Element hostNamesElement = ((org.w3c.dom.Element)hostNamesSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string").item(i4));
                        siteInstance.getHostNames().add(hostNamesElement.getTextContent());
                    }
                }
                
                NodeList elements13 = sitesElement.getElementsByTagName("LastModifiedTimeUtc");
                Element lastModifiedTimeUtcElement = elements13.getLength() > 0 ? ((Element)elements13.item(0)) : null;
                if (lastModifiedTimeUtcElement != null)
                {
                    Calendar lastModifiedTimeUtcInstance;
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(simpleDateFormat.parse(lastModifiedTimeUtcElement.getTextContent()));
                    lastModifiedTimeUtcInstance = calendar;
                    siteInstance.setLastModifiedTimeUtc(lastModifiedTimeUtcInstance);
                }
                
                NodeList elements14 = sitesElement.getElementsByTagName("Name");
                Element nameElement2 = elements14.getLength() > 0 ? ((Element)elements14.item(0)) : null;
                if (nameElement2 != null)
                {
                    String nameInstance2;
                    nameInstance2 = nameElement2.getTextContent();
                    siteInstance.setName(nameInstance2);
                }
                
                NodeList elements15 = sitesElement.getElementsByTagName("Owner");
                Element ownerElement = elements15.getLength() > 0 ? ((Element)elements15.item(0)) : null;
                if (ownerElement != null)
                {
                    boolean isNil3 = false;
                    String nilAttribute3 = ownerElement.getAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if (nilAttribute3 != null)
                    {
                        isNil3 = nilAttribute3 == "true";
                    }
                    if (isNil3 == false)
                    {
                        String ownerInstance;
                        ownerInstance = ownerElement.getTextContent();
                        siteInstance.setOwner(ownerInstance);
                    }
                }
                
                NodeList elements16 = sitesElement.getElementsByTagName("RepositorySiteName");
                Element repositorySiteNameElement = elements16.getLength() > 0 ? ((Element)elements16.item(0)) : null;
                if (repositorySiteNameElement != null)
                {
                    String repositorySiteNameInstance;
                    repositorySiteNameInstance = repositorySiteNameElement.getTextContent();
                    siteInstance.setRepositorySiteName(repositorySiteNameInstance);
                }
                
                NodeList elements17 = sitesElement.getElementsByTagName("RuntimeAvailabilityState");
                Element runtimeAvailabilityStateElement = elements17.getLength() > 0 ? ((Element)elements17.item(0)) : null;
                if (runtimeAvailabilityStateElement != null)
                {
                    WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance;
                    runtimeAvailabilityStateInstance = WebSiteRuntimeAvailabilityState.valueOf(runtimeAvailabilityStateElement.getTextContent());
                    siteInstance.setRuntimeAvailabilityState(runtimeAvailabilityStateInstance);
                }
                
                NodeList elements18 = sitesElement.getElementsByTagName("SSLCertificates");
                Element sSLCertificatesSequenceElement = elements18.getLength() > 0 ? ((Element)elements18.item(0)) : null;
                if (sSLCertificatesSequenceElement != null)
                {
                    for (int i5 = 0; i5 < sSLCertificatesSequenceElement.getElementsByTagName("Certificate").getLength(); i5 = i5 + 1)
                    {
                        org.w3c.dom.Element sSLCertificatesElement = ((org.w3c.dom.Element)sSLCertificatesSequenceElement.getElementsByTagName("Certificate").item(i5));
                        WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                        siteInstance.getSslCertificates().add(certificateInstance);
                        
                        NodeList elements19 = sSLCertificatesElement.getElementsByTagName("ExpirationDate");
                        Element expirationDateElement = elements19.getLength() > 0 ? ((Element)elements19.item(0)) : null;
                        if (expirationDateElement != null)
                        {
                            Calendar expirationDateInstance;
                            SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar2 = Calendar.getInstance();
                            calendar2.setTime(simpleDateFormat2.parse(expirationDateElement.getTextContent()));
                            expirationDateInstance = calendar2;
                            certificateInstance.setExpirationDate(expirationDateInstance);
                        }
                        
                        NodeList elements20 = sSLCertificatesElement.getElementsByTagName("FriendlyName");
                        Element friendlyNameElement = elements20.getLength() > 0 ? ((Element)elements20.item(0)) : null;
                        if (friendlyNameElement != null)
                        {
                            String friendlyNameInstance;
                            friendlyNameInstance = friendlyNameElement.getTextContent();
                            certificateInstance.setFriendlyName(friendlyNameInstance);
                        }
                        
                        NodeList elements21 = sSLCertificatesElement.getElementsByTagName("HostNames");
                        Element hostNamesSequenceElement2 = elements21.getLength() > 0 ? ((Element)elements21.item(0)) : null;
                        if (hostNamesSequenceElement2 != null)
                        {
                            for (int i6 = 0; i6 < hostNamesSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string").getLength(); i6 = i6 + 1)
                            {
                                org.w3c.dom.Element hostNamesElement2 = ((org.w3c.dom.Element)hostNamesSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string").item(i6));
                                certificateInstance.getHostNames().add(hostNamesElement2.getTextContent());
                            }
                        }
                        
                        NodeList elements22 = sSLCertificatesElement.getElementsByTagName("IssueDate");
                        Element issueDateElement = elements22.getLength() > 0 ? ((Element)elements22.item(0)) : null;
                        if (issueDateElement != null)
                        {
                            Calendar issueDateInstance;
                            SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar3 = Calendar.getInstance();
                            calendar3.setTime(simpleDateFormat3.parse(issueDateElement.getTextContent()));
                            issueDateInstance = calendar3;
                            certificateInstance.setIssueDate(issueDateInstance);
                        }
                        
                        NodeList elements23 = sSLCertificatesElement.getElementsByTagName("Issuer");
                        Element issuerElement = elements23.getLength() > 0 ? ((Element)elements23.item(0)) : null;
                        if (issuerElement != null)
                        {
                            String issuerInstance;
                            issuerInstance = issuerElement.getTextContent();
                            certificateInstance.setIssuer(issuerInstance);
                        }
                        
                        NodeList elements24 = sSLCertificatesElement.getElementsByTagName("Password");
                        Element passwordElement = elements24.getLength() > 0 ? ((Element)elements24.item(0)) : null;
                        if (passwordElement != null)
                        {
                            String passwordInstance;
                            passwordInstance = passwordElement.getTextContent();
                            certificateInstance.setPassword(passwordInstance);
                        }
                        
                        NodeList elements25 = sSLCertificatesElement.getElementsByTagName("PfxBlob");
                        Element pfxBlobElement = elements25.getLength() > 0 ? ((Element)elements25.item(0)) : null;
                        if (pfxBlobElement != null)
                        {
                            byte[] pfxBlobInstance;
                            pfxBlobInstance = pfxBlobElement.getTextContent() != null ? Base64.decodeBase64(pfxBlobElement.getTextContent().getBytes()) : null;
                            certificateInstance.setPfxBlob(pfxBlobInstance);
                        }
                        
                        NodeList elements26 = sSLCertificatesElement.getElementsByTagName("SelfLink");
                        Element selfLinkElement = elements26.getLength() > 0 ? ((Element)elements26.item(0)) : null;
                        if (selfLinkElement != null)
                        {
                            URI selfLinkInstance;
                            selfLinkInstance = new URI(selfLinkElement.getTextContent());
                            certificateInstance.setSelfLinkUri(selfLinkInstance);
                        }
                        
                        NodeList elements27 = sSLCertificatesElement.getElementsByTagName("SiteName");
                        Element siteNameElement = elements27.getLength() > 0 ? ((Element)elements27.item(0)) : null;
                        if (siteNameElement != null)
                        {
                            String siteNameInstance;
                            siteNameInstance = siteNameElement.getTextContent();
                            certificateInstance.setSiteName(siteNameInstance);
                        }
                        
                        NodeList elements28 = sSLCertificatesElement.getElementsByTagName("SubjectName");
                        Element subjectNameElement = elements28.getLength() > 0 ? ((Element)elements28.item(0)) : null;
                        if (subjectNameElement != null)
                        {
                            String subjectNameInstance;
                            subjectNameInstance = subjectNameElement.getTextContent();
                            certificateInstance.setSubjectName(subjectNameInstance);
                        }
                        
                        NodeList elements29 = sSLCertificatesElement.getElementsByTagName("Thumbprint");
                        Element thumbprintElement2 = elements29.getLength() > 0 ? ((Element)elements29.item(0)) : null;
                        if (thumbprintElement2 != null)
                        {
                            String thumbprintInstance2;
                            thumbprintInstance2 = thumbprintElement2.getTextContent();
                            certificateInstance.setThumbprint(thumbprintInstance2);
                        }
                        
                        NodeList elements30 = sSLCertificatesElement.getElementsByTagName("ToDelete");
                        Element toDeleteElement = elements30.getLength() > 0 ? ((Element)elements30.item(0)) : null;
                        if (toDeleteElement != null)
                        {
                            boolean toDeleteInstance;
                            toDeleteInstance = Boolean.parseBoolean(toDeleteElement.getTextContent());
                            certificateInstance.setIsToBeDeleted(toDeleteInstance);
                        }
                        
                        NodeList elements31 = sSLCertificatesElement.getElementsByTagName("Valid");
                        Element validElement = elements31.getLength() > 0 ? ((Element)elements31.item(0)) : null;
                        if (validElement != null)
                        {
                            boolean validInstance;
                            validInstance = Boolean.parseBoolean(validElement.getTextContent());
                            certificateInstance.setIsValid(validInstance);
                        }
                    }
                }
                
                NodeList elements32 = sitesElement.getElementsByTagName("SelfLink");
                Element selfLinkElement2 = elements32.getLength() > 0 ? ((Element)elements32.item(0)) : null;
                if (selfLinkElement2 != null)
                {
                    URI selfLinkInstance2;
                    selfLinkInstance2 = new URI(selfLinkElement2.getTextContent());
                    siteInstance.setUri(selfLinkInstance2);
                }
                
                NodeList elements33 = sitesElement.getElementsByTagName("ServerFarm");
                Element serverFarmElement = elements33.getLength() > 0 ? ((Element)elements33.item(0)) : null;
                if (serverFarmElement != null)
                {
                    String serverFarmInstance;
                    serverFarmInstance = serverFarmElement.getTextContent();
                    siteInstance.setServerFarm(serverFarmInstance);
                }
                
                NodeList elements34 = sitesElement.getElementsByTagName("SiteMode");
                Element siteModeElement = elements34.getLength() > 0 ? ((Element)elements34.item(0)) : null;
                if (siteModeElement != null)
                {
                    WebSiteMode siteModeInstance;
                    siteModeInstance = WebSiteMode.valueOf(siteModeElement.getTextContent());
                    siteInstance.setSiteMode(siteModeInstance);
                }
                
                NodeList elements35 = sitesElement.getElementsByTagName("SiteProperties");
                Element sitePropertiesElement = elements35.getLength() > 0 ? ((Element)elements35.item(0)) : null;
                if (sitePropertiesElement != null)
                {
                    WebSite.WebSiteProperties sitePropertiesInstance = new WebSite.WebSiteProperties();
                    siteInstance.setSiteProperties(sitePropertiesInstance);
                    
                    NodeList elements36 = sitePropertiesElement.getElementsByTagName("AppSettings");
                    Element appSettingsSequenceElement = elements36.getLength() > 0 ? ((Element)elements36.item(0)) : null;
                    if (appSettingsSequenceElement != null)
                    {
                        for (int i7 = 0; i7 < appSettingsSequenceElement.getElementsByTagName("NameValuePair").getLength(); i7 = i7 + 1)
                        {
                            org.w3c.dom.Element appSettingsElement = ((org.w3c.dom.Element)appSettingsSequenceElement.getElementsByTagName("NameValuePair").item(i7));
                            NodeList elements37 = appSettingsElement.getElementsByTagName("Name");
                            String appSettingsKey = elements37.getLength() > 0 ? ((org.w3c.dom.Element)elements37.item(0)).getTextContent() : null;
                            NodeList elements38 = appSettingsElement.getElementsByTagName("Value");
                            String appSettingsValue = elements38.getLength() > 0 ? ((org.w3c.dom.Element)elements38.item(0)).getTextContent() : null;
                            sitePropertiesInstance.getAppSettings().put(appSettingsKey, appSettingsValue);
                        }
                    }
                    
                    NodeList elements39 = sitePropertiesElement.getElementsByTagName("Metadata");
                    Element metadataSequenceElement = elements39.getLength() > 0 ? ((Element)elements39.item(0)) : null;
                    if (metadataSequenceElement != null)
                    {
                        for (int i8 = 0; i8 < metadataSequenceElement.getElementsByTagName("NameValuePair").getLength(); i8 = i8 + 1)
                        {
                            org.w3c.dom.Element metadataElement = ((org.w3c.dom.Element)metadataSequenceElement.getElementsByTagName("NameValuePair").item(i8));
                            NodeList elements40 = metadataElement.getElementsByTagName("Name");
                            String metadataKey = elements40.getLength() > 0 ? ((org.w3c.dom.Element)elements40.item(0)).getTextContent() : null;
                            NodeList elements41 = metadataElement.getElementsByTagName("Value");
                            String metadataValue = elements41.getLength() > 0 ? ((org.w3c.dom.Element)elements41.item(0)).getTextContent() : null;
                            sitePropertiesInstance.getMetadata().put(metadataKey, metadataValue);
                        }
                    }
                    
                    NodeList elements42 = sitePropertiesElement.getElementsByTagName("Properties");
                    Element propertiesSequenceElement = elements42.getLength() > 0 ? ((Element)elements42.item(0)) : null;
                    if (propertiesSequenceElement != null)
                    {
                        for (int i9 = 0; i9 < propertiesSequenceElement.getElementsByTagName("NameValuePair").getLength(); i9 = i9 + 1)
                        {
                            org.w3c.dom.Element propertiesElement = ((org.w3c.dom.Element)propertiesSequenceElement.getElementsByTagName("NameValuePair").item(i9));
                            NodeList elements43 = propertiesElement.getElementsByTagName("Name");
                            String propertiesKey = elements43.getLength() > 0 ? ((org.w3c.dom.Element)elements43.item(0)).getTextContent() : null;
                            NodeList elements44 = propertiesElement.getElementsByTagName("Value");
                            String propertiesValue = elements44.getLength() > 0 ? ((org.w3c.dom.Element)elements44.item(0)).getTextContent() : null;
                            sitePropertiesInstance.getProperties().put(propertiesKey, propertiesValue);
                        }
                    }
                }
                
                NodeList elements45 = sitesElement.getElementsByTagName("State");
                Element stateElement = elements45.getLength() > 0 ? ((Element)elements45.item(0)) : null;
                if (stateElement != null)
                {
                    WebSiteState stateInstance;
                    stateInstance = WebSiteState.valueOf(stateElement.getTextContent());
                    siteInstance.setState(stateInstance);
                }
                
                NodeList elements46 = sitesElement.getElementsByTagName("UsageState");
                Element usageStateElement = elements46.getLength() > 0 ? ((Element)elements46.item(0)) : null;
                if (usageStateElement != null)
                {
                    WebSiteUsageState usageStateInstance;
                    usageStateInstance = WebSiteUsageState.valueOf(usageStateElement.getTextContent());
                    siteInstance.setUsageState(usageStateInstance);
                }
                
                NodeList elements47 = sitesElement.getElementsByTagName("WebSpace");
                Element webSpaceElement = elements47.getLength() > 0 ? ((Element)elements47.item(0)) : null;
                if (webSpaceElement != null)
                {
                    String webSpaceInstance;
                    webSpaceInstance = webSpaceElement.getTextContent();
                    siteInstance.setWebSpace(webSpaceInstance);
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
}
