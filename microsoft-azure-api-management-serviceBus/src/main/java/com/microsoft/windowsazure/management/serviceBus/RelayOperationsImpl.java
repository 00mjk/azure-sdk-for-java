// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.servicebus;

import com.microsoft.windowsazure.management.servicebus.models.AccessRight;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusConnectionDetail;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusConnectionDetailsResponse;
import com.microsoft.windowsazure.services.core.ServiceException;
import com.microsoft.windowsazure.services.core.ServiceOperations;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
* The Service Bus Management API includes operations for managing Service Bus
* relays.
*/
public class RelayOperationsImpl implements ServiceOperations<ServiceBusManagementClientImpl>, RelayOperations
{
    /**
    * Initializes a new instance of the RelayOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    RelayOperationsImpl(ServiceBusManagementClientImpl client)
    {
        this.client = client;
    }
    
    private ServiceBusManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.servicebus.ServiceBusManagementClientImpl.
    */
    public ServiceBusManagementClientImpl getClient() { return this.client; }
    
    /**
    * Gets the set of connection strings for a relay.
    *
    * @return The set of connection details for a service bus entity.
    */
    @Override
    public Future<ServiceBusConnectionDetailsResponse> getConnectionDetailsAsync(final String namespaceName, final String relayName)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusConnectionDetailsResponse>() { @Override
        public ServiceBusConnectionDetailsResponse call() throws Exception
        {
            return getConnectionDetails(namespaceName, relayName);
        }
         });
    }
    
    /**
    * Gets the set of connection strings for a relay.
    *
    * @return The set of connection details for a service bus entity.
    */
    @Override
    public ServiceBusConnectionDetailsResponse getConnectionDetails(String namespaceName, String relayName) throws IOException, ServiceException, ParserConfigurationException, SAXException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/Relays/" + relayName + "/ConnectionDetails";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml; charset=utf-8");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        ServiceBusConnectionDetailsResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new ServiceBusConnectionDetailsResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "feed");
        Element feedElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (feedElement != null)
        {
            if (feedElement != null)
            {
                for (int i1 = 0; i1 < feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").getLength(); i1 = i1 + 1)
                {
                    org.w3c.dom.Element entriesElement = ((org.w3c.dom.Element)feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").item(i1));
                    ServiceBusConnectionDetail entryInstance = new ServiceBusConnectionDetail();
                    result.getConnectionDetails().add(entryInstance);
                    
                    NodeList elements2 = entriesElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
                    Element contentElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
                    if (contentElement != null)
                    {
                        NodeList elements3 = contentElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ConnectionDetail");
                        Element connectionDetailElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                        if (connectionDetailElement != null)
                        {
                            NodeList elements4 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                            Element keyNameElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                            if (keyNameElement != null)
                            {
                                String keyNameInstance;
                                keyNameInstance = keyNameElement.getTextContent();
                                entryInstance.setKeyName(keyNameInstance);
                            }
                            
                            NodeList elements5 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ConnectionString");
                            Element connectionStringElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                            if (connectionStringElement != null)
                            {
                                String connectionStringInstance;
                                connectionStringInstance = connectionStringElement.getTextContent();
                                entryInstance.setConnectionString(connectionStringInstance);
                            }
                            
                            NodeList elements6 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationType");
                            Element authorizationTypeElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                            if (authorizationTypeElement != null)
                            {
                                String authorizationTypeInstance;
                                authorizationTypeInstance = authorizationTypeElement.getTextContent();
                                entryInstance.setAuthorizationType(authorizationTypeInstance);
                            }
                            
                            NodeList elements7 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                            Element rightsSequenceElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                            if (rightsSequenceElement != null)
                            {
                                for (int i2 = 0; i2 < rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i2 = i2 + 1)
                                {
                                    org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element)rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i2));
                                    entryInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                                }
                            }
                        }
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
}
