/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.monitoring.alerts;

import com.microsoft.windowsazure.core.OperationResponse;
import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.management.monitoring.alerts.models.RuleCreateOrUpdateParameters;
import com.microsoft.windowsazure.management.monitoring.alerts.models.RuleGetResponse;
import com.microsoft.windowsazure.management.monitoring.alerts.models.RuleListResponse;
import java.io.IOException;
import java.text.ParseException;
import java.util.concurrent.Future;

/**
 * Operations for managing the alert rules.
 */
public interface RuleOperations {
    /**
     * 
     * @param parameters
     *            The rule to create or update.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred. This
     *             class is the general class of exceptions produced by failed
     *             or interrupted I/O operations.
     * @throws ServiceException
     *             Thrown if an unexpected response is found.
     * @return A standard service response including an HTTP status code and
     *         request ID.
     */
    OperationResponse createOrUpdate(RuleCreateOrUpdateParameters parameters)
            throws IOException, ServiceException;

    /**
     * 
     * @param parameters
     *            The rule to create or update.
     * @return A standard service response including an HTTP status code and
     *         request ID.
     */
    Future<OperationResponse> createOrUpdateAsync(
            RuleCreateOrUpdateParameters parameters);

    /**
     * 
     * @param ruleId
     *            The id of the rule to delete.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred. This
     *             class is the general class of exceptions produced by failed
     *             or interrupted I/O operations.
     * @throws ServiceException
     *             Thrown if an unexpected response is found.
     * @return A standard service response including an HTTP status code and
     *         request ID.
     */
    OperationResponse delete(String ruleId) throws IOException,
            ServiceException;

    /**
     * 
     * @param ruleId
     *            The id of the rule to delete.
     * @return A standard service response including an HTTP status code and
     *         request ID.
     */
    Future<OperationResponse> deleteAsync(String ruleId);

    /**
     * 
     * @param ruleId
     *            The id of the rule to retrieve.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred. This
     *             class is the general class of exceptions produced by failed
     *             or interrupted I/O operations.
     * @throws ServiceException
     *             Thrown if an unexpected response is found.
     * @throws ParseException
     *             Thrown if there was an error parsing a string in the
     *             response.
     * @return The Get Rule operation response.
     */
    RuleGetResponse get(String ruleId) throws IOException, ServiceException,
            ParseException;

    /**
     * 
     * @param ruleId
     *            The id of the rule to retrieve.
     * @return The Get Rule operation response.
     */
    Future<RuleGetResponse> getAsync(String ruleId);

    /**
     * List the alert rules within a subscription.
     * 
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred. This
     *             class is the general class of exceptions produced by failed
     *             or interrupted I/O operations.
     * @throws ServiceException
     *             Thrown if an unexpected response is found.
     * @throws ParseException
     *             Thrown if there was an error parsing a string in the
     *             response.
     * @return The List Rules operation response.
     */
    RuleListResponse list() throws IOException, ServiceException,
            ParseException;

    /**
     * List the alert rules within a subscription.
     * 
     * @return The List Rules operation response.
     */
    Future<RuleListResponse> listAsync();
}
