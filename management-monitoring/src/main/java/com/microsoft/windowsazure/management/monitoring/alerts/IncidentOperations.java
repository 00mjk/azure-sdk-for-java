/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.monitoring.alerts;

import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.management.monitoring.alerts.models.IncidentGetResponse;
import com.microsoft.windowsazure.management.monitoring.alerts.models.IncidentListResponse;
import java.io.IOException;
import java.text.ParseException;
import java.util.concurrent.Future;

/**
* Operations for managing the alert incidents.
*/
public interface IncidentOperations
{
    /**
    *
    * @param incidentId The id of the incident to retrieve.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @return The Get Incident operation response.
    */
    IncidentGetResponse get(String incidentId) throws IOException, ServiceException, ParseException;
    
    /**
    *
    * @param incidentId The id of the incident to retrieve.
    * @return The Get Incident operation response.
    */
    Future<IncidentGetResponse> getAsync(String incidentId);
    
    /**
    *
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @return The List incidents operation response.
    */
    IncidentListResponse listActiveForSubscription() throws IOException, ServiceException, ParseException;
    
    /**
    *
    * @return The List incidents operation response.
    */
    Future<IncidentListResponse> listActiveForSubscriptionAsync();
    
    /**
    *
    * @param ruleId The rule id.
    * @param isActive A boolean to retrieve only active or resolved incidents.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @return The List incidents operation response.
    */
    IncidentListResponse listForRule(String ruleId, boolean isActive) throws IOException, ServiceException, ParseException;
    
    /**
    *
    * @param ruleId The rule id.
    * @param isActive A boolean to retrieve only active or resolved incidents.
    * @return The List incidents operation response.
    */
    Future<IncidentListResponse> listForRuleAsync(String ruleId, boolean isActive);
}
