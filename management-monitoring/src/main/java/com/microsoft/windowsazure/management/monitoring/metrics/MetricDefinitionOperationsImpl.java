// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.monitoring.metrics;

import com.microsoft.windowsazure.management.monitoring.metrics.models.MetricAvailability;
import com.microsoft.windowsazure.management.monitoring.metrics.models.MetricDefinition;
import com.microsoft.windowsazure.management.monitoring.metrics.models.MetricDefinitionCollection;
import com.microsoft.windowsazure.management.monitoring.metrics.models.MetricDefinitionListResponse;
import com.microsoft.windowsazure.services.core.ServiceException;
import com.microsoft.windowsazure.services.core.ServiceOperations;
import com.microsoft.windowsazure.services.core.TimeSpan8601Converter;
import com.microsoft.windowsazure.services.core.utils.CommaStringBuilder;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.datatype.Duration;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ArrayNode;

public class MetricDefinitionOperationsImpl implements ServiceOperations<MetricsClientImpl>, MetricDefinitionOperations
{
    /**
    * Initializes a new instance of the MetricDefinitionOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    MetricDefinitionOperationsImpl(MetricsClientImpl client)
    {
        this.client = client;
    }
    
    private MetricsClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.monitoring.metrics.MetricsClientImpl.
    */
    public MetricsClientImpl getClient() { return this.client; }
    
    /**
    * The List Metric Definitions operation lists the metric definitions for
    * the resource.
    *
    * @param resourceId The id of the resource.
    * @param metricNames The names of the metrics.
    * @param metricNamespace The namespace of the metrics.
    * @return The List Metric Definitions operation response.
    */
    @Override
    public Future<MetricDefinitionListResponse> listAsync(final String resourceId, final ArrayList<String> metricNames, final String metricNamespace)
    {
        return this.getClient().getExecutorService().submit(new Callable<MetricDefinitionListResponse>() { 
            @Override
            public MetricDefinitionListResponse call() throws Exception
            {
                return list(resourceId, metricNames, metricNamespace);
            }
         });
    }
    
    /**
    * The List Metric Definitions operation lists the metric definitions for
    * the resource.
    *
    * @param resourceId The id of the resource.
    * @param metricNames The names of the metrics.
    * @param metricNamespace The namespace of the metrics.
    * @return The List Metric Definitions operation response.
    */
    @Override
    public MetricDefinitionListResponse list(String resourceId, ArrayList<String> metricNames, String metricNamespace) throws IOException, ServiceException, URISyntaxException, ParseException
    {
        // Validate
        if (resourceId == null)
        {
            throw new NullPointerException("resourceId");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/monitoring/metricdefinitions/query?";
        url = url + "&resourceId=" + URLEncoder.encode(resourceId);
        if (metricNamespace != null)
        {
            url = url + "&namespace=" + URLEncoder.encode(metricNamespace);
        }
        if (metricNames != null && metricNames.size() > 0)
        {
            url = url + "&names=" + URLEncoder.encode(CommaStringBuilder.join(metricNames));
        }
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/json");
        httpRequest.setHeader("x-ms-version", "2012-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        MetricDefinitionListResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new MetricDefinitionListResponse();
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode responseDoc = objectMapper.readTree(responseContent);
        
        if (responseDoc != null)
        {
            MetricDefinitionCollection metricDefinitionCollectionInstance = new MetricDefinitionCollection();
            result.setMetricDefinitionCollection(metricDefinitionCollectionInstance);
            
            ArrayNode valueArray = ((ArrayNode)responseDoc.get("Value"));
            if (valueArray != null)
            {
                for (JsonNode valueValue : valueArray)
                {
                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                    metricDefinitionCollectionInstance.getValue().add(metricDefinitionInstance);
                    
                    JsonNode nameValue = valueValue.get("Name");
                    if (nameValue != null)
                    {
                        String nameInstance;
                        nameInstance = nameValue.getTextValue();
                        metricDefinitionInstance.setName(nameInstance);
                    }
                    
                    JsonNode namespaceValue = valueValue.get("Namespace");
                    if (namespaceValue != null)
                    {
                        String namespaceInstance;
                        namespaceInstance = namespaceValue.getTextValue();
                        metricDefinitionInstance.setNamespace(namespaceInstance);
                    }
                    
                    JsonNode resourceIdSuffixValue = valueValue.get("ResourceIdSuffix");
                    if (resourceIdSuffixValue != null)
                    {
                        String resourceIdSuffixInstance;
                        resourceIdSuffixInstance = resourceIdSuffixValue.getTextValue();
                        metricDefinitionInstance.setResourceIdSuffix(resourceIdSuffixInstance);
                    }
                    
                    JsonNode displayNameValue = valueValue.get("DisplayName");
                    if (displayNameValue != null)
                    {
                        String displayNameInstance;
                        displayNameInstance = displayNameValue.getTextValue();
                        metricDefinitionInstance.setDisplayName(displayNameInstance);
                    }
                    
                    JsonNode unitValue = valueValue.get("Unit");
                    if (unitValue != null)
                    {
                        String unitInstance;
                        unitInstance = unitValue.getTextValue();
                        metricDefinitionInstance.setUnit(unitInstance);
                    }
                    
                    JsonNode primaryAggregationValue = valueValue.get("PrimaryAggregation");
                    if (primaryAggregationValue != null)
                    {
                        String primaryAggregationInstance;
                        primaryAggregationInstance = primaryAggregationValue.getTextValue();
                        metricDefinitionInstance.setPrimaryAggregation(primaryAggregationInstance);
                    }
                    
                    ArrayNode metricAvailabilitiesArray = ((ArrayNode)valueValue.get("MetricAvailabilities"));
                    if (metricAvailabilitiesArray != null)
                    {
                        for (JsonNode metricAvailabilitiesValue : metricAvailabilitiesArray)
                        {
                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                            metricDefinitionInstance.getMetricAvailabilities().add(metricAvailabilityInstance);
                            
                            JsonNode timeGrainValue = metricAvailabilitiesValue.get("TimeGrain");
                            if (timeGrainValue != null)
                            {
                                Duration timeGrainInstance;
                                timeGrainInstance = TimeSpan8601Converter.parse(timeGrainValue.getTextValue());
                                metricAvailabilityInstance.setTimeGrain(timeGrainInstance);
                            }
                            
                            JsonNode retentionValue = metricAvailabilitiesValue.get("Retention");
                            if (retentionValue != null)
                            {
                                Duration retentionInstance;
                                retentionInstance = TimeSpan8601Converter.parse(retentionValue.getTextValue());
                                metricAvailabilityInstance.setRetention(retentionInstance);
                            }
                        }
                    }
                    
                    JsonNode minimumAlertableTimeWindowValue = valueValue.get("MinimumAlertableTimeWindow");
                    if (minimumAlertableTimeWindowValue != null)
                    {
                        Duration minimumAlertableTimeWindowInstance;
                        minimumAlertableTimeWindowInstance = TimeSpan8601Converter.parse(minimumAlertableTimeWindowValue.getTextValue());
                        metricDefinitionInstance.setMinimumAlertableTimeWindow(minimumAlertableTimeWindowInstance);
                    }
                    
                    JsonNode isAlertableValue = valueValue.get("IsAlertable");
                    if (isAlertableValue != null)
                    {
                        boolean isAlertableInstance;
                        isAlertableInstance = isAlertableValue.getBooleanValue();
                        metricDefinitionInstance.setIsAlertable(isAlertableInstance);
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
}
