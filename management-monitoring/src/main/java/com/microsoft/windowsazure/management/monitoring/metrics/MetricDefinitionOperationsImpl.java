/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.monitoring.metrics;

import com.microsoft.windowsazure.core.ServiceOperations;
import com.microsoft.windowsazure.core.TimeSpan8601Converter;
import com.microsoft.windowsazure.core.utils.CommaStringBuilder;
import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.management.monitoring.metrics.models.MetricAvailability;
import com.microsoft.windowsazure.management.monitoring.metrics.models.MetricDefinition;
import com.microsoft.windowsazure.management.monitoring.metrics.models.MetricDefinitionCollection;
import com.microsoft.windowsazure.management.monitoring.metrics.models.MetricDefinitionListResponse;
import com.microsoft.windowsazure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.datatype.Duration;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ArrayNode;

public class MetricDefinitionOperationsImpl implements ServiceOperations<MetricsClientImpl>, MetricDefinitionOperations
{
    /**
    * Initializes a new instance of the MetricDefinitionOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    MetricDefinitionOperationsImpl(MetricsClientImpl client)
    {
        this.client = client;
    }
    
    private MetricsClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.monitoring.metrics.MetricsClientImpl.
    * @return The Client value.
    */
    public MetricsClientImpl getClient()
    {
        return this.client;
    }
    
    /**
    * The List Metric Definitions operation lists the metric definitions for
    * the resource.
    *
    * @param resourceId The id of the resource.The resource id can be built
    * using the resource id builder class under utilities
    * @param metricNames The names of the metrics.
    * @param metricNamespace The namespace of the metrics.The value is either
    * null or WindowsAzure.Availability.WindowsAzure.Availability returns the
    * metric definitions for endpoint monitoring metrics
    * @return The List Metric Definitions operation response.
    */
    @Override
    public Future<MetricDefinitionListResponse> listAsync(final String resourceId, final ArrayList<String> metricNames, final String metricNamespace)
    {
        return this.getClient().getExecutorService().submit(new Callable<MetricDefinitionListResponse>() { 
            @Override
            public MetricDefinitionListResponse call() throws Exception
            {
                return list(resourceId, metricNames, metricNamespace);
            }
         });
    }
    
    /**
    * The List Metric Definitions operation lists the metric definitions for
    * the resource.
    *
    * @param resourceId The id of the resource.The resource id can be built
    * using the resource id builder class under utilities
    * @param metricNames The names of the metrics.
    * @param metricNamespace The namespace of the metrics.The value is either
    * null or WindowsAzure.Availability.WindowsAzure.Availability returns the
    * metric definitions for endpoint monitoring metrics
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @return The List Metric Definitions operation response.
    */
    @Override
    public MetricDefinitionListResponse list(String resourceId, ArrayList<String> metricNames, String metricNamespace) throws IOException, ServiceException, URISyntaxException, ParseException
    {
        // Validate
        if (resourceId == null)
        {
            throw new NullPointerException("resourceId");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceId", resourceId);
            tracingParameters.put("metricNames", metricNames);
            tracingParameters.put("metricNamespace", metricNamespace);
            CloudTracing.enter(invocationId, this, "listAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/monitoring/metricdefinitions/query?&resourceId=" + resourceId + "&namespace=" + metricNamespace + "&names=" + CommaStringBuilder.join(metricNames);
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/json");
        httpRequest.setHeader("x-ms-version", "2013-10-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK)
            {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            MetricDefinitionListResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new MetricDefinitionListResponse();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = objectMapper.readTree(responseContent);
            
            if (responseDoc != null)
            {
                MetricDefinitionCollection metricDefinitionCollectionInstance = new MetricDefinitionCollection();
                result.setMetricDefinitionCollection(metricDefinitionCollectionInstance);
                
                ArrayNode valueArray = ((ArrayNode) responseDoc.get("Value"));
                if (valueArray != null)
                {
                    for (JsonNode valueValue : valueArray)
                    {
                        MetricDefinition metricDefinitionInstance = new MetricDefinition();
                        metricDefinitionCollectionInstance.getValue().add(metricDefinitionInstance);
                        
                        JsonNode nameValue = valueValue.get("Name");
                        if (nameValue != null)
                        {
                            String nameInstance;
                            nameInstance = nameValue.getTextValue();
                            metricDefinitionInstance.setName(nameInstance);
                        }
                        
                        JsonNode namespaceValue = valueValue.get("Namespace");
                        if (namespaceValue != null)
                        {
                            String namespaceInstance;
                            namespaceInstance = namespaceValue.getTextValue();
                            metricDefinitionInstance.setNamespace(namespaceInstance);
                        }
                        
                        JsonNode resourceIdSuffixValue = valueValue.get("ResourceIdSuffix");
                        if (resourceIdSuffixValue != null)
                        {
                            String resourceIdSuffixInstance;
                            resourceIdSuffixInstance = resourceIdSuffixValue.getTextValue();
                            metricDefinitionInstance.setResourceIdSuffix(resourceIdSuffixInstance);
                        }
                        
                        JsonNode displayNameValue = valueValue.get("DisplayName");
                        if (displayNameValue != null)
                        {
                            String displayNameInstance;
                            displayNameInstance = displayNameValue.getTextValue();
                            metricDefinitionInstance.setDisplayName(displayNameInstance);
                        }
                        
                        JsonNode unitValue = valueValue.get("Unit");
                        if (unitValue != null)
                        {
                            String unitInstance;
                            unitInstance = unitValue.getTextValue();
                            metricDefinitionInstance.setUnit(unitInstance);
                        }
                        
                        JsonNode primaryAggregationValue = valueValue.get("PrimaryAggregation");
                        if (primaryAggregationValue != null)
                        {
                            String primaryAggregationInstance;
                            primaryAggregationInstance = primaryAggregationValue.getTextValue();
                            metricDefinitionInstance.setPrimaryAggregation(primaryAggregationInstance);
                        }
                        
                        ArrayNode metricAvailabilitiesArray = ((ArrayNode) valueValue.get("MetricAvailabilities"));
                        if (metricAvailabilitiesArray != null)
                        {
                            for (JsonNode metricAvailabilitiesValue : metricAvailabilitiesArray)
                            {
                                MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                metricDefinitionInstance.getMetricAvailabilities().add(metricAvailabilityInstance);
                                
                                JsonNode timeGrainValue = metricAvailabilitiesValue.get("TimeGrain");
                                if (timeGrainValue != null)
                                {
                                    Duration timeGrainInstance;
                                    timeGrainInstance = TimeSpan8601Converter.parse(timeGrainValue.getTextValue());
                                    metricAvailabilityInstance.setTimeGrain(timeGrainInstance);
                                }
                                
                                JsonNode retentionValue = metricAvailabilitiesValue.get("Retention");
                                if (retentionValue != null)
                                {
                                    Duration retentionInstance;
                                    retentionInstance = TimeSpan8601Converter.parse(retentionValue.getTextValue());
                                    metricAvailabilityInstance.setRetention(retentionInstance);
                                }
                            }
                        }
                        
                        JsonNode minimumAlertableTimeWindowValue = valueValue.get("MinimumAlertableTimeWindow");
                        if (minimumAlertableTimeWindowValue != null)
                        {
                            Duration minimumAlertableTimeWindowInstance;
                            minimumAlertableTimeWindowInstance = TimeSpan8601Converter.parse(minimumAlertableTimeWindowValue.getTextValue());
                            metricDefinitionInstance.setMinimumAlertableTimeWindow(minimumAlertableTimeWindowInstance);
                        }
                        
                        JsonNode isAlertableValue = valueValue.get("IsAlertable");
                        if (isAlertableValue != null)
                        {
                            boolean isAlertableInstance;
                            isAlertableInstance = isAlertableValue.getBooleanValue();
                            metricDefinitionInstance.setIsAlertable(isAlertableInstance);
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
}
