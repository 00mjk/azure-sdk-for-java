/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.monitoring.autoscale.models;

import javax.xml.datatype.Duration;

/**
* A rule that provides the triggers and parameters for the scaling action.
*/
public class MetricTrigger
{
    private String metricName;
    
    /**
    * The name of the metric.
    */
    public String getMetricName()
    {
        return this.metricName;
    }
    
    /**
    * The name of the metric.
    */
    public void setMetricName(String metricName)
    {
        this.metricName = metricName;
    }
    
    private String metricNamespace;
    
    /**
    * The namespace of the metric.
    */
    public String getMetricNamespace()
    {
        return this.metricNamespace;
    }
    
    /**
    * The namespace of the metric.
    */
    public void setMetricNamespace(String metricNamespace)
    {
        this.metricNamespace = metricNamespace;
    }
    
    private String metricSource;
    
    /**
    * The metric source.
    */
    public String getMetricSource()
    {
        return this.metricSource;
    }
    
    /**
    * The metric source.
    */
    public void setMetricSource(String metricSource)
    {
        this.metricSource = metricSource;
    }
    
    private ComparisonOperationType operator;
    
    /**
    * The operator that is used to evaluate the metric.
    */
    public ComparisonOperationType getOperator()
    {
        return this.operator;
    }
    
    /**
    * The operator that is used to evaluate the metric.
    */
    public void setOperator(ComparisonOperationType operator)
    {
        this.operator = operator;
    }
    
    private MetricStatisticType statistic;
    
    /**
    * How the metrics from multiple instances are combined.
    */
    public MetricStatisticType getStatistic()
    {
        return this.statistic;
    }
    
    /**
    * How the metrics from multiple instances are combined.
    */
    public void setStatistic(MetricStatisticType statistic)
    {
        this.statistic = statistic;
    }
    
    private double threshold;
    
    /**
    * The percentage of usage that triggers the scaling operation.
    */
    public double getThreshold()
    {
        return this.threshold;
    }
    
    /**
    * The percentage of usage that triggers the scaling operation.
    */
    public void setThreshold(double threshold)
    {
        this.threshold = threshold;
    }
    
    private TimeAggregationType timeAggregation;
    
    /**
    * How the data that is collected should be combined over time.
    */
    public TimeAggregationType getTimeAggregation()
    {
        return this.timeAggregation;
    }
    
    /**
    * How the data that is collected should be combined over time.
    */
    public void setTimeAggregation(TimeAggregationType timeAggregation)
    {
        this.timeAggregation = timeAggregation;
    }
    
    private Duration timeGrain;
    
    /**
    * The frequency of data collection.
    */
    public Duration getTimeGrain()
    {
        return this.timeGrain;
    }
    
    /**
    * The frequency of data collection.
    */
    public void setTimeGrain(Duration timeGrain)
    {
        this.timeGrain = timeGrain;
    }
    
    private Duration timeWindow;
    
    /**
    * The range of time in which instance data is collected.
    */
    public Duration getTimeWindow()
    {
        return this.timeWindow;
    }
    
    /**
    * The range of time in which instance data is collected.
    */
    public void setTimeWindow(Duration timeWindow)
    {
        this.timeWindow = timeWindow;
    }
}
