// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.monitoring.alerts;

import com.microsoft.windowsazure.management.OperationResponse;
import com.microsoft.windowsazure.management.monitoring.alerts.models.RuleCreateOrUpdateParameters;
import com.microsoft.windowsazure.management.monitoring.alerts.models.RuleGetResponse;
import com.microsoft.windowsazure.management.monitoring.alerts.models.RuleListResponse;
import com.microsoft.windowsazure.services.core.ServiceException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.concurrent.Future;

/**
* Operations for managing the alert rules.
*/
public interface RuleOperations
{
    /**
    *
    * @param parameters The rule to create or update.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse createOrUpdate(RuleCreateOrUpdateParameters parameters) throws UnsupportedEncodingException, IOException, ServiceException;
    
    /**
    *
    * @param parameters The rule to create or update.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> createOrUpdateAsync(RuleCreateOrUpdateParameters parameters);
    
    /**
    *
    * @param ruleId The id of the rule to delete.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse delete(String ruleId) throws IOException, ServiceException;
    
    /**
    *
    * @param ruleId The id of the rule to delete.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> deleteAsync(String ruleId);
    
    /**
    *
    * @param ruleId The id of the rule to retrieve.
    * @return The Get Rule operation response.
    */
    RuleGetResponse get(String ruleId) throws IOException, ServiceException, ParseException;
    
    /**
    *
    * @param ruleId The id of the rule to retrieve.
    * @return The Get Rule operation response.
    */
    Future<RuleGetResponse> getAsync(String ruleId);
    
    /**
    *
    * @return The List Rules operation response.
    */
    RuleListResponse list() throws IOException, ServiceException, ParseException;
    
    /**
    *
    * @return The List Rules operation response.
    */
    Future<RuleListResponse> listAsync();
}
