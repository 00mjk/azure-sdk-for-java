/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.websites.models;

import com.microsoft.windowsazure.core.OperationResponse;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;

/**
* The Get Web Site Usage Metrics operation response.
*/
public class WebSiteGetUsageMetricsResponse extends OperationResponse implements Iterable<WebSiteGetUsageMetricsResponse.UsageMetric>
{
    private ArrayList<WebSiteGetUsageMetricsResponse.UsageMetric> usageMetrics;
    
    /**
    * The usage metrics for the web site.
    */
    public ArrayList<WebSiteGetUsageMetricsResponse.UsageMetric> getUsageMetrics()
    {
        return this.usageMetrics;
    }
    
    /**
    * The usage metrics for the web site.
    */
    public void setUsageMetrics(ArrayList<WebSiteGetUsageMetricsResponse.UsageMetric> usageMetrics)
    {
        this.usageMetrics = usageMetrics;
    }
    
    /**
    * Initializes a new instance of the WebSiteGetUsageMetricsResponse class.
    *
    */
    public WebSiteGetUsageMetricsResponse()
    {
        super();
        this.usageMetrics = new ArrayList<WebSiteGetUsageMetricsResponse.UsageMetric>();
    }
    
    /**
    * Gets the sequence of UsageMetrics.
    *
    */
    public Iterator<WebSiteGetUsageMetricsResponse.UsageMetric> iterator()
    {
        return this.getUsageMetrics().iterator();
    }
    
    /**
    * A specific usage metric.
    */
    public static class UsageMetric
    {
        private WebSiteComputeMode computeMode;
        
        /**
        * The compute mode of the web site. For web sites in Standard Mode, the
        * return value is Dedicated. For web sites in Free or Shared mode, the
        * return value is Shared.
        */
        public WebSiteComputeMode getComputeMode()
        {
            return this.computeMode;
        }
        
        /**
        * The compute mode of the web site. For web sites in Standard Mode, the
        * return value is Dedicated. For web sites in Free or Shared mode, the
        * return value is Shared.
        */
        public void setComputeMode(WebSiteComputeMode computeMode)
        {
            this.computeMode = computeMode;
        }
        
        private String currentValue;
        
        /**
        * The current value of the metric specified, expressed in terms of the
        * measurement specified by the Unit element.
        */
        public String getCurrentValue()
        {
            return this.currentValue;
        }
        
        /**
        * The current value of the metric specified, expressed in terms of the
        * measurement specified by the Unit element.
        */
        public void setCurrentValue(String currentValue)
        {
            this.currentValue = currentValue;
        }
        
        private String displayName;
        
        /**
        * The display name of the metric (includes spaces).
        */
        public String getDisplayName()
        {
            return this.displayName;
        }
        
        /**
        * The display name of the metric (includes spaces).
        */
        public void setDisplayName(String displayName)
        {
            this.displayName = displayName;
        }
        
        private String limit;
        
        /**
        * The maximum point that the given metric can reach. The limit resets
        * at the time specified by the NextResetTime element. If the limit is
        * reached before the reset time, the site will be stopped. A value of
        * -1 means unlimited. Resources with limits typically include CPU
        * Time, Memory Usage, and File System Storage. Important: Site level
        * Limits information is only meaningful for Shared and Standard web
        * sites. For free web sites, limits are enforced at the webspace level.
        */
        public String getLimit()
        {
            return this.limit;
        }
        
        /**
        * The maximum point that the given metric can reach. The limit resets
        * at the time specified by the NextResetTime element. If the limit is
        * reached before the reset time, the site will be stopped. A value of
        * -1 means unlimited. Resources with limits typically include CPU
        * Time, Memory Usage, and File System Storage. Important: Site level
        * Limits information is only meaningful for Shared and Standard web
        * sites. For free web sites, limits are enforced at the webspace level.
        */
        public void setLimit(String limit)
        {
            this.limit = limit;
        }
        
        private String name;
        
        /**
        * The name of the metric, without spaces. The value is usually the same
        * as that of the ResourceName element.
        */
        public String getName()
        {
            return this.name;
        }
        
        /**
        * The name of the metric, without spaces. The value is usually the same
        * as that of the ResourceName element.
        */
        public void setName(String name)
        {
            this.name = name;
        }
        
        private Calendar nextResetTime;
        
        /**
        * The time at which the metric will be reset.
        */
        public Calendar getNextResetTime()
        {
            return this.nextResetTime;
        }
        
        /**
        * The time at which the metric will be reset.
        */
        public void setNextResetTime(Calendar nextResetTime)
        {
            this.nextResetTime = nextResetTime;
        }
        
        private String resourceName;
        
        /**
        * The name of the resource being measured.
        */
        public String getResourceName()
        {
            return this.resourceName;
        }
        
        /**
        * The name of the resource being measured.
        */
        public void setResourceName(String resourceName)
        {
            this.resourceName = resourceName;
        }
        
        private WebSiteMode siteMode;
        
        /**
        * The scaling for the web site. Web sites in Free Mode return a value
        * of Limited. Web sites in Shared Mode return a value of Basic. Sites
        * in Standard Mode return null.
        */
        public WebSiteMode getSiteMode()
        {
            return this.siteMode;
        }
        
        /**
        * The scaling for the web site. Web sites in Free Mode return a value
        * of Limited. Web sites in Shared Mode return a value of Basic. Sites
        * in Standard Mode return null.
        */
        public void setSiteMode(WebSiteMode siteMode)
        {
            this.siteMode = siteMode;
        }
        
        private String unit;
        
        /**
        * The unit of measure for the given metric.
        */
        public String getUnit()
        {
            return this.unit;
        }
        
        /**
        * The unit of measure for the given metric.
        */
        public void setUnit(String unit)
        {
            this.unit = unit;
        }
    }
}
