/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.websites.models;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;

/**
* The Update Web Site Configuration parameters.
*/
public class WebSiteUpdateConfigurationParameters
{
    private HashMap<String, String> appSettings;
    
    /**
    * A set of name/value pairs that contain application settings for a site.
    */
    public HashMap<String, String> getAppSettings() { return this.appSettings; }
    
    /**
    * A set of name/value pairs that contain application settings for a site.
    */
    public void setAppSettings(HashMap<String, String> appSettings) { this.appSettings = appSettings; }
    
    private ArrayList<WebSiteUpdateConfigurationParameters.ConnectionStringInfo> connectionStrings;
    
    /**
    * Contains connection strings for database and other external resources.
    */
    public ArrayList<WebSiteUpdateConfigurationParameters.ConnectionStringInfo> getConnectionStrings() { return this.connectionStrings; }
    
    /**
    * Contains connection strings for database and other external resources.
    */
    public void setConnectionStrings(ArrayList<WebSiteUpdateConfigurationParameters.ConnectionStringInfo> connectionStrings) { this.connectionStrings = connectionStrings; }
    
    private ArrayList<String> defaultDocuments;
    
    /**
    * Contains one or more string elements that list, in order of preference,
    * the name of the file that a web site returns when the web site's domain
    * name is requested by itself. For example, if the default document for
    * http://contoso.com is default.htm, the page
    * http://www.contoso.com/default.htm is returned when the browser is
    * pointed to http://www.contoso.com.
    */
    public ArrayList<String> getDefaultDocuments() { return this.defaultDocuments; }
    
    /**
    * Contains one or more string elements that list, in order of preference,
    * the name of the file that a web site returns when the web site's domain
    * name is requested by itself. For example, if the default document for
    * http://contoso.com is default.htm, the page
    * http://www.contoso.com/default.htm is returned when the browser is
    * pointed to http://www.contoso.com.
    */
    public void setDefaultDocuments(ArrayList<String> defaultDocuments) { this.defaultDocuments = defaultDocuments; }
    
    private Boolean detailedErrorLoggingEnabled;
    
    /**
    * True if detailed error logging is enabled; otherwise, false.
    */
    public Boolean getDetailedErrorLoggingEnabled() { return this.detailedErrorLoggingEnabled; }
    
    /**
    * True if detailed error logging is enabled; otherwise, false.
    */
    public void setDetailedErrorLoggingEnabled(Boolean detailedErrorLoggingEnabled) { this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled; }
    
    private String documentRoot;
    
    /**
    * The document root.
    */
    public String getDocumentRoot() { return this.documentRoot; }
    
    /**
    * The document root.
    */
    public void setDocumentRoot(String documentRoot) { this.documentRoot = documentRoot; }
    
    private ArrayList<WebSiteUpdateConfigurationParameters.HandlerMapping> handlerMappings;
    
    /**
    * Specifies custom executable programs for handling requests for specific
    * file name extensions.
    */
    public ArrayList<WebSiteUpdateConfigurationParameters.HandlerMapping> getHandlerMappings() { return this.handlerMappings; }
    
    /**
    * Specifies custom executable programs for handling requests for specific
    * file name extensions.
    */
    public void setHandlerMappings(ArrayList<WebSiteUpdateConfigurationParameters.HandlerMapping> handlerMappings) { this.handlerMappings = handlerMappings; }
    
    private Boolean httpLoggingEnabled;
    
    /**
    * True if HTTP error logging is enabled; otherwise, false.
    */
    public Boolean getHttpLoggingEnabled() { return this.httpLoggingEnabled; }
    
    /**
    * True if HTTP error logging is enabled; otherwise, false.
    */
    public void setHttpLoggingEnabled(Boolean httpLoggingEnabled) { this.httpLoggingEnabled = httpLoggingEnabled; }
    
    private Integer logsDirectorySizeLimit;
    
    /**
    * The limit of the logs directory.
    */
    public Integer getLogsDirectorySizeLimit() { return this.logsDirectorySizeLimit; }
    
    /**
    * The limit of the logs directory.
    */
    public void setLogsDirectorySizeLimit(Integer logsDirectorySizeLimit) { this.logsDirectorySizeLimit = logsDirectorySizeLimit; }
    
    private ManagedPipelineMode managedPipelineMode;
    
    /**
    * Managed pipeline modes.
    */
    public ManagedPipelineMode getManagedPipelineMode() { return this.managedPipelineMode; }
    
    /**
    * Managed pipeline modes.
    */
    public void setManagedPipelineMode(ManagedPipelineMode managedPipelineMode) { this.managedPipelineMode = managedPipelineMode; }
    
    private HashMap<String, String> metadata;
    
    /**
    * Contains name/value pairs for source control or other information.
    */
    public HashMap<String, String> getMetadata() { return this.metadata; }
    
    /**
    * Contains name/value pairs for source control or other information.
    */
    public void setMetadata(HashMap<String, String> metadata) { this.metadata = metadata; }
    
    private String netFrameworkVersion;
    
    /**
    * The .NET Framework version. Supported values are v2.0 and v4.0.
    */
    public String getNetFrameworkVersion() { return this.netFrameworkVersion; }
    
    /**
    * The .NET Framework version. Supported values are v2.0 and v4.0.
    */
    public void setNetFrameworkVersion(String netFrameworkVersion) { this.netFrameworkVersion = netFrameworkVersion; }
    
    private Integer numberOfWorkers;
    
    /**
    * The number of web workers allotted to the web site. If the site mode is
    * Free, this value is 1. If the site mode is Shared, this value can range
    * from 1 through 6. If the site mode is Standard, this value can range
    * from 1 through 10.
    */
    public Integer getNumberOfWorkers() { return this.numberOfWorkers; }
    
    /**
    * The number of web workers allotted to the web site. If the site mode is
    * Free, this value is 1. If the site mode is Shared, this value can range
    * from 1 through 6. If the site mode is Standard, this value can range
    * from 1 through 10.
    */
    public void setNumberOfWorkers(Integer numberOfWorkers) { this.numberOfWorkers = numberOfWorkers; }
    
    private String phpVersion;
    
    /**
    * Supported values are an empty string (an empty string disables PHP), 5.3,
    * and 5.4.
    */
    public String getPhpVersion() { return this.phpVersion; }
    
    /**
    * Supported values are an empty string (an empty string disables PHP), 5.3,
    * and 5.4.
    */
    public void setPhpVersion(String phpVersion) { this.phpVersion = phpVersion; }
    
    private String publishingPassword;
    
    /**
    * Hash value of the password used for publishing the web site.
    */
    public String getPublishingPassword() { return this.publishingPassword; }
    
    /**
    * Hash value of the password used for publishing the web site.
    */
    public void setPublishingPassword(String publishingPassword) { this.publishingPassword = publishingPassword; }
    
    private String publishingUserName;
    
    /**
    * The username used for publishing the web site. This is normally a dollar
    * sign prepended to the web site name (for example, “$contoso”).
    */
    public String getPublishingUserName() { return this.publishingUserName; }
    
    /**
    * The username used for publishing the web site. This is normally a dollar
    * sign prepended to the web site name (for example, “$contoso”).
    */
    public void setPublishingUserName(String publishingUserName) { this.publishingUserName = publishingUserName; }
    
    private Boolean remoteDebuggingEnabled;
    
    /**
    * True remote debugging is enabled; otherwise, false.
    */
    public Boolean getRemoteDebuggingEnabled() { return this.remoteDebuggingEnabled; }
    
    /**
    * True remote debugging is enabled; otherwise, false.
    */
    public void setRemoteDebuggingEnabled(Boolean remoteDebuggingEnabled) { this.remoteDebuggingEnabled = remoteDebuggingEnabled; }
    
    private RemoteDebuggingVersion remoteDebuggingVersion;
    
    /**
    * True remote debugging version.
    */
    public RemoteDebuggingVersion getRemoteDebuggingVersion() { return this.remoteDebuggingVersion; }
    
    /**
    * True remote debugging version.
    */
    public void setRemoteDebuggingVersion(RemoteDebuggingVersion remoteDebuggingVersion) { this.remoteDebuggingVersion = remoteDebuggingVersion; }
    
    private Boolean requestTracingEnabled;
    
    /**
    * True if request tracing is enabled; otherwise, false.
    */
    public Boolean getRequestTracingEnabled() { return this.requestTracingEnabled; }
    
    /**
    * True if request tracing is enabled; otherwise, false.
    */
    public void setRequestTracingEnabled(Boolean requestTracingEnabled) { this.requestTracingEnabled = requestTracingEnabled; }
    
    private Calendar requestTracingExpirationTime;
    
    /**
    * Time remaining until request tracing expires.
    */
    public Calendar getRequestTracingExpirationTime() { return this.requestTracingExpirationTime; }
    
    /**
    * Time remaining until request tracing expires.
    */
    public void setRequestTracingExpirationTime(Calendar requestTracingExpirationTime) { this.requestTracingExpirationTime = requestTracingExpirationTime; }
    
    private String scmType;
    
    /**
    * The source control method that the web site is using (for example, Local
    * Git). If deployment from source control has not been set up for the web
    * site, this value is None.
    */
    public String getScmType() { return this.scmType; }
    
    /**
    * The source control method that the web site is using (for example, Local
    * Git). If deployment from source control has not been set up for the web
    * site, this value is None.
    */
    public void setScmType(String scmType) { this.scmType = scmType; }
    
    private Boolean use32BitWorkerProcess;
    
    /**
    * True if 32-bit mode is enabled; otherwise, false.
    */
    public Boolean getUse32BitWorkerProcess() { return this.use32BitWorkerProcess; }
    
    /**
    * True if 32-bit mode is enabled; otherwise, false.
    */
    public void setUse32BitWorkerProcess(Boolean use32BitWorkerProcess) { this.use32BitWorkerProcess = use32BitWorkerProcess; }
    
    private Boolean webSocketsEnabled;
    
    /**
    * True if Web Sockets are enabled; otherwise, false.
    */
    public Boolean getWebSocketsEnabled() { return this.webSocketsEnabled; }
    
    /**
    * True if Web Sockets are enabled; otherwise, false.
    */
    public void setWebSocketsEnabled(Boolean webSocketsEnabled) { this.webSocketsEnabled = webSocketsEnabled; }
    
    /**
    * Initializes a new instance of the WebSiteUpdateConfigurationParameters
    * class.
    *
    */
    public WebSiteUpdateConfigurationParameters()
    {
        this.appSettings = new HashMap<String, String>();
        this.connectionStrings = new ArrayList<WebSiteUpdateConfigurationParameters.ConnectionStringInfo>();
        this.defaultDocuments = new ArrayList<String>();
        this.handlerMappings = new ArrayList<WebSiteUpdateConfigurationParameters.HandlerMapping>();
        this.metadata = new HashMap<String, String>();
    }
    
    /**
    * Connection string for database and other external resources.
    */
    public static class ConnectionStringInfo
    {
        private String connectionString;
        
        /**
        * A database connection string.
        */
        public String getConnectionString() { return this.connectionString; }
        
        /**
        * A database connection string.
        */
        public void setConnectionString(String connectionString) { this.connectionString = connectionString; }
        
        private String name;
        
        /**
        * The name of the connection string.
        */
        public String getName() { return this.name; }
        
        /**
        * The name of the connection string.
        */
        public void setName(String name) { this.name = name; }
        
        private String type;
        
        /**
        * The type of the connection string (for example, "MySQL").
        */
        public String getType() { return this.type; }
        
        /**
        * The type of the connection string (for example, "MySQL").
        */
        public void setType(String type) { this.type = type; }
        
        /**
        * Initializes a new instance of the ConnectionStringInfo class.
        *
        */
        public ConnectionStringInfo()
        {
        }
    }
    
    /**
    * Specifies a custom executable program for handling requests for specific
    * file name extensions.
    */
    public static class HandlerMapping
    {
        private String arguments;
        
        /**
        * A string that contains optional arguments for the script processor
        * specified by the
        * SiteConfig.HandlerMappings.HandlerMapping.ScriptProcessor element.
        */
        public String getArguments() { return this.arguments; }
        
        /**
        * A string that contains optional arguments for the script processor
        * specified by the
        * SiteConfig.HandlerMappings.HandlerMapping.ScriptProcessor element.
        */
        public void setArguments(String arguments) { this.arguments = arguments; }
        
        private String extension;
        
        /**
        * A string that specifies the extension of the file type that the
        * script processor will handle (for example, *.php).
        */
        public String getExtension() { return this.extension; }
        
        /**
        * A string that specifies the extension of the file type that the
        * script processor will handle (for example, *.php).
        */
        public void setExtension(String extension) { this.extension = extension; }
        
        private String scriptProcessor;
        
        /**
        * The absolute path to the location of the executable file that will
        * handle the files specified in the
        * SiteConfig.HandlerMappings.HandlerMapping.Extension element.
        */
        public String getScriptProcessor() { return this.scriptProcessor; }
        
        /**
        * The absolute path to the location of the executable file that will
        * handle the files specified in the
        * SiteConfig.HandlerMappings.HandlerMapping.Extension element.
        */
        public void setScriptProcessor(String scriptProcessor) { this.scriptProcessor = scriptProcessor; }
        
        /**
        * Initializes a new instance of the HandlerMapping class.
        *
        */
        public HandlerMapping()
        {
        }
    }
}
