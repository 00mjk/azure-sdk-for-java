// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.websites.models;

import com.microsoft.windowsazure.management.OperationResponse;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;

/**
* The Get Web Site Historical Usage Metrics operation response.
*/
public class WebSiteGetHistoricalUsageMetricsResponse extends OperationResponse implements Iterable<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric>
{
    private ArrayList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric> usageMetrics;
    
    /**
    * Historical metric snapshots for the web site.
    */
    public ArrayList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric> getUsageMetrics() { return this.usageMetrics; }
    
    /**
    * Historical metric snapshots for the web site.
    */
    public void setUsageMetrics(ArrayList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric> usageMetrics) { this.usageMetrics = usageMetrics; }
    
    /**
    * Initializes a new instance of the
    * WebSiteGetHistoricalUsageMetricsResponse class.
    *
    */
    public WebSiteGetHistoricalUsageMetricsResponse()
    {
        this.usageMetrics = new ArrayList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric>();
    }
    
    /**
    * Gets the sequence of UsageMetrics.
    *
    */
    public Iterator<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric> iterator()
    {
        return this.getUsageMetrics().iterator();
    }
    
    /**
    * Historical metric snapshot for the web site.
    */
    public static class HistoricalUsageMetric
    {
        private String code;
        
        /**
        * Reports whether the metric data was returned successfully.
        */
        public String getCode() { return this.code; }
        
        /**
        * Reports whether the metric data was returned successfully.
        */
        public void setCode(String code) { this.code = code; }
        
        private WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData data;
        
        /**
        * Historical metric snapshot data for the web site.
        */
        public WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData getData() { return this.data; }
        
        /**
        * Historical metric snapshot data for the web site.
        */
        public void setData(WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData data) { this.data = data; }
        
        private String message;
        
        /**
        * A string for optional message content.
        */
        public String getMessage() { return this.message; }
        
        /**
        * A string for optional message content.
        */
        public void setMessage(String message) { this.message = message; }
        
        /**
        * Initializes a new instance of the HistoricalUsageMetric class.
        *
        */
        public HistoricalUsageMetric()
        {
        }
    }
    
    /**
    * Historical metric snapshot data for the web site.
    */
    public static class HistoricalUsageMetricData
    {
        private String displayName;
        
        /**
        * The display name of the metric, including spaces.
        */
        public String getDisplayName() { return this.displayName; }
        
        /**
        * The display name of the metric, including spaces.
        */
        public void setDisplayName(String displayName) { this.displayName = displayName; }
        
        private Calendar endTime;
        
        /**
        * The end time of the data reported.
        */
        public Calendar getEndTime() { return this.endTime; }
        
        /**
        * The end time of the data reported.
        */
        public void setEndTime(Calendar endTime) { this.endTime = endTime; }
        
        private String name;
        
        /**
        * The name of the metric.
        */
        public String getName() { return this.name; }
        
        /**
        * The name of the metric.
        */
        public void setName(String name) { this.name = name; }
        
        private String primaryAggregationType;
        
        /**
        * The primary data aggregation type. This value is usually Total.
        */
        public String getPrimaryAggregationType() { return this.primaryAggregationType; }
        
        /**
        * The primary data aggregation type. This value is usually Total.
        */
        public void setPrimaryAggregationType(String primaryAggregationType) { this.primaryAggregationType = primaryAggregationType; }
        
        private Calendar startTime;
        
        /**
        * The start time of the data reported.
        */
        public Calendar getStartTime() { return this.startTime; }
        
        /**
        * The start time of the data reported.
        */
        public void setStartTime(Calendar startTime) { this.startTime = startTime; }
        
        private String timeGrain;
        
        /**
        * Length of time (rollup) during which the information was gathered.
        * For more information, see Supported Rollups.
        */
        public String getTimeGrain() { return this.timeGrain; }
        
        /**
        * Length of time (rollup) during which the information was gathered.
        * For more information, see Supported Rollups.
        */
        public void setTimeGrain(String timeGrain) { this.timeGrain = timeGrain; }
        
        private String unit;
        
        /**
        * The unit of measurement for the metric (for example, milliseconds,
        * bytes, or count).
        */
        public String getUnit() { return this.unit; }
        
        /**
        * The unit of measurement for the metric (for example, milliseconds,
        * bytes, or count).
        */
        public void setUnit(String unit) { this.unit = unit; }
        
        private ArrayList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample> values;
        
        /**
        * One or more MetricSample elements.
        */
        public ArrayList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample> getValues() { return this.values; }
        
        /**
        * One or more MetricSample elements.
        */
        public void setValues(ArrayList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample> values) { this.values = values; }
        
        /**
        * Initializes a new instance of the HistoricalUsageMetricData class.
        *
        */
        public HistoricalUsageMetricData()
        {
            this.values = new ArrayList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample>();
        }
    }
    
    /**
    * Historical metric snapshot data sample.
    */
    public static class HistoricalUsageMetricSample
    {
        private int count;
        
        /**
        * The metric sample count. This value is usually 1.
        */
        public int getCount() { return this.count; }
        
        /**
        * The metric sample count. This value is usually 1.
        */
        public void setCount(int count) { this.count = count; }
        
        private String maximum;
        
        /**
        * Maximum value recorded.
        */
        public String getMaximum() { return this.maximum; }
        
        /**
        * Maximum value recorded.
        */
        public void setMaximum(String maximum) { this.maximum = maximum; }
        
        private String minimum;
        
        /**
        * Minimum value recorded.
        */
        public String getMinimum() { return this.minimum; }
        
        /**
        * Minimum value recorded.
        */
        public void setMinimum(String minimum) { this.minimum = minimum; }
        
        private Calendar timeCreated;
        
        /**
        * Time the metric was taken.
        */
        public Calendar getTimeCreated() { return this.timeCreated; }
        
        /**
        * Time the metric was taken.
        */
        public void setTimeCreated(Calendar timeCreated) { this.timeCreated = timeCreated; }
        
        private String total;
        
        /**
        * Value of the metric sample for the time taken.
        */
        public String getTotal() { return this.total; }
        
        /**
        * Value of the metric sample for the time taken.
        */
        public void setTotal(String total) { this.total = total; }
        
        /**
        * Initializes a new instance of the HistoricalUsageMetricSample class.
        *
        */
        public HistoricalUsageMetricSample()
        {
        }
    }
}
