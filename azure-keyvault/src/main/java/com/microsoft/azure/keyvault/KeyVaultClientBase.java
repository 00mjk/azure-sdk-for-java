package com.microsoft.azure.keyvault;


/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import com.microsoft.azure.AzureClient;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.keyvault.models.*;
import com.microsoft.azure.keyvault.webkey.*;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import rx.Observable;

import java.util.List;
import java.util.Map;

/**
 * The interface for KeyVaultClientBase class.
 */
public interface KeyVaultClientBase {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
     */
    RestClient restClient();

    /**
     * Gets the {@link AzureClient} used for long running operations.
     *
     * @return the azure client;
     */
    AzureClient getAzureClient();

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    String userAgent();

    /**
     * Gets Client API version..
     *
     * @return the apiVersion value.
     */
    String apiVersion();

    /**
     * Gets Gets or sets the preferred language for the response..
     *
     * @return the acceptLanguage value.
     */
    String acceptLanguage();

    /**
     * Sets Gets or sets the preferred language for the response..
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    KeyVaultClientBase withAcceptLanguage(String acceptLanguage);

    /**
     * Gets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    int longRunningOperationRetryTimeout();

    /**
     * Sets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    KeyVaultClientBase withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout);

    /**
     * Gets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @return the generateClientRequestId value.
     */
    boolean generateClientRequestId();

    /**
     * Sets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    KeyVaultClientBase withGenerateClientRequestId(boolean generateClientRequestId);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name for the new key. The system will generate the version name for the new key.
     * @param kty          The type of key to create. For valid key types, see JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
     * @return the KeyBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyBundle createKey(String vaultBaseUrl, String keyName, JsonWebKeyType kty);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name for the new key. The system will generate the version name for the new key.
     * @param kty             The type of key to create. For valid key types, see JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyBundle> createKeyAsync(String vaultBaseUrl, String keyName, JsonWebKeyType kty, final ServiceCallback<KeyBundle> serviceCallback);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name for the new key. The system will generate the version name for the new key.
     * @param kty          The type of key to create. For valid key types, see JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyBundle> createKeyAsync(String vaultBaseUrl, String keyName, JsonWebKeyType kty);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name for the new key. The system will generate the version name for the new key.
     * @param kty          The type of key to create. For valid key types, see JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyBundle>> createKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName, JsonWebKeyType kty);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param keyName       The name for the new key. The system will generate the version name for the new key.
     * @param kty           The type of key to create. For valid key types, see JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
     * @param keySize       The key size in bytes. For example, 1024 or 2048.
     * @param keyOps        the List&lt;JsonWebKeyOperation&gt; value
     * @param keyAttributes the KeyAttributes value
     * @param tags          Application specific metadata in the form of key-value pairs.
     * @return the KeyBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyBundle createKey(String vaultBaseUrl, String keyName, JsonWebKeyType kty, Integer keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name for the new key. The system will generate the version name for the new key.
     * @param kty             The type of key to create. For valid key types, see JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
     * @param keySize         The key size in bytes. For example, 1024 or 2048.
     * @param keyOps          the List&lt;JsonWebKeyOperation&gt; value
     * @param keyAttributes   the KeyAttributes value
     * @param tags            Application specific metadata in the form of key-value pairs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyBundle> createKeyAsync(String vaultBaseUrl, String keyName, JsonWebKeyType kty, Integer keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags, final ServiceCallback<KeyBundle> serviceCallback);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param keyName       The name for the new key. The system will generate the version name for the new key.
     * @param kty           The type of key to create. For valid key types, see JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
     * @param keySize       The key size in bytes. For example, 1024 or 2048.
     * @param keyOps        the List&lt;JsonWebKeyOperation&gt; value
     * @param keyAttributes the KeyAttributes value
     * @param tags          Application specific metadata in the form of key-value pairs.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyBundle> createKeyAsync(String vaultBaseUrl, String keyName, JsonWebKeyType kty, Integer keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param keyName       The name for the new key. The system will generate the version name for the new key.
     * @param kty           The type of key to create. For valid key types, see JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
     * @param keySize       The key size in bytes. For example, 1024 or 2048.
     * @param keyOps        the List&lt;JsonWebKeyOperation&gt; value
     * @param keyAttributes the KeyAttributes value
     * @param tags          Application specific metadata in the form of key-value pairs.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyBundle>> createKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName, JsonWebKeyType kty, Integer keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      Name for the imported key.
     * @param key          The Json web key
     * @return the KeyBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyBundle importKey(String vaultBaseUrl, String keyName, JsonWebKey key);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         Name for the imported key.
     * @param key             The Json web key
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyBundle> importKeyAsync(String vaultBaseUrl, String keyName, JsonWebKey key, final ServiceCallback<KeyBundle> serviceCallback);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      Name for the imported key.
     * @param key          The Json web key
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyBundle> importKeyAsync(String vaultBaseUrl, String keyName, JsonWebKey key);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      Name for the imported key.
     * @param key          The Json web key
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyBundle>> importKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName, JsonWebKey key);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param keyName       Name for the imported key.
     * @param key           The Json web key
     * @param hsm           Whether to import as a hardware key (HSM) or software key.
     * @param keyAttributes The key management attributes.
     * @param tags          Application specific metadata in the form of key-value pairs.
     * @return the KeyBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyBundle importKey(String vaultBaseUrl, String keyName, JsonWebKey key, Boolean hsm, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         Name for the imported key.
     * @param key             The Json web key
     * @param hsm             Whether to import as a hardware key (HSM) or software key.
     * @param keyAttributes   The key management attributes.
     * @param tags            Application specific metadata in the form of key-value pairs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyBundle> importKeyAsync(String vaultBaseUrl, String keyName, JsonWebKey key, Boolean hsm, KeyAttributes keyAttributes, Map<String, String> tags, final ServiceCallback<KeyBundle> serviceCallback);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param keyName       Name for the imported key.
     * @param key           The Json web key
     * @param hsm           Whether to import as a hardware key (HSM) or software key.
     * @param keyAttributes The key management attributes.
     * @param tags          Application specific metadata in the form of key-value pairs.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyBundle> importKeyAsync(String vaultBaseUrl, String keyName, JsonWebKey key, Boolean hsm, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param keyName       Name for the imported key.
     * @param key           The Json web key
     * @param hsm           Whether to import as a hardware key (HSM) or software key.
     * @param keyAttributes The key management attributes.
     * @param tags          Application specific metadata in the form of key-value pairs.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyBundle>> importKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName, JsonWebKey key, Boolean hsm, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key to delete.
     * @return the KeyBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyBundle deleteKey(String vaultBaseUrl, String keyName);

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyBundle> deleteKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<KeyBundle> serviceCallback);

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key to delete.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyBundle> deleteKeyAsync(String vaultBaseUrl, String keyName);

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key to delete.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyBundle>> deleteKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of key to update.
     * @param keyVersion   The version of the key to update.
     * @return the KeyBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyBundle updateKey(String vaultBaseUrl, String keyName, String keyVersion);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of key to update.
     * @param keyVersion      The version of the key to update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyBundle> updateKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, final ServiceCallback<KeyBundle> serviceCallback);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of key to update.
     * @param keyVersion   The version of the key to update.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyBundle> updateKeyAsync(String vaultBaseUrl, String keyName, String keyVersion);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of key to update.
     * @param keyVersion   The version of the key to update.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyBundle>> updateKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName, String keyVersion);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param keyName       The name of key to update.
     * @param keyVersion    The version of the key to update.
     * @param keyOps        Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     * @param keyAttributes the KeyAttributes value
     * @param tags          Application specific metadata in the form of key-value pairs.
     * @return the KeyBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyBundle updateKey(String vaultBaseUrl, String keyName, String keyVersion, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of key to update.
     * @param keyVersion      The version of the key to update.
     * @param keyOps          Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     * @param keyAttributes   the KeyAttributes value
     * @param tags            Application specific metadata in the form of key-value pairs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyBundle> updateKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags, final ServiceCallback<KeyBundle> serviceCallback);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param keyName       The name of key to update.
     * @param keyVersion    The version of the key to update.
     * @param keyOps        Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     * @param keyAttributes the KeyAttributes value
     * @param tags          Application specific metadata in the form of key-value pairs.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyBundle> updateKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param keyName       The name of key to update.
     * @param keyVersion    The version of the key to update.
     * @param keyOps        Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     * @param keyAttributes the KeyAttributes value
     * @param tags          Application specific metadata in the form of key-value pairs.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyBundle>> updateKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName, String keyVersion, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key to get.
     * @param keyVersion   Adding the version parameter retrieves a specific version of a key.
     * @return the KeyBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyBundle getKey(String vaultBaseUrl, String keyName, String keyVersion);

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key to get.
     * @param keyVersion      Adding the version parameter retrieves a specific version of a key.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyBundle> getKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, final ServiceCallback<KeyBundle> serviceCallback);

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key to get.
     * @param keyVersion   Adding the version parameter retrieves a specific version of a key.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyBundle> getKeyAsync(String vaultBaseUrl, String keyName, String keyVersion);

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key to get.
     * @param keyVersion   Adding the version parameter retrieves a specific version of a key.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyBundle>> getKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName, String keyVersion);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @return the PagedList&lt;KeyItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<KeyItem> getKeyVersions(final String vaultBaseUrl, final String keyName);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<KeyItem>> getKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final ListOperationCallback<KeyItem> serviceCallback);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<KeyItem>> getKeyVersionsAsync(final String vaultBaseUrl, final String keyName);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<KeyItem>>> getKeyVersionsWithServiceResponseAsync(final String vaultBaseUrl, final String keyName);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the PagedList&lt;KeyItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<KeyItem> getKeyVersions(final String vaultBaseUrl, final String keyName, final Integer maxresults);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key.
     * @param maxresults      Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<KeyItem>> getKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final Integer maxresults, final ListOperationCallback<KeyItem> serviceCallback);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<KeyItem>> getKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final Integer maxresults);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<KeyItem>>> getKeyVersionsWithServiceResponseAsync(final String vaultBaseUrl, final String keyName, final Integer maxresults);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the PagedList&lt;KeyItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<KeyItem> getKeys(final String vaultBaseUrl);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<KeyItem>> getKeysAsync(final String vaultBaseUrl, final ListOperationCallback<KeyItem> serviceCallback);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<KeyItem>> getKeysAsync(final String vaultBaseUrl);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<KeyItem>>> getKeysWithServiceResponseAsync(final String vaultBaseUrl);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the PagedList&lt;KeyItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<KeyItem> getKeys(final String vaultBaseUrl, final Integer maxresults);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults      Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<KeyItem>> getKeysAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<KeyItem> serviceCallback);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<KeyItem>> getKeysAsync(final String vaultBaseUrl, final Integer maxresults);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<KeyItem>>> getKeysWithServiceResponseAsync(final String vaultBaseUrl, final Integer maxresults);

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @return the BackupKeyResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    BackupKeyResult backupKey(String vaultBaseUrl, String keyName);

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<BackupKeyResult> backupKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<BackupKeyResult> serviceCallback);

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @return the observable to the BackupKeyResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<BackupKeyResult> backupKeyAsync(String vaultBaseUrl, String keyName);

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @return the observable to the BackupKeyResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<BackupKeyResult>> backupKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName);

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyBundleBackup The backup blob associated with a key bundle.
     * @return the KeyBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyBundle restoreKey(String vaultBaseUrl, byte[] keyBundleBackup);

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyBundleBackup The backup blob associated with a key bundle.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyBundle> restoreKeyAsync(String vaultBaseUrl, byte[] keyBundleBackup, final ServiceCallback<KeyBundle> serviceCallback);

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyBundleBackup The backup blob associated with a key bundle.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyBundle> restoreKeyAsync(String vaultBaseUrl, byte[] keyBundleBackup);

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyBundleBackup The backup blob associated with a key bundle.
     * @return the observable to the KeyBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyBundle>> restoreKeyWithServiceResponseAsync(String vaultBaseUrl, byte[] keyBundleBackup);

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the KeyOperationResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyOperationResult encrypt(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key.
     * @param keyVersion      The version of the key.
     * @param algorithm       algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value           the Base64Url value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyOperationResult> encryptAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback);

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the observable to the KeyOperationResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyOperationResult> encryptAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the observable to the KeyOperationResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyOperationResult>> encryptWithServiceResponseAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the KeyOperationResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyOperationResult decrypt(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key.
     * @param keyVersion      The version of the key.
     * @param algorithm       algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value           the Base64Url value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyOperationResult> decryptAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback);

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the observable to the KeyOperationResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyOperationResult> decryptAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the observable to the KeyOperationResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyOperationResult>> decryptWithServiceResponseAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
     * @param value        the Base64Url value
     * @return the KeyOperationResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyOperationResult sign(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeySignatureAlgorithm algorithm, byte[] value);

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key.
     * @param keyVersion      The version of the key.
     * @param algorithm       The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
     * @param value           the Base64Url value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyOperationResult> signAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeySignatureAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback);

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
     * @param value        the Base64Url value
     * @return the observable to the KeyOperationResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyOperationResult> signAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeySignatureAlgorithm algorithm, byte[] value);

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
     * @param value        the Base64Url value
     * @return the observable to the KeyOperationResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyOperationResult>> signWithServiceResponseAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeySignatureAlgorithm algorithm, byte[] value);

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
     * @param digest       The digest used for signing.
     * @param signature    The signature to be verified.
     * @return the KeyVerifyResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyVerifyResult verify(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature);

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key.
     * @param keyVersion      The version of the key.
     * @param algorithm       The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
     * @param digest          The digest used for signing.
     * @param signature       The signature to be verified.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyVerifyResult> verifyAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature, final ServiceCallback<KeyVerifyResult> serviceCallback);

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
     * @param digest       The digest used for signing.
     * @param signature    The signature to be verified.
     * @return the observable to the KeyVerifyResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyVerifyResult> verifyAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature);

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
     * @param digest       The digest used for signing.
     * @param signature    The signature to be verified.
     * @return the observable to the KeyVerifyResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyVerifyResult>> verifyWithServiceResponseAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature);

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the KeyOperationResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyOperationResult wrapKey(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key.
     * @param keyVersion      The version of the key.
     * @param algorithm       algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value           the Base64Url value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyOperationResult> wrapKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback);

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the observable to the KeyOperationResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyOperationResult> wrapKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the observable to the KeyOperationResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyOperationResult>> wrapKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the KeyOperationResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    KeyOperationResult unwrapKey(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param keyName         The name of the key.
     * @param keyVersion      The version of the key.
     * @param algorithm       algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value           the Base64Url value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<KeyOperationResult> unwrapKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback);

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the observable to the KeyOperationResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<KeyOperationResult> unwrapKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName      The name of the key.
     * @param keyVersion   The version of the key.
     * @param algorithm    algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
     * @param value        the Base64Url value
     * @return the observable to the KeyOperationResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<KeyOperationResult>> unwrapKeyWithServiceResponseAsync(String vaultBaseUrl, String keyName, String keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value);

    /**
     * Sets a secret in a specified key vault.
     * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @param value        The value of the secret.
     * @return the SecretBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    SecretBundle setSecret(String vaultBaseUrl, String secretName, String value);

    /**
     * Sets a secret in a specified key vault.
     * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param secretName      The name of the secret.
     * @param value           The value of the secret.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<SecretBundle> setSecretAsync(String vaultBaseUrl, String secretName, String value, final ServiceCallback<SecretBundle> serviceCallback);

    /**
     * Sets a secret in a specified key vault.
     * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @param value        The value of the secret.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<SecretBundle> setSecretAsync(String vaultBaseUrl, String secretName, String value);

    /**
     * Sets a secret in a specified key vault.
     * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @param value        The value of the secret.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<SecretBundle>> setSecretWithServiceResponseAsync(String vaultBaseUrl, String secretName, String value);

    /**
     * Sets a secret in a specified key vault.
     * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret.
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param secretName       The name of the secret.
     * @param value            The value of the secret.
     * @param tags             Application specific metadata in the form of key-value pairs.
     * @param contentType      Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @return the SecretBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    SecretBundle setSecret(String vaultBaseUrl, String secretName, String value, Map<String, String> tags, String contentType, SecretAttributes secretAttributes);

    /**
     * Sets a secret in a specified key vault.
     * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret.
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param secretName       The name of the secret.
     * @param value            The value of the secret.
     * @param tags             Application specific metadata in the form of key-value pairs.
     * @param contentType      Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param serviceCallback  the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<SecretBundle> setSecretAsync(String vaultBaseUrl, String secretName, String value, Map<String, String> tags, String contentType, SecretAttributes secretAttributes, final ServiceCallback<SecretBundle> serviceCallback);

    /**
     * Sets a secret in a specified key vault.
     * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret.
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param secretName       The name of the secret.
     * @param value            The value of the secret.
     * @param tags             Application specific metadata in the form of key-value pairs.
     * @param contentType      Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<SecretBundle> setSecretAsync(String vaultBaseUrl, String secretName, String value, Map<String, String> tags, String contentType, SecretAttributes secretAttributes);

    /**
     * Sets a secret in a specified key vault.
     * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret.
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param secretName       The name of the secret.
     * @param value            The value of the secret.
     * @param tags             Application specific metadata in the form of key-value pairs.
     * @param contentType      Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<SecretBundle>> setSecretWithServiceResponseAsync(String vaultBaseUrl, String secretName, String value, Map<String, String> tags, String contentType, SecretAttributes secretAttributes);

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @return the SecretBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    SecretBundle deleteSecret(String vaultBaseUrl, String secretName);

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param secretName      The name of the secret.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<SecretBundle> deleteSecretAsync(String vaultBaseUrl, String secretName, final ServiceCallback<SecretBundle> serviceCallback);

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<SecretBundle> deleteSecretAsync(String vaultBaseUrl, String secretName);

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<SecretBundle>> deleteSecretWithServiceResponseAsync(String vaultBaseUrl, String secretName);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param secretName    The name of the secret.
     * @param secretVersion The version of the secret.
     * @return the SecretBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    SecretBundle updateSecret(String vaultBaseUrl, String secretName, String secretVersion);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param secretName      The name of the secret.
     * @param secretVersion   The version of the secret.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<SecretBundle> updateSecretAsync(String vaultBaseUrl, String secretName, String secretVersion, final ServiceCallback<SecretBundle> serviceCallback);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param secretName    The name of the secret.
     * @param secretVersion The version of the secret.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<SecretBundle> updateSecretAsync(String vaultBaseUrl, String secretName, String secretVersion);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param secretName    The name of the secret.
     * @param secretVersion The version of the secret.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<SecretBundle>> updateSecretWithServiceResponseAsync(String vaultBaseUrl, String secretName, String secretVersion);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed.
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param secretName       The name of the secret.
     * @param secretVersion    The version of the secret.
     * @param contentType      Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param tags             Application specific metadata in the form of key-value pairs.
     * @return the SecretBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    SecretBundle updateSecret(String vaultBaseUrl, String secretName, String secretVersion, String contentType, SecretAttributes secretAttributes, Map<String, String> tags);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed.
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param secretName       The name of the secret.
     * @param secretVersion    The version of the secret.
     * @param contentType      Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param tags             Application specific metadata in the form of key-value pairs.
     * @param serviceCallback  the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<SecretBundle> updateSecretAsync(String vaultBaseUrl, String secretName, String secretVersion, String contentType, SecretAttributes secretAttributes, Map<String, String> tags, final ServiceCallback<SecretBundle> serviceCallback);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed.
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param secretName       The name of the secret.
     * @param secretVersion    The version of the secret.
     * @param contentType      Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param tags             Application specific metadata in the form of key-value pairs.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<SecretBundle> updateSecretAsync(String vaultBaseUrl, String secretName, String secretVersion, String contentType, SecretAttributes secretAttributes, Map<String, String> tags);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed.
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param secretName       The name of the secret.
     * @param secretVersion    The version of the secret.
     * @param contentType      Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param tags             Application specific metadata in the form of key-value pairs.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<SecretBundle>> updateSecretWithServiceResponseAsync(String vaultBaseUrl, String secretName, String secretVersion, String contentType, SecretAttributes secretAttributes, Map<String, String> tags);

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param secretName    The name of the secret.
     * @param secretVersion The version of the secret.
     * @return the SecretBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    SecretBundle getSecret(String vaultBaseUrl, String secretName, String secretVersion);

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param secretName      The name of the secret.
     * @param secretVersion   The version of the secret.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<SecretBundle> getSecretAsync(String vaultBaseUrl, String secretName, String secretVersion, final ServiceCallback<SecretBundle> serviceCallback);

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param secretName    The name of the secret.
     * @param secretVersion The version of the secret.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<SecretBundle> getSecretAsync(String vaultBaseUrl, String secretName, String secretVersion);

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault.
     *
     * @param vaultBaseUrl  The vault name, for example https://myvault.vault.azure.net.
     * @param secretName    The name of the secret.
     * @param secretVersion The version of the secret.
     * @return the observable to the SecretBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<SecretBundle>> getSecretWithServiceResponseAsync(String vaultBaseUrl, String secretName, String secretVersion);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the PagedList&lt;SecretItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<SecretItem> getSecrets(final String vaultBaseUrl);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<SecretItem>> getSecretsAsync(final String vaultBaseUrl, final ListOperationCallback<SecretItem> serviceCallback);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<SecretItem>> getSecretsAsync(final String vaultBaseUrl);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<SecretItem>>> getSecretsWithServiceResponseAsync(final String vaultBaseUrl);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the PagedList&lt;SecretItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<SecretItem> getSecrets(final String vaultBaseUrl, final Integer maxresults);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults      Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<SecretItem>> getSecretsAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<SecretItem> serviceCallback);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<SecretItem>> getSecretsAsync(final String vaultBaseUrl, final Integer maxresults);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<SecretItem>>> getSecretsWithServiceResponseAsync(final String vaultBaseUrl, final Integer maxresults);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @return the PagedList&lt;SecretItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<SecretItem> getSecretVersions(final String vaultBaseUrl, final String secretName);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param secretName      The name of the secret.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<SecretItem>> getSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final ListOperationCallback<SecretItem> serviceCallback);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<SecretItem>> getSecretVersionsAsync(final String vaultBaseUrl, final String secretName);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<SecretItem>>> getSecretVersionsWithServiceResponseAsync(final String vaultBaseUrl, final String secretName);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the PagedList&lt;SecretItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<SecretItem> getSecretVersions(final String vaultBaseUrl, final String secretName, final Integer maxresults);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param secretName      The name of the secret.
     * @param maxresults      Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<SecretItem>> getSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final Integer maxresults, final ListOperationCallback<SecretItem> serviceCallback);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<SecretItem>> getSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final Integer maxresults);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName   The name of the secret.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<SecretItem>>> getSecretVersionsWithServiceResponseAsync(final String vaultBaseUrl, final String secretName, final Integer maxresults);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the PagedList&lt;CertificateItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<CertificateItem> getCertificates(final String vaultBaseUrl);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<CertificateItem>> getCertificatesAsync(final String vaultBaseUrl, final ListOperationCallback<CertificateItem> serviceCallback);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<CertificateItem>> getCertificatesAsync(final String vaultBaseUrl);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<CertificateItem>>> getCertificatesWithServiceResponseAsync(final String vaultBaseUrl);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the PagedList&lt;CertificateItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<CertificateItem> getCertificates(final String vaultBaseUrl, final Integer maxresults);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults      Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<CertificateItem>> getCertificatesAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<CertificateItem> serviceCallback);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<CertificateItem>> getCertificatesAsync(final String vaultBaseUrl, final Integer maxresults);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<CertificateItem>>> getCertificatesWithServiceResponseAsync(final String vaultBaseUrl, final Integer maxresults);

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the CertificateBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateBundle deleteCertificate(String vaultBaseUrl, String certificateName);

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateBundle> deleteCertificateAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateBundle> serviceCallback);

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateBundle> deleteCertificateAsync(String vaultBaseUrl, String certificateName);

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateBundle>> deleteCertificateWithServiceResponseAsync(String vaultBaseUrl, String certificateName);

    /**
     * Sets the certificate contacts for the specified key vault.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param contacts     The contacts for the key vault certificate.
     * @return the Contacts object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Contacts setCertificateContacts(String vaultBaseUrl, Contacts contacts);

    /**
     * Sets the certificate contacts for the specified key vault.
     * .
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param contacts        The contacts for the key vault certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Contacts> setCertificateContactsAsync(String vaultBaseUrl, Contacts contacts, final ServiceCallback<Contacts> serviceCallback);

    /**
     * Sets the certificate contacts for the specified key vault.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param contacts     The contacts for the key vault certificate.
     * @return the observable to the Contacts object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Contacts> setCertificateContactsAsync(String vaultBaseUrl, Contacts contacts);

    /**
     * Sets the certificate contacts for the specified key vault.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param contacts     The contacts for the key vault certificate.
     * @return the observable to the Contacts object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Contacts>> setCertificateContactsWithServiceResponseAsync(String vaultBaseUrl, Contacts contacts);

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the Contacts object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Contacts getCertificateContacts(String vaultBaseUrl);

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Contacts> getCertificateContactsAsync(String vaultBaseUrl, final ServiceCallback<Contacts> serviceCallback);

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the Contacts object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Contacts> getCertificateContactsAsync(String vaultBaseUrl);

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the Contacts object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Contacts>> getCertificateContactsWithServiceResponseAsync(String vaultBaseUrl);

    /**
     * Deletes the certificate contacts for a specified key vault.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the Contacts object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Contacts deleteCertificateContacts(String vaultBaseUrl);

    /**
     * Deletes the certificate contacts for a specified key vault.
     * .
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Contacts> deleteCertificateContactsAsync(String vaultBaseUrl, final ServiceCallback<Contacts> serviceCallback);

    /**
     * Deletes the certificate contacts for a specified key vault.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the Contacts object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Contacts> deleteCertificateContactsAsync(String vaultBaseUrl);

    /**
     * Deletes the certificate contacts for a specified key vault.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the Contacts object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Contacts>> deleteCertificateContactsWithServiceResponseAsync(String vaultBaseUrl);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the PagedList&lt;CertificateIssuerItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<CertificateIssuerItem> getCertificateIssuers(final String vaultBaseUrl);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<CertificateIssuerItem>> getCertificateIssuersAsync(final String vaultBaseUrl, final ListOperationCallback<CertificateIssuerItem> serviceCallback);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the PagedList&lt;CertificateIssuerItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<CertificateIssuerItem>> getCertificateIssuersAsync(final String vaultBaseUrl);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @return the observable to the PagedList&lt;CertificateIssuerItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<CertificateIssuerItem>>> getCertificateIssuersWithServiceResponseAsync(final String vaultBaseUrl);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the PagedList&lt;CertificateIssuerItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<CertificateIssuerItem> getCertificateIssuers(final String vaultBaseUrl, final Integer maxresults);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults      Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<CertificateIssuerItem>> getCertificateIssuersAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<CertificateIssuerItem> serviceCallback);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;CertificateIssuerItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<CertificateIssuerItem>> getCertificateIssuersAsync(final String vaultBaseUrl, final Integer maxresults);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults   Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;CertificateIssuerItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<CertificateIssuerItem>>> getCertificateIssuersWithServiceResponseAsync(final String vaultBaseUrl, final Integer maxresults);

    /**
     * Sets the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @param provider     The issuer provider.
     * @return the IssuerBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IssuerBundle setCertificateIssuer(String vaultBaseUrl, String issuerName, String provider);

    /**
     * Sets the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName      The name of the issuer.
     * @param provider        The issuer provider.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IssuerBundle> setCertificateIssuerAsync(String vaultBaseUrl, String issuerName, String provider, final ServiceCallback<IssuerBundle> serviceCallback);

    /**
     * Sets the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @param provider     The issuer provider.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IssuerBundle> setCertificateIssuerAsync(String vaultBaseUrl, String issuerName, String provider);

    /**
     * Sets the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @param provider     The issuer provider.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IssuerBundle>> setCertificateIssuerWithServiceResponseAsync(String vaultBaseUrl, String issuerName, String provider);

    /**
     * Sets the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl        The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName          The name of the issuer.
     * @param provider            The issuer provider.
     * @param credentials         The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes          Attributes of the issuer object.
     * @return the IssuerBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IssuerBundle setCertificateIssuer(String vaultBaseUrl, String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Sets the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl        The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName          The name of the issuer.
     * @param provider            The issuer provider.
     * @param credentials         The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes          Attributes of the issuer object.
     * @param serviceCallback     the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IssuerBundle> setCertificateIssuerAsync(String vaultBaseUrl, String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes, final ServiceCallback<IssuerBundle> serviceCallback);

    /**
     * Sets the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl        The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName          The name of the issuer.
     * @param provider            The issuer provider.
     * @param credentials         The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes          Attributes of the issuer object.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IssuerBundle> setCertificateIssuerAsync(String vaultBaseUrl, String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Sets the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl        The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName          The name of the issuer.
     * @param provider            The issuer provider.
     * @param credentials         The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes          Attributes of the issuer object.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IssuerBundle>> setCertificateIssuerWithServiceResponseAsync(String vaultBaseUrl, String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Updates the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @return the IssuerBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IssuerBundle updateCertificateIssuer(String vaultBaseUrl, String issuerName);

    /**
     * Updates the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName      The name of the issuer.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IssuerBundle> updateCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback);

    /**
     * Updates the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IssuerBundle> updateCertificateIssuerAsync(String vaultBaseUrl, String issuerName);

    /**
     * Updates the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IssuerBundle>> updateCertificateIssuerWithServiceResponseAsync(String vaultBaseUrl, String issuerName);

    /**
     * Updates the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl        The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName          The name of the issuer.
     * @param provider            The issuer provider.
     * @param credentials         The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes          Attributes of the issuer object.
     * @return the IssuerBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IssuerBundle updateCertificateIssuer(String vaultBaseUrl, String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Updates the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl        The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName          The name of the issuer.
     * @param provider            The issuer provider.
     * @param credentials         The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes          Attributes of the issuer object.
     * @param serviceCallback     the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IssuerBundle> updateCertificateIssuerAsync(String vaultBaseUrl, String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes, final ServiceCallback<IssuerBundle> serviceCallback);

    /**
     * Updates the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl        The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName          The name of the issuer.
     * @param provider            The issuer provider.
     * @param credentials         The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes          Attributes of the issuer object.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IssuerBundle> updateCertificateIssuerAsync(String vaultBaseUrl, String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Updates the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl        The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName          The name of the issuer.
     * @param provider            The issuer provider.
     * @param credentials         The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes          Attributes of the issuer object.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IssuerBundle>> updateCertificateIssuerWithServiceResponseAsync(String vaultBaseUrl, String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @return the IssuerBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IssuerBundle getCertificateIssuer(String vaultBaseUrl, String issuerName);

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName      The name of the issuer.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IssuerBundle> getCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback);

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IssuerBundle> getCertificateIssuerAsync(String vaultBaseUrl, String issuerName);

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IssuerBundle>> getCertificateIssuerWithServiceResponseAsync(String vaultBaseUrl, String issuerName);

    /**
     * Deletes the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @return the IssuerBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IssuerBundle deleteCertificateIssuer(String vaultBaseUrl, String issuerName);

    /**
     * Deletes the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName      The name of the issuer.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IssuerBundle> deleteCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback);

    /**
     * Deletes the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IssuerBundle> deleteCertificateIssuerAsync(String vaultBaseUrl, String issuerName);

    /**
     * Deletes the specified certificate issuer.
     * .
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName   The name of the issuer.
     * @return the observable to the IssuerBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IssuerBundle>> deleteCertificateIssuerWithServiceResponseAsync(String vaultBaseUrl, String issuerName);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the CertificateOperation object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateOperation createCertificate(String vaultBaseUrl, String certificateName);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateOperation> createCertificateAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the observable to the CertificateOperation object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateOperation> createCertificateAsync(String vaultBaseUrl, String certificateName);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the observable to the CertificateOperation object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateOperation>> createCertificateWithServiceResponseAsync(String vaultBaseUrl, String certificateName);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created.
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param certificatePolicy     The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @return the CertificateOperation object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateOperation createCertificate(String vaultBaseUrl, String certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created.
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param certificatePolicy     The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @param serviceCallback       the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateOperation> createCertificateAsync(String vaultBaseUrl, String certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags, final ServiceCallback<CertificateOperation> serviceCallback);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created.
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param certificatePolicy     The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @return the observable to the CertificateOperation object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateOperation> createCertificateAsync(String vaultBaseUrl, String certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created.
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param certificatePolicy     The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @return the observable to the CertificateOperation object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateOperation>> createCertificateWithServiceResponseAsync(String vaultBaseUrl, String certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates.
     *
     * @param vaultBaseUrl             The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName          The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @return the CertificateBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateBundle importCertificate(String vaultBaseUrl, String certificateName, String base64EncodedCertificate);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates.
     *
     * @param vaultBaseUrl             The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName          The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param serviceCallback          the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateBundle> importCertificateAsync(String vaultBaseUrl, String certificateName, String base64EncodedCertificate, final ServiceCallback<CertificateBundle> serviceCallback);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates.
     *
     * @param vaultBaseUrl             The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName          The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateBundle> importCertificateAsync(String vaultBaseUrl, String certificateName, String base64EncodedCertificate);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates.
     *
     * @param vaultBaseUrl             The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName          The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateBundle>> importCertificateWithServiceResponseAsync(String vaultBaseUrl, String certificateName, String base64EncodedCertificate);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates.
     *
     * @param vaultBaseUrl             The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName          The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param password                 If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
     * @param certificatePolicy        The management policy for the certificate.
     * @param certificateAttributes    The attributes of the certificate (optional).
     * @param tags                     Application specific metadata in the form of key-value pairs.
     * @return the CertificateBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateBundle importCertificate(String vaultBaseUrl, String certificateName, String base64EncodedCertificate, String password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates.
     *
     * @param vaultBaseUrl             The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName          The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param password                 If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
     * @param certificatePolicy        The management policy for the certificate.
     * @param certificateAttributes    The attributes of the certificate (optional).
     * @param tags                     Application specific metadata in the form of key-value pairs.
     * @param serviceCallback          the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateBundle> importCertificateAsync(String vaultBaseUrl, String certificateName, String base64EncodedCertificate, String password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags, final ServiceCallback<CertificateBundle> serviceCallback);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates.
     *
     * @param vaultBaseUrl             The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName          The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param password                 If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
     * @param certificatePolicy        The management policy for the certificate.
     * @param certificateAttributes    The attributes of the certificate (optional).
     * @param tags                     Application specific metadata in the form of key-value pairs.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateBundle> importCertificateAsync(String vaultBaseUrl, String certificateName, String base64EncodedCertificate, String password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates.
     *
     * @param vaultBaseUrl             The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName          The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param password                 If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
     * @param certificatePolicy        The management policy for the certificate.
     * @param certificateAttributes    The attributes of the certificate (optional).
     * @param tags                     Application specific metadata in the form of key-value pairs.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateBundle>> importCertificateWithServiceResponseAsync(String vaultBaseUrl, String certificateName, String base64EncodedCertificate, String password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the PagedList&lt;CertificateItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<CertificateItem> getCertificateVersions(final String vaultBaseUrl, final String certificateName);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<CertificateItem>> getCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final ListOperationCallback<CertificateItem> serviceCallback);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<CertificateItem>> getCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<CertificateItem>>> getCertificateVersionsWithServiceResponseAsync(final String vaultBaseUrl, final String certificateName);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param maxresults      Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the PagedList&lt;CertificateItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<CertificateItem> getCertificateVersions(final String vaultBaseUrl, final String certificateName, final Integer maxresults);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param maxresults      Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<CertificateItem>> getCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final Integer maxresults, final ListOperationCallback<CertificateItem> serviceCallback);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param maxresults      Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<CertificateItem>> getCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final Integer maxresults);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param maxresults      Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<CertificateItem>>> getCertificateVersionsWithServiceResponseAsync(final String vaultBaseUrl, final String certificateName, final Integer maxresults);

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @return the CertificatePolicy object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificatePolicy getCertificatePolicy(String vaultBaseUrl, String certificateName);

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificatePolicy> getCertificatePolicyAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificatePolicy> serviceCallback);

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @return the observable to the CertificatePolicy object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificatePolicy> getCertificatePolicyAsync(String vaultBaseUrl, String certificateName);

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @return the observable to the CertificatePolicy object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificatePolicy>> getCertificatePolicyWithServiceResponseAsync(String vaultBaseUrl, String certificateName);

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null.
     *
     * @param vaultBaseUrl      The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName   The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @return the CertificatePolicy object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificatePolicy updateCertificatePolicy(String vaultBaseUrl, String certificateName, CertificatePolicy certificatePolicy);

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null.
     *
     * @param vaultBaseUrl      The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName   The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @param serviceCallback   the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificatePolicy> updateCertificatePolicyAsync(String vaultBaseUrl, String certificateName, CertificatePolicy certificatePolicy, final ServiceCallback<CertificatePolicy> serviceCallback);

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null.
     *
     * @param vaultBaseUrl      The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName   The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @return the observable to the CertificatePolicy object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificatePolicy> updateCertificatePolicyAsync(String vaultBaseUrl, String certificateName, CertificatePolicy certificatePolicy);

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null.
     *
     * @param vaultBaseUrl      The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName   The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @return the observable to the CertificatePolicy object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificatePolicy>> updateCertificatePolicyWithServiceResponseAsync(String vaultBaseUrl, String certificateName, CertificatePolicy certificatePolicy);

    /**
     * Updates the specified attributes associated with the given certificate.
     * .
     *
     * @param vaultBaseUrl       The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName    The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @return the CertificateBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateBundle updateCertificate(String vaultBaseUrl, String certificateName, String certificateVersion);

    /**
     * Updates the specified attributes associated with the given certificate.
     * .
     *
     * @param vaultBaseUrl       The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName    The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateBundle> updateCertificateAsync(String vaultBaseUrl, String certificateName, String certificateVersion, final ServiceCallback<CertificateBundle> serviceCallback);

    /**
     * Updates the specified attributes associated with the given certificate.
     * .
     *
     * @param vaultBaseUrl       The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName    The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateBundle> updateCertificateAsync(String vaultBaseUrl, String certificateName, String certificateVersion);

    /**
     * Updates the specified attributes associated with the given certificate.
     * .
     *
     * @param vaultBaseUrl       The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName    The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateBundle>> updateCertificateWithServiceResponseAsync(String vaultBaseUrl, String certificateName, String certificateVersion);

    /**
     * Updates the specified attributes associated with the given certificate.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate in the given key vault.
     * @param certificateVersion    The version of the certificate.
     * @param certificatePolicy     The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @return the CertificateBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateBundle updateCertificate(String vaultBaseUrl, String certificateName, String certificateVersion, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Updates the specified attributes associated with the given certificate.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate in the given key vault.
     * @param certificateVersion    The version of the certificate.
     * @param certificatePolicy     The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @param serviceCallback       the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateBundle> updateCertificateAsync(String vaultBaseUrl, String certificateName, String certificateVersion, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags, final ServiceCallback<CertificateBundle> serviceCallback);

    /**
     * Updates the specified attributes associated with the given certificate.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate in the given key vault.
     * @param certificateVersion    The version of the certificate.
     * @param certificatePolicy     The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateBundle> updateCertificateAsync(String vaultBaseUrl, String certificateName, String certificateVersion, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Updates the specified attributes associated with the given certificate.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate in the given key vault.
     * @param certificateVersion    The version of the certificate.
     * @param certificatePolicy     The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateBundle>> updateCertificateWithServiceResponseAsync(String vaultBaseUrl, String certificateName, String certificateVersion, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Gets information about a specified certificate.
     * The GetCertificate operation returns information about a specific certificate in the specified key vault.
     *
     * @param vaultBaseUrl       The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName    The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate.
     * @return the CertificateBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateBundle getCertificate(String vaultBaseUrl, String certificateName, String certificateVersion);

    /**
     * Gets information about a specified certificate.
     * The GetCertificate operation returns information about a specific certificate in the specified key vault.
     *
     * @param vaultBaseUrl       The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName    The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate.
     * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateBundle> getCertificateAsync(String vaultBaseUrl, String certificateName, String certificateVersion, final ServiceCallback<CertificateBundle> serviceCallback);

    /**
     * Gets information about a specified certificate.
     * The GetCertificate operation returns information about a specific certificate in the specified key vault.
     *
     * @param vaultBaseUrl       The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName    The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateBundle> getCertificateAsync(String vaultBaseUrl, String certificateName, String certificateVersion);

    /**
     * Gets information about a specified certificate.
     * The GetCertificate operation returns information about a specific certificate in the specified key vault.
     *
     * @param vaultBaseUrl       The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName    The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateBundle>> getCertificateWithServiceResponseAsync(String vaultBaseUrl, String certificateName, String certificateVersion);

    /**
     * Updates a certificate operation.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @return the CertificateOperation object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateOperation updateCertificateOperation(String vaultBaseUrl, String certificateName, boolean cancellationRequested);

    /**
     * Updates a certificate operation.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @param serviceCallback       the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateOperation> updateCertificateOperationAsync(String vaultBaseUrl, String certificateName, boolean cancellationRequested, final ServiceCallback<CertificateOperation> serviceCallback);

    /**
     * Updates a certificate operation.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @return the observable to the CertificateOperation object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateOperation> updateCertificateOperationAsync(String vaultBaseUrl, String certificateName, boolean cancellationRequested);

    /**
     * Updates a certificate operation.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @return the observable to the CertificateOperation object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateOperation>> updateCertificateOperationWithServiceResponseAsync(String vaultBaseUrl, String certificateName, boolean cancellationRequested);

    /**
     * Gets the operation associated with a specified certificate.
     * The GetCertificateOperation operation returns the certificate operation associated with the certificate.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the CertificateOperation object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateOperation getCertificateOperation(String vaultBaseUrl, String certificateName);

    /**
     * Gets the operation associated with a specified certificate.
     * The GetCertificateOperation operation returns the certificate operation associated with the certificate.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateOperation> getCertificateOperationAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback);

    /**
     * Gets the operation associated with a specified certificate.
     * The GetCertificateOperation operation returns the certificate operation associated with the certificate.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the observable to the CertificateOperation object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateOperation> getCertificateOperationAsync(String vaultBaseUrl, String certificateName);

    /**
     * Gets the operation associated with a specified certificate.
     * The GetCertificateOperation operation returns the certificate operation associated with the certificate.
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the observable to the CertificateOperation object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateOperation>> getCertificateOperationWithServiceResponseAsync(String vaultBaseUrl, String certificateName);

    /**
     * Deletes the operation for a specified certificate.
     * .
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the CertificateOperation object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateOperation deleteCertificateOperation(String vaultBaseUrl, String certificateName);

    /**
     * Deletes the operation for a specified certificate.
     * .
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateOperation> deleteCertificateOperationAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback);

    /**
     * Deletes the operation for a specified certificate.
     * .
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the observable to the CertificateOperation object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateOperation> deleteCertificateOperationAsync(String vaultBaseUrl, String certificateName);

    /**
     * Deletes the operation for a specified certificate.
     * .
     *
     * @param vaultBaseUrl    The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @return the observable to the CertificateOperation object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateOperation>> deleteCertificateOperationWithServiceResponseAsync(String vaultBaseUrl, String certificateName);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * .
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName  The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @return the CertificateBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateBundle mergeCertificate(String vaultBaseUrl, String certificateName, List<byte[]> x509Certificates);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * .
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName  The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @param serviceCallback  the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateBundle> mergeCertificateAsync(String vaultBaseUrl, String certificateName, List<byte[]> x509Certificates, final ServiceCallback<CertificateBundle> serviceCallback);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * .
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName  The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateBundle> mergeCertificateAsync(String vaultBaseUrl, String certificateName, List<byte[]> x509Certificates);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * .
     *
     * @param vaultBaseUrl     The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName  The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateBundle>> mergeCertificateWithServiceResponseAsync(String vaultBaseUrl, String certificateName, List<byte[]> x509Certificates);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param x509Certificates      The certificate or the certificate chain to merge.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @return the CertificateBundle object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    CertificateBundle mergeCertificate(String vaultBaseUrl, String certificateName, List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param x509Certificates      The certificate or the certificate chain to merge.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @param serviceCallback       the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<CertificateBundle> mergeCertificateAsync(String vaultBaseUrl, String certificateName, List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags, final ServiceCallback<CertificateBundle> serviceCallback);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param x509Certificates      The certificate or the certificate chain to merge.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<CertificateBundle> mergeCertificateAsync(String vaultBaseUrl, String certificateName, List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * .
     *
     * @param vaultBaseUrl          The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName       The name of the certificate.
     * @param x509Certificates      The certificate or the certificate chain to merge.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags                  Application specific metadata in the form of key-value pairs.
     * @return the observable to the CertificateBundle object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<CertificateBundle>> mergeCertificateWithServiceResponseAsync(String vaultBaseUrl, String certificateName, List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;KeyItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<KeyItem> getKeyVersionsNext(final String nextPageLink);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param nextPageLink    The NextLink from the previous successful call to List operation.
     * @param serviceFuture   the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<KeyItem>> getKeyVersionsNextAsync(final String nextPageLink, final ServiceFuture<List<KeyItem>> serviceFuture, final ListOperationCallback<KeyItem> serviceCallback);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<KeyItem>> getKeyVersionsNextAsync(final String nextPageLink);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<KeyItem>>> getKeyVersionsNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;KeyItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<KeyItem> getKeysNext(final String nextPageLink);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param nextPageLink    The NextLink from the previous successful call to List operation.
     * @param serviceFuture   the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<KeyItem>> getKeysNextAsync(final String nextPageLink, final ServiceFuture<List<KeyItem>> serviceFuture, final ListOperationCallback<KeyItem> serviceCallback);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<KeyItem>> getKeysNextAsync(final String nextPageLink);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier,attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. Authorization: Requires the keys/list permission.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;KeyItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<KeyItem>>> getKeysNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;SecretItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<SecretItem> getSecretsNext(final String nextPageLink);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param nextPageLink    The NextLink from the previous successful call to List operation.
     * @param serviceFuture   the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<SecretItem>> getSecretsNextAsync(final String nextPageLink, final ServiceFuture<List<SecretItem>> serviceFuture, final ListOperationCallback<SecretItem> serviceCallback);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<SecretItem>> getSecretsNextAsync(final String nextPageLink);

    /**
     * List secrets in a specified key vault.
     * The LIST operation is applicable to the entire vault, however only the base secret identifier and attributes are provided in the response. Individual secret versions are not listed in the response.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<SecretItem>>> getSecretsNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;SecretItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<SecretItem> getSecretVersionsNext(final String nextPageLink);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param nextPageLink    The NextLink from the previous successful call to List operation.
     * @param serviceFuture   the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<SecretItem>> getSecretVersionsNextAsync(final String nextPageLink, final ServiceFuture<List<SecretItem>> serviceFuture, final ListOperationCallback<SecretItem> serviceCallback);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<SecretItem>> getSecretVersionsNextAsync(final String nextPageLink);

    /**
     * List the versions of the specified secret.
     * The LIST VERSIONS operation can be applied to all versions having the same secret name in the same key vault. The full secret identifier and attributes are provided in the response. No values are returned for the secrets and only current versions of a secret are listed.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;SecretItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<SecretItem>>> getSecretVersionsNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;CertificateItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<CertificateItem> getCertificatesNext(final String nextPageLink);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param nextPageLink    The NextLink from the previous successful call to List operation.
     * @param serviceFuture   the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<CertificateItem>> getCertificatesNextAsync(final String nextPageLink, final ServiceFuture<List<CertificateItem>> serviceFuture, final ListOperationCallback<CertificateItem> serviceCallback);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<CertificateItem>> getCertificatesNextAsync(final String nextPageLink);

    /**
     * List certificates in a specified key vault.
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<CertificateItem>>> getCertificatesNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;CertificateIssuerItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<CertificateIssuerItem> getCertificateIssuersNext(final String nextPageLink);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param nextPageLink    The NextLink from the previous successful call to List operation.
     * @param serviceFuture   the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<CertificateIssuerItem>> getCertificateIssuersNextAsync(final String nextPageLink, final ServiceFuture<List<CertificateIssuerItem>> serviceFuture, final ListOperationCallback<CertificateIssuerItem> serviceCallback);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;CertificateIssuerItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<CertificateIssuerItem>> getCertificateIssuersNextAsync(final String nextPageLink);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;CertificateIssuerItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<CertificateIssuerItem>>> getCertificateIssuersNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;CertificateItem&gt; object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws KeyVaultErrorException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    PagedList<CertificateItem> getCertificateVersionsNext(final String nextPageLink);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param nextPageLink    The NextLink from the previous successful call to List operation.
     * @param serviceFuture   the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<List<CertificateItem>> getCertificateVersionsNextAsync(final String nextPageLink, final ServiceFuture<List<CertificateItem>> serviceFuture, final ListOperationCallback<CertificateItem> serviceCallback);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Page<CertificateItem>> getCertificateVersionsNextAsync(final String nextPageLink);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;CertificateItem&gt; object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Page<CertificateItem>>> getCertificateVersionsNextWithServiceResponseAsync(final String nextPageLink);

}
