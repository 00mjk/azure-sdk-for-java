// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.scheduler;

import com.microsoft.windowsazure.management.ManagementConfiguration;
import com.microsoft.windowsazure.management.OperationResponse;
import com.microsoft.windowsazure.management.SubscriptionCloudCredentials;
import com.microsoft.windowsazure.management.scheduler.models.ResourceProviderGetPropertiesResponse;
import com.microsoft.windowsazure.management.scheduler.models.SchedulerOperationStatus;
import com.microsoft.windowsazure.management.scheduler.models.SchedulerOperationStatusResponse;
import com.microsoft.windowsazure.services.core.ServiceClient;
import com.microsoft.windowsazure.services.core.ServiceException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.inject.Inject;
import javax.inject.Named;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPut;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class SchedulerManagementClientImpl extends ServiceClient<SchedulerManagementClientImpl> implements SchedulerManagementClient
{
    private URI baseUri;
    
    public URI getBaseUri() { return this.baseUri; }
    
    private SubscriptionCloudCredentials credentials;
    
    public SubscriptionCloudCredentials getCredentials() { return this.credentials; }
    
    private JobCollectionOperations jobCollections;
    
    public JobCollectionOperations getJobCollections() { return this.jobCollections; }
    
    /**
    * Initializes a new instance of the SchedulerManagementClientImpl class.
    *
    */
    private SchedulerManagementClientImpl()
    {
        super();
        this.jobCollections = new JobCollectionOperationsImpl(this);
    }
    
    /**
    * Initializes a new instance of the SchedulerManagementClientImpl class.
    *
    */
    public SchedulerManagementClientImpl(SubscriptionCloudCredentials credentials, URI baseUri)
    {
        this();
        if (credentials == null)
        {
            throw new NullPointerException("credentials");
        }
        if (baseUri == null)
        {
            throw new NullPointerException("baseUri");
        }
        this.credentials = credentials;
        this.baseUri = baseUri;
        
        httpClient = credentials.initializeClient();
    }
    
    /**
    * Initializes a new instance of the SchedulerManagementClientImpl class.
    *
    */
    @Inject
    public SchedulerManagementClientImpl(@Named(ManagementConfiguration.SUBSCRIPTION_CLOUD_CREDENTIALS) SubscriptionCloudCredentials credentials) throws java.net.URISyntaxException
    {
        this();
        if (credentials == null)
        {
            throw new NullPointerException("credentials");
        }
        this.credentials = credentials;
        this.baseUri = new URI("https://management.core.windows.net/");
        
        httpClient = credentials.initializeClient();
    }
    
    /**
    * The Get Operation Status operation returns the status of thespecified
    * operation. After calling an asynchronous operation, you can call Get
    * Operation Status to determine whether the operation has succeeded,
    * failed, or is still in progress.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx for
    * more information)
    *
    * @param requestId The request ID for the request you wish to track. The
    * request ID is returned in the x-ms-request-id response header for every
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public Future<SchedulerOperationStatusResponse> getOperationStatusAsync(final String requestId)
    {
        return this.getExecutorService().submit(new Callable<SchedulerOperationStatusResponse>() { 
            @Override
            public SchedulerOperationStatusResponse call() throws Exception
            {
                return getOperationStatus(requestId);
            }
         });
    }
    
    /**
    * The Get Operation Status operation returns the status of thespecified
    * operation. After calling an asynchronous operation, you can call Get
    * Operation Status to determine whether the operation has succeeded,
    * failed, or is still in progress.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx for
    * more information)
    *
    * @param requestId The request ID for the request you wish to track. The
    * request ID is returned in the x-ms-request-id response header for every
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public SchedulerOperationStatusResponse getOperationStatus(String requestId) throws IOException, ServiceException, ParserConfigurationException, SAXException
    {
        // Validate
        if (requestId == null)
        {
            throw new NullPointerException("requestId");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getBaseUri() + this.getCredentials().getSubscriptionId() + "/operations/" + requestId;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        SchedulerOperationStatusResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new SchedulerOperationStatusResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("Operation");
        Element operationElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (operationElement != null)
        {
            NodeList elements2 = operationElement.getElementsByTagName("ID");
            Element idElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (idElement != null)
            {
                String idInstance;
                idInstance = idElement.getTextContent();
                result.setId(idInstance);
            }
            
            NodeList elements3 = operationElement.getElementsByTagName("Status");
            Element statusElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
            if (statusElement != null)
            {
                SchedulerOperationStatus statusInstance;
                statusInstance = SchedulerOperationStatus.valueOf(statusElement.getTextContent());
                result.setStatus(statusInstance);
            }
            
            NodeList elements4 = operationElement.getElementsByTagName("HttpStatusCode");
            Element httpStatusCodeElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
            if (httpStatusCodeElement != null)
            {
                Integer httpStatusCodeInstance;
                httpStatusCodeInstance = Integer.valueOf(httpStatusCodeElement.getTextContent());
                result.setHttpStatusCode(httpStatusCodeInstance);
            }
            
            NodeList elements5 = operationElement.getElementsByTagName("Error");
            Element errorElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
            if (errorElement != null)
            {
                SchedulerOperationStatusResponse.ErrorDetails errorInstance = new SchedulerOperationStatusResponse.ErrorDetails();
                result.setError(errorInstance);
                
                NodeList elements6 = errorElement.getElementsByTagName("Code");
                Element codeElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                if (codeElement != null)
                {
                    String codeInstance;
                    codeInstance = codeElement.getTextContent();
                    errorInstance.setCode(codeInstance);
                }
                
                NodeList elements7 = errorElement.getElementsByTagName("Message");
                Element messageElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                if (messageElement != null)
                {
                    String messageInstance;
                    messageInstance = messageElement.getTextContent();
                    errorInstance.setMessage(messageInstance);
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * Gets a list of properties for the resource provider, including supported
    * regions and plans.
    *
    * @return The Resource Provider Get Properties operation response.
    */
    @Override
    public Future<ResourceProviderGetPropertiesResponse> getResourceProviderPropertiesAsync()
    {
        return this.getExecutorService().submit(new Callable<ResourceProviderGetPropertiesResponse>() { 
            @Override
            public ResourceProviderGetPropertiesResponse call() throws Exception
            {
                return getResourceProviderProperties();
            }
         });
    }
    
    /**
    * Gets a list of properties for the resource provider, including supported
    * regions and plans.
    *
    * @return The Resource Provider Get Properties operation response.
    */
    @Override
    public ResourceProviderGetPropertiesResponse getResourceProviderProperties() throws IOException, ServiceException, ParserConfigurationException, SAXException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getBaseUri() + this.getCredentials().getSubscriptionId() + "/resourceproviders/" + "scheduler" + "/Properties?resourceType=" + "JobCollections";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        ResourceProviderGetPropertiesResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new ResourceProviderGetPropertiesResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("ResourceProviderProperties");
        Element resourceProviderPropertiesSequenceElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (resourceProviderPropertiesSequenceElement != null)
        {
            for (int i1 = 0; i1 < resourceProviderPropertiesSequenceElement.getElementsByTagName("ResourceProviderProperty").getLength(); i1 = i1 + 1)
            {
                org.w3c.dom.Element resourceProviderPropertiesElement = ((org.w3c.dom.Element)resourceProviderPropertiesSequenceElement.getElementsByTagName("ResourceProviderProperty").item(i1));
                NodeList elements2 = resourceProviderPropertiesElement.getElementsByTagName("Key");
                String resourceProviderPropertiesKey = elements2.getLength() > 0 ? ((org.w3c.dom.Element)elements2.item(0)).getTextContent() : null;
                NodeList elements3 = resourceProviderPropertiesElement.getElementsByTagName("Value");
                String resourceProviderPropertiesValue = elements3.getLength() > 0 ? ((org.w3c.dom.Element)elements3.item(0)).getTextContent() : null;
                result.getProperties().put(resourceProviderPropertiesKey, resourceProviderPropertiesValue);
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * Register the Scheduler resource provider with your subscription.
    *
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> registerResourceProviderAsync()
    {
        return this.getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception
            {
                return registerResourceProvider();
            }
         });
    }
    
    /**
    * Register the Scheduler resource provider with your subscription.
    *
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse registerResourceProvider() throws IOException, ServiceException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getBaseUri() + this.getCredentials().getSubscriptionId() + "/services?service=" + "scheduler" + "." + "JobCollections" + "&action=register";
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        OperationResponse result = null;
        result = new OperationResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * Unregister the Scheduler resource provider with your subscription.
    *
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> unregisterResourceProviderAsync()
    {
        return this.getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception
            {
                return unregisterResourceProvider();
            }
         });
    }
    
    /**
    * Unregister the Scheduler resource provider with your subscription.
    *
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse unregisterResourceProvider() throws IOException, ServiceException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getBaseUri() + this.getCredentials().getSubscriptionId() + "/services?service=" + "scheduler" + "." + "JobCollections" + "&action=unregister";
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        OperationResponse result = null;
        result = new OperationResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
}
