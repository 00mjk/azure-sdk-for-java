// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.store;

import com.microsoft.windowsazure.management.store.models.AddOnCreateParameters;
import com.microsoft.windowsazure.management.store.models.AddOnOperationStatusResponse;
import com.microsoft.windowsazure.management.store.models.AddOnUpdateParameters;
import com.microsoft.windowsazure.management.store.models.OperationStatus;
import com.microsoft.windowsazure.services.core.ServiceException;
import com.microsoft.windowsazure.services.core.ServiceOperations;
import java.io.IOException;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

/**
* Provides REST operations for working with Store add-ins from the Windows
* Azure store service.
*/
public class AddOnOperationsImpl implements ServiceOperations<StoreManagementClientImpl>, AddOnOperations
{
    /**
    * Initializes a new instance of the AddOnOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    AddOnOperationsImpl(StoreManagementClientImpl client)
    {
        this.client = client;
    }
    
    private StoreManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.store.StoreManagementClientImpl.
    */
    public StoreManagementClientImpl getClient() { return this.client; }
    
    /**
    * The Create Store Item operation creates Windows Azure Store entries in a
    * Windows Azure subscription.
    *
    * @param cloudServiceName The name of the cloud service to which this store
    * item will be assigned.
    * @param resourceName The name of this resource.
    * @param addOnName The add on name.
    * @param parameters Parameters used to specify how the Create procedure
    * will function.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public Future<AddOnOperationStatusResponse> beginCreatingAsync(final String cloudServiceName, final String resourceName, final String addOnName, final AddOnCreateParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<AddOnOperationStatusResponse>() { @Override
        public AddOnOperationStatusResponse call() throws Exception
        {
            return beginCreating(cloudServiceName, resourceName, addOnName, parameters);
        }
         });
    }
    
    /**
    * The Create Store Item operation creates Windows Azure Store entries in a
    * Windows Azure subscription.
    *
    * @param cloudServiceName The name of the cloud service to which this store
    * item will be assigned.
    * @param resourceName The name of this resource.
    * @param addOnName The add on name.
    * @param parameters Parameters used to specify how the Create procedure
    * will function.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public AddOnOperationStatusResponse beginCreating(String cloudServiceName, String resourceName, String addOnName, AddOnCreateParameters parameters) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException
    {
        // Validate
        if (cloudServiceName == null)
        {
            throw new NullPointerException("cloudServiceName");
        }
        if (resourceName == null)
        {
            throw new NullPointerException("resourceName");
        }
        if (addOnName == null)
        {
            throw new NullPointerException("addOnName");
        }
        if (parameters == null)
        {
            throw new NullPointerException("parameters");
        }
        if (parameters.getPlan() == null)
        {
            throw new NullPointerException("parameters.Plan");
        }
        if (parameters.getType() == null)
        {
            throw new NullPointerException("parameters.Type");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/CloudServices/" + cloudServiceName + "/resources/" + parameters.getType() + "/" + resourceName + "/" + addOnName;
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element resourceElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Resource");
        requestDoc.appendChild(resourceElement);
        
        Element typeElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Type");
        typeElement.appendChild(requestDoc.createTextNode(parameters.getType()));
        resourceElement.appendChild(typeElement);
        
        Element planElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Plan");
        planElement.appendChild(requestDoc.createTextNode(parameters.getPlan()));
        resourceElement.appendChild(planElement);
        
        if (parameters.getPromotionCode() != null)
        {
            Element promotionCodeElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "PromotionCode");
            promotionCodeElement.appendChild(requestDoc.createTextNode(parameters.getPromotionCode()));
            resourceElement.appendChild(promotionCodeElement);
        }
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 202)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        AddOnOperationStatusResponse result = null;
        result = new AddOnOperationStatusResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The Delete Store Item operation deletes Windows Azure Store entries that
    * re provisioned for a subscription.
    *
    * @param cloudServiceName The name of the cloud service to which this store
    * item will be assigned.
    * @param resourceProviderNamespace The namespace in which this store item
    * resides.
    * @param resourceProviderType The type of store item to be deleted.
    * @param resourceProviderName The name of this resource provider.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public Future<AddOnOperationStatusResponse> beginDeletingAsync(final String cloudServiceName, final String resourceProviderNamespace, final String resourceProviderType, final String resourceProviderName)
    {
        return this.getClient().getExecutorService().submit(new Callable<AddOnOperationStatusResponse>() { @Override
        public AddOnOperationStatusResponse call() throws Exception
        {
            return beginDeleting(cloudServiceName, resourceProviderNamespace, resourceProviderType, resourceProviderName);
        }
         });
    }
    
    /**
    * The Delete Store Item operation deletes Windows Azure Store entries that
    * re provisioned for a subscription.
    *
    * @param cloudServiceName The name of the cloud service to which this store
    * item will be assigned.
    * @param resourceProviderNamespace The namespace in which this store item
    * resides.
    * @param resourceProviderType The type of store item to be deleted.
    * @param resourceProviderName The name of this resource provider.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public AddOnOperationStatusResponse beginDeleting(String cloudServiceName, String resourceProviderNamespace, String resourceProviderType, String resourceProviderName) throws IOException, ServiceException
    {
        // Validate
        if (cloudServiceName == null)
        {
            throw new NullPointerException("cloudServiceName");
        }
        if (resourceProviderNamespace == null)
        {
            throw new NullPointerException("resourceProviderNamespace");
        }
        if (resourceProviderType == null)
        {
            throw new NullPointerException("resourceProviderType");
        }
        if (resourceProviderName == null)
        {
            throw new NullPointerException("resourceProviderName");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/CloudServices/" + cloudServiceName + "/resources/" + resourceProviderNamespace + "/" + resourceProviderType + "/" + resourceProviderName;
        
        // Create HTTP transport objects
        HttpDelete httpRequest = new HttpDelete(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 202)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        AddOnOperationStatusResponse result = null;
        result = new AddOnOperationStatusResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The Create Store Item operation creates Windows Azure Store entries in a
    * Windows Azure subscription.
    *
    * @param cloudServiceName The name of the cloud service to which this store
    * item will be assigned.
    * @param resourceName The name of this resource.
    * @param addOnName The add on name.
    * @param parameters Parameters used to specify how the Create procedure
    * will function.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public Future<AddOnOperationStatusResponse> createAsync(final String cloudServiceName, final String resourceName, final String addOnName, final AddOnCreateParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<AddOnOperationStatusResponse>() { @Override
        public AddOnOperationStatusResponse call() throws Exception
        {
            return create(cloudServiceName, resourceName, addOnName, parameters);
        }
         });
    }
    
    /**
    * The Create Store Item operation creates Windows Azure Store entries in a
    * Windows Azure subscription.
    *
    * @param cloudServiceName The name of the cloud service to which this store
    * item will be assigned.
    * @param resourceName The name of this resource.
    * @param addOnName The add on name.
    * @param parameters Parameters used to specify how the Create procedure
    * will function.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public AddOnOperationStatusResponse create(String cloudServiceName, String resourceName, String addOnName, AddOnCreateParameters parameters) throws InterruptedException, ExecutionException, ServiceException
    {
        StoreManagementClient client2 = this.getClient();
        
        AddOnOperationStatusResponse response = client2.getAddOns().beginCreatingAsync(cloudServiceName, resourceName, addOnName, parameters).get();
        AddOnOperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        while ((result.getStatus() != OperationStatus.InProgress) == false)
        {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
        }
        
        if (result.getStatus() != OperationStatus.Succeeded)
        {
            ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
            ex.setErrorCode(result.getError().getCode());
            ex.setErrorMessage(result.getError().getMessage());
            throw ex;
        }
        
        return result;
    }
    
    /**
    * The Delete Store Item operation deletes Windows Azure Storeentries that
    * are provisioned for a subscription.
    *
    * @param cloudServiceName The name of the cloud service to which this store
    * item will be assigned.
    * @param resourceProviderNamespace The namespace in which this store item
    * resides.
    * @param resourceProviderType The type of store item to be deleted.
    * @param resourceProviderName The name of this resource provider.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public Future<AddOnOperationStatusResponse> deleteAsync(final String cloudServiceName, final String resourceProviderNamespace, final String resourceProviderType, final String resourceProviderName)
    {
        return this.getClient().getExecutorService().submit(new Callable<AddOnOperationStatusResponse>() { @Override
        public AddOnOperationStatusResponse call() throws Exception
        {
            return delete(cloudServiceName, resourceProviderNamespace, resourceProviderType, resourceProviderName);
        }
         });
    }
    
    /**
    * The Delete Store Item operation deletes Windows Azure Storeentries that
    * are provisioned for a subscription.
    *
    * @param cloudServiceName The name of the cloud service to which this store
    * item will be assigned.
    * @param resourceProviderNamespace The namespace in which this store item
    * resides.
    * @param resourceProviderType The type of store item to be deleted.
    * @param resourceProviderName The name of this resource provider.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public AddOnOperationStatusResponse delete(String cloudServiceName, String resourceProviderNamespace, String resourceProviderType, String resourceProviderName) throws InterruptedException, ExecutionException, ServiceException
    {
        StoreManagementClient client2 = this.getClient();
        
        AddOnOperationStatusResponse response = client2.getAddOns().beginDeletingAsync(cloudServiceName, resourceProviderNamespace, resourceProviderType, resourceProviderName).get();
        AddOnOperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        while ((result.getStatus() != OperationStatus.InProgress) == false)
        {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
        }
        
        if (result.getStatus() != OperationStatus.Succeeded)
        {
            ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
            ex.setErrorCode(result.getError().getCode());
            ex.setErrorMessage(result.getError().getMessage());
            throw ex;
        }
        
        return result;
    }
    
    /**
    * The Update Store Item operation creates Windows Azure Store entries in a
    * Windows Azure subscription.
    *
    * @param cloudServiceName The name of the cloud service to which this store
    * item will be assigned.
    * @param resourceName The name of this resource.
    * @param addOnName The addon name.
    * @param parameters Parameters used to specify how the Create procedure
    * will function.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public Future<AddOnOperationStatusResponse> updateAsync(final String cloudServiceName, final String resourceName, final String addOnName, final AddOnUpdateParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<AddOnOperationStatusResponse>() { @Override
        public AddOnOperationStatusResponse call() throws Exception
        {
            return update(cloudServiceName, resourceName, addOnName, parameters);
        }
         });
    }
    
    /**
    * The Update Store Item operation creates Windows Azure Store entries in a
    * Windows Azure subscription.
    *
    * @param cloudServiceName The name of the cloud service to which this store
    * item will be assigned.
    * @param resourceName The name of this resource.
    * @param addOnName The addon name.
    * @param parameters Parameters used to specify how the Create procedure
    * will function.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request.  If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request, and also includes error information regarding the
    * failure.
    */
    @Override
    public AddOnOperationStatusResponse update(String cloudServiceName, String resourceName, String addOnName, AddOnUpdateParameters parameters) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException
    {
        // Validate
        if (cloudServiceName == null)
        {
            throw new NullPointerException("cloudServiceName");
        }
        if (resourceName == null)
        {
            throw new NullPointerException("resourceName");
        }
        if (addOnName == null)
        {
            throw new NullPointerException("addOnName");
        }
        if (parameters == null)
        {
            throw new NullPointerException("parameters");
        }
        if (parameters.getPlan() == null)
        {
            throw new NullPointerException("parameters.Plan");
        }
        if (parameters.getType() == null)
        {
            throw new NullPointerException("parameters.Type");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/CloudServices/" + cloudServiceName + "/resources/" + parameters.getType() + "/" + resourceName + "/" + addOnName;
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("If-Match", "*");
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element resourceElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Resource");
        requestDoc.appendChild(resourceElement);
        
        Element typeElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Type");
        typeElement.appendChild(requestDoc.createTextNode(parameters.getType()));
        resourceElement.appendChild(typeElement);
        
        Element planElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Plan");
        planElement.appendChild(requestDoc.createTextNode(parameters.getPlan()));
        resourceElement.appendChild(planElement);
        
        if (parameters.getPromotionCode() != null)
        {
            Element promotionCodeElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "PromotionCode");
            promotionCodeElement.appendChild(requestDoc.createTextNode(parameters.getPromotionCode()));
            resourceElement.appendChild(promotionCodeElement);
        }
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 202)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        AddOnOperationStatusResponse result = null;
        result = new AddOnOperationStatusResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
}
