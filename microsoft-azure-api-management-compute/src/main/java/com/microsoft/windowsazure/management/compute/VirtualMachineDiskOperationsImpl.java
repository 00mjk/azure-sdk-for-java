// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.compute;

import com.microsoft.windowsazure.management.OperationResponse;
import com.microsoft.windowsazure.management.compute.models.VirtualHardDiskHostCaching;
import com.microsoft.windowsazure.management.compute.models.VirtualMachineDiskCreateDataDiskParameters;
import com.microsoft.windowsazure.management.compute.models.VirtualMachineDiskCreateDiskParameters;
import com.microsoft.windowsazure.management.compute.models.VirtualMachineDiskCreateDiskResponse;
import com.microsoft.windowsazure.management.compute.models.VirtualMachineDiskGetDataDiskResponse;
import com.microsoft.windowsazure.management.compute.models.VirtualMachineDiskGetDiskResponse;
import com.microsoft.windowsazure.management.compute.models.VirtualMachineDiskListResponse;
import com.microsoft.windowsazure.management.compute.models.VirtualMachineDiskUpdateDataDiskParameters;
import com.microsoft.windowsazure.management.compute.models.VirtualMachineDiskUpdateDiskParameters;
import com.microsoft.windowsazure.management.compute.models.VirtualMachineDiskUpdateDiskResponse;
import com.microsoft.windowsazure.services.core.ServiceException;
import com.microsoft.windowsazure.services.core.ServiceOperations;
import com.microsoft.windowsazure.services.core.utils.pipeline.CustomHttpDelete;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
* The Service Management API includes operations for managing the disks in your
* subscription.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/jj157188.aspx for more
* information)
*/
public class VirtualMachineDiskOperationsImpl implements ServiceOperations<ComputeManagementClientImpl>, VirtualMachineDiskOperations
{
    /**
    * Initializes a new instance of the VirtualMachineDiskOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    VirtualMachineDiskOperationsImpl(ComputeManagementClientImpl client)
    {
        this.client = client;
    }
    
    private ComputeManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.compute.ComputeManagementClientImpl.
    */
    public ComputeManagementClientImpl getClient() { return this.client; }
    
    /**
    * The Add Data Disk operation adds a data disk to a virtual machine. There
    * are three ways to create the data disk using the Add Data Disk
    * operation.  Option 1 – Attach an empty data disk to the role by
    * specifying the disk label and location of the disk image.  Do not
    * include the DiskName and SourceMediaLink elements in the request body.
    * Include the MediaLink element and reference a blob that is in the same
    * geographical region as the role.  You can also omit the MediaLink
    * element. In this usage, Windows Azure will create the data disk in the
    * storage account configured as default for the role.   Option 2 – Attach
    * an existing data disk that is in the image repository.  Do not include
    * the DiskName and SourceMediaLink elements in the request body.  Specify
    * the data disk to use by including the DiskName element.  Note: If
    * included the in the response body, the MediaLink and LogicalDiskSizeInGB
    * elements are ignored.  Option 3 - Specify the location of a blob in your
    * storage account that contain a disk image to use.  Include the
    * SourceMediaLink element. Note: If the MediaLink element isincluded, it
    * is ignored.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157199.aspx for
    * more information)
    *
    * @param serviceName The name of your service.
    * @param deploymentName The name of the deployment.
    * @param roleName The name of the role to add the data disk to.
    * @param parameters Parameters supplied to the Create Virtual Machine Data
    * Disk operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> createDataDiskAsync(final String serviceName, final String deploymentName, final String roleName, final VirtualMachineDiskCreateDataDiskParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception
            {
                return createDataDisk(serviceName, deploymentName, roleName, parameters);
            }
         });
    }
    
    /**
    * The Add Data Disk operation adds a data disk to a virtual machine. There
    * are three ways to create the data disk using the Add Data Disk
    * operation.  Option 1 – Attach an empty data disk to the role by
    * specifying the disk label and location of the disk image.  Do not
    * include the DiskName and SourceMediaLink elements in the request body.
    * Include the MediaLink element and reference a blob that is in the same
    * geographical region as the role.  You can also omit the MediaLink
    * element. In this usage, Windows Azure will create the data disk in the
    * storage account configured as default for the role.   Option 2 – Attach
    * an existing data disk that is in the image repository.  Do not include
    * the DiskName and SourceMediaLink elements in the request body.  Specify
    * the data disk to use by including the DiskName element.  Note: If
    * included the in the response body, the MediaLink and LogicalDiskSizeInGB
    * elements are ignored.  Option 3 - Specify the location of a blob in your
    * storage account that contain a disk image to use.  Include the
    * SourceMediaLink element. Note: If the MediaLink element isincluded, it
    * is ignored.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157199.aspx for
    * more information)
    *
    * @param serviceName The name of your service.
    * @param deploymentName The name of the deployment.
    * @param roleName The name of the role to add the data disk to.
    * @param parameters Parameters supplied to the Create Virtual Machine Data
    * Disk operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse createDataDisk(String serviceName, String deploymentName, String roleName, VirtualMachineDiskCreateDataDiskParameters parameters) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException
    {
        // Validate
        if (serviceName == null)
        {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null)
        {
            throw new NullPointerException("deploymentName");
        }
        if (roleName == null)
        {
            throw new NullPointerException("roleName");
        }
        if (parameters == null)
        {
            throw new NullPointerException("parameters");
        }
        if (parameters.getMediaLinkUri() == null)
        {
            throw new NullPointerException("parameters.MediaLinkUri");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "/roles/" + roleName + "/DataDisks";
        
        // Create HTTP transport objects
        HttpPost httpRequest = new HttpPost(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element dataVirtualHardDiskElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisk");
        requestDoc.appendChild(dataVirtualHardDiskElement);
        
        Element hostCachingElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "HostCaching");
        hostCachingElement.appendChild(requestDoc.createTextNode(parameters.getHostCaching().toString()));
        dataVirtualHardDiskElement.appendChild(hostCachingElement);
        
        if (parameters.getDiskLabel() != null)
        {
            Element diskLabelElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "DiskLabel");
            diskLabelElement.appendChild(requestDoc.createTextNode(parameters.getDiskLabel()));
            dataVirtualHardDiskElement.appendChild(diskLabelElement);
        }
        
        if (parameters.getDiskName() != null)
        {
            Element diskNameElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "DiskName");
            diskNameElement.appendChild(requestDoc.createTextNode(parameters.getDiskName()));
            dataVirtualHardDiskElement.appendChild(diskNameElement);
        }
        
        if (parameters.getLogicalUnitNumber() != null)
        {
            Element lunElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Lun");
            lunElement.appendChild(requestDoc.createTextNode(Integer.toString(parameters.getLogicalUnitNumber())));
            dataVirtualHardDiskElement.appendChild(lunElement);
        }
        
        Element logicalDiskSizeInGBElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "LogicalDiskSizeInGB");
        logicalDiskSizeInGBElement.appendChild(requestDoc.createTextNode(Double.toString(parameters.getLogicalDiskSizeInGB())));
        dataVirtualHardDiskElement.appendChild(logicalDiskSizeInGBElement);
        
        Element mediaLinkElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "MediaLink");
        mediaLinkElement.appendChild(requestDoc.createTextNode(parameters.getMediaLinkUri().toString()));
        dataVirtualHardDiskElement.appendChild(mediaLinkElement);
        
        if (parameters.getSourceMediaLinkUri() != null)
        {
            Element sourceMediaLinkElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "SourceMediaLink");
            sourceMediaLinkElement.appendChild(requestDoc.createTextNode(parameters.getSourceMediaLinkUri().toString()));
            dataVirtualHardDiskElement.appendChild(sourceMediaLinkElement);
        }
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 201)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        OperationResponse result = null;
        result = new OperationResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The Add Disk operation adds a disk to the user image repository. The disk
    * can be an operating system disk or a data disk.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for
    * more information)
    *
    * @param parameters Parameters supplied to the Create Virtual Machine Disk
    * operation.
    * @return A virtual machine disk associated with your subscription.
    */
    @Override
    public Future<VirtualMachineDiskCreateDiskResponse> createDiskAsync(final VirtualMachineDiskCreateDiskParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<VirtualMachineDiskCreateDiskResponse>() { 
            @Override
            public VirtualMachineDiskCreateDiskResponse call() throws Exception
            {
                return createDisk(parameters);
            }
         });
    }
    
    /**
    * The Add Disk operation adds a disk to the user image repository. The disk
    * can be an operating system disk or a data disk.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for
    * more information)
    *
    * @param parameters Parameters supplied to the Create Virtual Machine Disk
    * operation.
    * @return A virtual machine disk associated with your subscription.
    */
    @Override
    public VirtualMachineDiskCreateDiskResponse createDisk(VirtualMachineDiskCreateDiskParameters parameters) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException, URISyntaxException
    {
        // Validate
        if (parameters == null)
        {
            throw new NullPointerException("parameters");
        }
        if (parameters.getLabel() == null)
        {
            throw new NullPointerException("parameters.Label");
        }
        if (parameters.getMediaLinkUri() == null)
        {
            throw new NullPointerException("parameters.MediaLinkUri");
        }
        if (parameters.getName() == null)
        {
            throw new NullPointerException("parameters.Name");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/disks";
        
        // Create HTTP transport objects
        HttpPost httpRequest = new HttpPost(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element diskElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Disk");
        requestDoc.appendChild(diskElement);
        
        if (parameters.getOperatingSystemType() != null)
        {
            Element osElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "OS");
            osElement.appendChild(requestDoc.createTextNode(parameters.getOperatingSystemType()));
            diskElement.appendChild(osElement);
        }
        
        Element labelElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Label");
        labelElement.appendChild(requestDoc.createTextNode(parameters.getLabel()));
        diskElement.appendChild(labelElement);
        
        Element mediaLinkElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "MediaLink");
        mediaLinkElement.appendChild(requestDoc.createTextNode(parameters.getMediaLinkUri().toString()));
        diskElement.appendChild(mediaLinkElement);
        
        Element nameElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Name");
        nameElement.appendChild(requestDoc.createTextNode(parameters.getName()));
        diskElement.appendChild(nameElement);
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        VirtualMachineDiskCreateDiskResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new VirtualMachineDiskCreateDiskResponse();
        DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder2 = documentBuilderFactory2.newDocumentBuilder();
        Document responseDoc = documentBuilder2.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("Disk");
        Element diskElement2 = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (diskElement2 != null)
        {
            NodeList elements2 = diskElement2.getElementsByTagName("OS");
            Element osElement2 = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (osElement2 != null)
            {
                String osInstance;
                osInstance = osElement2.getTextContent();
                result.setOperatingSystem(osInstance);
            }
            
            NodeList elements3 = diskElement2.getElementsByTagName("Label");
            Element labelElement2 = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
            if (labelElement2 != null)
            {
                String labelInstance;
                labelInstance = labelElement2.getTextContent();
                result.setLabel(labelInstance);
            }
            
            NodeList elements4 = diskElement2.getElementsByTagName("AffinityGroup");
            Element affinityGroupElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
            if (affinityGroupElement != null)
            {
                String affinityGroupInstance;
                affinityGroupInstance = affinityGroupElement.getTextContent();
                result.setAffinityGroup(affinityGroupInstance);
            }
            
            NodeList elements5 = diskElement2.getElementsByTagName("Location");
            Element locationElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
            if (locationElement != null)
            {
                String locationInstance;
                locationInstance = locationElement.getTextContent();
                result.setLocation(locationInstance);
            }
            
            NodeList elements6 = diskElement2.getElementsByTagName("LogicalDiskSizeInGB");
            Element logicalDiskSizeInGBElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
            if (logicalDiskSizeInGBElement != null)
            {
                double logicalDiskSizeInGBInstance;
                logicalDiskSizeInGBInstance = Double.parseDouble(logicalDiskSizeInGBElement.getTextContent());
                result.setLogicalSizeInGB(logicalDiskSizeInGBInstance);
            }
            
            NodeList elements7 = diskElement2.getElementsByTagName("MediaLink");
            Element mediaLinkElement2 = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
            if (mediaLinkElement2 != null)
            {
                URI mediaLinkInstance;
                mediaLinkInstance = new URI(mediaLinkElement2.getTextContent());
                result.setMediaLinkUri(mediaLinkInstance);
            }
            
            NodeList elements8 = diskElement2.getElementsByTagName("Name");
            Element nameElement2 = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
            if (nameElement2 != null)
            {
                String nameInstance;
                nameInstance = nameElement2.getTextContent();
                result.setName(nameInstance);
            }
            
            NodeList elements9 = diskElement2.getElementsByTagName("SourceImageName");
            Element sourceImageNameElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
            if (sourceImageNameElement != null)
            {
                String sourceImageNameInstance;
                sourceImageNameInstance = sourceImageNameElement.getTextContent();
                result.setSourceImageName(sourceImageNameInstance);
            }
            
            NodeList elements10 = diskElement2.getElementsByTagName("AttachedTo");
            Element attachedToElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
            if (attachedToElement != null)
            {
                VirtualMachineDiskCreateDiskResponse.VirtualMachineDiskUsageDetails attachedToInstance = new VirtualMachineDiskCreateDiskResponse.VirtualMachineDiskUsageDetails();
                result.setUsageDetails(attachedToInstance);
                
                NodeList elements11 = attachedToElement.getElementsByTagName("HostedServiceName");
                Element hostedServiceNameElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                if (hostedServiceNameElement != null)
                {
                    String hostedServiceNameInstance;
                    hostedServiceNameInstance = hostedServiceNameElement.getTextContent();
                    attachedToInstance.setHostedServiceName(hostedServiceNameInstance);
                }
                
                NodeList elements12 = attachedToElement.getElementsByTagName("DeploymentName");
                Element deploymentNameElement = elements12.getLength() > 0 ? ((Element)elements12.item(0)) : null;
                if (deploymentNameElement != null)
                {
                    String deploymentNameInstance;
                    deploymentNameInstance = deploymentNameElement.getTextContent();
                    attachedToInstance.setDeploymentName(deploymentNameInstance);
                }
                
                NodeList elements13 = attachedToElement.getElementsByTagName("RoleName");
                Element roleNameElement = elements13.getLength() > 0 ? ((Element)elements13.item(0)) : null;
                if (roleNameElement != null)
                {
                    String roleNameInstance;
                    roleNameInstance = roleNameElement.getTextContent();
                    attachedToInstance.setRoleName(roleNameInstance);
                }
            }
            
            NodeList elements14 = diskElement2.getElementsByTagName("IsPremium");
            Element isPremiumElement = elements14.getLength() > 0 ? ((Element)elements14.item(0)) : null;
            if (isPremiumElement != null && (isPremiumElement.getTextContent() != null && isPremiumElement.getTextContent().isEmpty() != true) == false)
            {
                boolean isPremiumInstance;
                isPremiumInstance = Boolean.parseBoolean(isPremiumElement.getTextContent());
                result.setIsPremium(isPremiumInstance);
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The Delete Data Disk operation removes the specified data disk from a
    * virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157179.aspx for
    * more information)
    *
    * @param serviceName The name of your service.
    * @param deploymentName The name of the deployment.
    * @param roleName The name of the role to delete the data disk from.
    * @param logicalUnitNumber The logical unit number of the disk.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteDataDiskAsync(final String serviceName, final String deploymentName, final String roleName, final int logicalUnitNumber)
    {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception
            {
                return deleteDataDisk(serviceName, deploymentName, roleName, logicalUnitNumber);
            }
         });
    }
    
    /**
    * The Delete Data Disk operation removes the specified data disk from a
    * virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157179.aspx for
    * more information)
    *
    * @param serviceName The name of your service.
    * @param deploymentName The name of the deployment.
    * @param roleName The name of the role to delete the data disk from.
    * @param logicalUnitNumber The logical unit number of the disk.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse deleteDataDisk(String serviceName, String deploymentName, String roleName, int logicalUnitNumber) throws IOException, ServiceException
    {
        // Validate
        if (serviceName == null)
        {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null)
        {
            throw new NullPointerException("deploymentName");
        }
        if (roleName == null)
        {
            throw new NullPointerException("roleName");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "/roles/" + roleName + "/DataDisks/" + logicalUnitNumber;
        
        // Create HTTP transport objects
        CustomHttpDelete httpRequest = new CustomHttpDelete(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        OperationResponse result = null;
        result = new OperationResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The Delete Disk operation deletes the specified data or operating system
    * disk from your image repository.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157200.aspx for
    * more information)
    *
    * @param diskName The name of the disk to delete.
    * @param deleteFromStorage Optional. Specifies that the source blob for the
    * disk should also be deleted from storage.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteDiskAsync(final String diskName, final boolean deleteFromStorage)
    {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception
            {
                return deleteDisk(diskName, deleteFromStorage);
            }
         });
    }
    
    /**
    * The Delete Disk operation deletes the specified data or operating system
    * disk from your image repository.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157200.aspx for
    * more information)
    *
    * @param diskName The name of the disk to delete.
    * @param deleteFromStorage Optional. Specifies that the source blob for the
    * disk should also be deleted from storage.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse deleteDisk(String diskName, boolean deleteFromStorage) throws IOException, ServiceException
    {
        // Validate
        if (diskName == null)
        {
            throw new NullPointerException("diskName");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/disks/" + diskName + "?";
        if (deleteFromStorage == true)
        {
            url = url + "&comp=" + URLEncoder.encode("media");
        }
        
        // Create HTTP transport objects
        CustomHttpDelete httpRequest = new CustomHttpDelete(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        OperationResponse result = null;
        result = new OperationResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The Get Data Disk operation retrieves the specified data disk from a
    * virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157180.aspx for
    * more information)
    *
    * @param serviceName The name of your service.
    * @param deploymentName The name of the deployment.
    * @param roleName The name of the role.
    * @param logicalUnitNumber The logical unit number of the disk.
    * @return The Get Data Disk operation response.
    */
    @Override
    public Future<VirtualMachineDiskGetDataDiskResponse> getDataDiskAsync(final String serviceName, final String deploymentName, final String roleName, final int logicalUnitNumber)
    {
        return this.getClient().getExecutorService().submit(new Callable<VirtualMachineDiskGetDataDiskResponse>() { 
            @Override
            public VirtualMachineDiskGetDataDiskResponse call() throws Exception
            {
                return getDataDisk(serviceName, deploymentName, roleName, logicalUnitNumber);
            }
         });
    }
    
    /**
    * The Get Data Disk operation retrieves the specified data disk from a
    * virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157180.aspx for
    * more information)
    *
    * @param serviceName The name of your service.
    * @param deploymentName The name of the deployment.
    * @param roleName The name of the role.
    * @param logicalUnitNumber The logical unit number of the disk.
    * @return The Get Data Disk operation response.
    */
    @Override
    public VirtualMachineDiskGetDataDiskResponse getDataDisk(String serviceName, String deploymentName, String roleName, int logicalUnitNumber) throws IOException, ServiceException, ParserConfigurationException, SAXException, URISyntaxException
    {
        // Validate
        if (serviceName == null)
        {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null)
        {
            throw new NullPointerException("deploymentName");
        }
        if (roleName == null)
        {
            throw new NullPointerException("roleName");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "/roles/" + roleName + "/DataDisks/" + logicalUnitNumber;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        VirtualMachineDiskGetDataDiskResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new VirtualMachineDiskGetDataDiskResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("DataVirtualHardDisk");
        Element dataVirtualHardDiskElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (dataVirtualHardDiskElement != null)
        {
            NodeList elements2 = dataVirtualHardDiskElement.getElementsByTagName("HostCaching");
            Element hostCachingElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (hostCachingElement != null)
            {
                VirtualHardDiskHostCaching hostCachingInstance;
                hostCachingInstance = VirtualHardDiskHostCaching.valueOf(hostCachingElement.getTextContent());
                result.setHostCaching(hostCachingInstance);
            }
            
            NodeList elements3 = dataVirtualHardDiskElement.getElementsByTagName("DiskLabel");
            Element diskLabelElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
            if (diskLabelElement != null)
            {
                String diskLabelInstance;
                diskLabelInstance = diskLabelElement.getTextContent();
                result.setDiskLabel(diskLabelInstance);
            }
            
            NodeList elements4 = dataVirtualHardDiskElement.getElementsByTagName("DiskName");
            Element diskNameElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
            if (diskNameElement != null)
            {
                String diskNameInstance;
                diskNameInstance = diskNameElement.getTextContent();
                result.setDiskName(diskNameInstance);
            }
            
            NodeList elements5 = dataVirtualHardDiskElement.getElementsByTagName("Lun");
            Element lunElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
            if (lunElement != null && (lunElement.getTextContent() != null && lunElement.getTextContent().isEmpty() != true) == false)
            {
                int lunInstance;
                lunInstance = Integer.parseInt(lunElement.getTextContent());
                result.setLogicalUnitNumber(lunInstance);
            }
            
            NodeList elements6 = dataVirtualHardDiskElement.getElementsByTagName("LogicalDiskSizeInGB");
            Element logicalDiskSizeInGBElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
            if (logicalDiskSizeInGBElement != null)
            {
                double logicalDiskSizeInGBInstance;
                logicalDiskSizeInGBInstance = Double.parseDouble(logicalDiskSizeInGBElement.getTextContent());
                result.setLogicalDiskSizeInGB(logicalDiskSizeInGBInstance);
            }
            
            NodeList elements7 = dataVirtualHardDiskElement.getElementsByTagName("MediaLink");
            Element mediaLinkElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
            if (mediaLinkElement != null)
            {
                URI mediaLinkInstance;
                mediaLinkInstance = new URI(mediaLinkElement.getTextContent());
                result.setMediaLinkUri(mediaLinkInstance);
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The Get Disk operation retrieves a disk from the user image repository.
    * The disk can be an operating system disk or a data disk.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for
    * more information)
    *
    * @param diskName The name of the disk.
    * @return A virtual machine disk associated with your subscription.
    */
    @Override
    public Future<VirtualMachineDiskGetDiskResponse> getDiskAsync(final String diskName)
    {
        return this.getClient().getExecutorService().submit(new Callable<VirtualMachineDiskGetDiskResponse>() { 
            @Override
            public VirtualMachineDiskGetDiskResponse call() throws Exception
            {
                return getDisk(diskName);
            }
         });
    }
    
    /**
    * The Get Disk operation retrieves a disk from the user image repository.
    * The disk can be an operating system disk or a data disk.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for
    * more information)
    *
    * @param diskName The name of the disk.
    * @return A virtual machine disk associated with your subscription.
    */
    @Override
    public VirtualMachineDiskGetDiskResponse getDisk(String diskName) throws IOException, ServiceException, ParserConfigurationException, SAXException, URISyntaxException
    {
        // Validate
        if (diskName == null)
        {
            throw new NullPointerException("diskName");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/disks/" + diskName;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        VirtualMachineDiskGetDiskResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new VirtualMachineDiskGetDiskResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("Disk");
        Element diskElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (diskElement != null)
        {
            NodeList elements2 = diskElement.getElementsByTagName("AffinityGroup");
            Element affinityGroupElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (affinityGroupElement != null)
            {
                String affinityGroupInstance;
                affinityGroupInstance = affinityGroupElement.getTextContent();
                result.setAffinityGroup(affinityGroupInstance);
            }
            
            NodeList elements3 = diskElement.getElementsByTagName("Location");
            Element locationElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
            if (locationElement != null)
            {
                String locationInstance;
                locationInstance = locationElement.getTextContent();
                result.setLocation(locationInstance);
            }
            
            NodeList elements4 = diskElement.getElementsByTagName("Label");
            Element labelElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
            if (labelElement != null)
            {
                String labelInstance;
                labelInstance = labelElement.getTextContent();
                result.setLabel(labelInstance);
            }
            
            NodeList elements5 = diskElement.getElementsByTagName("LogicalDiskSizeInGB");
            Element logicalDiskSizeInGBElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
            if (logicalDiskSizeInGBElement != null)
            {
                double logicalDiskSizeInGBInstance;
                logicalDiskSizeInGBInstance = Double.parseDouble(logicalDiskSizeInGBElement.getTextContent());
                result.setLogicalSizeInGB(logicalDiskSizeInGBInstance);
            }
            
            NodeList elements6 = diskElement.getElementsByTagName("MediaLink");
            Element mediaLinkElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
            if (mediaLinkElement != null)
            {
                URI mediaLinkInstance;
                mediaLinkInstance = new URI(mediaLinkElement.getTextContent());
                result.setMediaLinkUri(mediaLinkInstance);
            }
            
            NodeList elements7 = diskElement.getElementsByTagName("Name");
            Element nameElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
            if (nameElement != null)
            {
                String nameInstance;
                nameInstance = nameElement.getTextContent();
                result.setName(nameInstance);
            }
            
            NodeList elements8 = diskElement.getElementsByTagName("OS");
            Element osElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
            if (osElement != null)
            {
                String osInstance;
                osInstance = osElement.getTextContent();
                result.setOperatingSystemType(osInstance);
            }
            
            NodeList elements9 = diskElement.getElementsByTagName("SourceImageName");
            Element sourceImageNameElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
            if (sourceImageNameElement != null)
            {
                String sourceImageNameInstance;
                sourceImageNameInstance = sourceImageNameElement.getTextContent();
                result.setSourceImageName(sourceImageNameInstance);
            }
            
            NodeList elements10 = diskElement.getElementsByTagName("AttachedTo");
            Element attachedToElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
            if (attachedToElement != null)
            {
                VirtualMachineDiskGetDiskResponse.VirtualMachineDiskUsageDetails attachedToInstance = new VirtualMachineDiskGetDiskResponse.VirtualMachineDiskUsageDetails();
                result.setUsageDetails(attachedToInstance);
                
                NodeList elements11 = attachedToElement.getElementsByTagName("HostedServiceName");
                Element hostedServiceNameElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                if (hostedServiceNameElement != null)
                {
                    String hostedServiceNameInstance;
                    hostedServiceNameInstance = hostedServiceNameElement.getTextContent();
                    attachedToInstance.setHostedServiceName(hostedServiceNameInstance);
                }
                
                NodeList elements12 = attachedToElement.getElementsByTagName("DeploymentName");
                Element deploymentNameElement = elements12.getLength() > 0 ? ((Element)elements12.item(0)) : null;
                if (deploymentNameElement != null)
                {
                    String deploymentNameInstance;
                    deploymentNameInstance = deploymentNameElement.getTextContent();
                    attachedToInstance.setDeploymentName(deploymentNameInstance);
                }
                
                NodeList elements13 = attachedToElement.getElementsByTagName("RoleName");
                Element roleNameElement = elements13.getLength() > 0 ? ((Element)elements13.item(0)) : null;
                if (roleNameElement != null)
                {
                    String roleNameInstance;
                    roleNameInstance = roleNameElement.getTextContent();
                    attachedToInstance.setRoleName(roleNameInstance);
                }
            }
            
            NodeList elements14 = diskElement.getElementsByTagName("IsCorrupted");
            Element isCorruptedElement = elements14.getLength() > 0 ? ((Element)elements14.item(0)) : null;
            if (isCorruptedElement != null && (isCorruptedElement.getTextContent() != null && isCorruptedElement.getTextContent().isEmpty() != true) == false)
            {
                boolean isCorruptedInstance;
                isCorruptedInstance = Boolean.parseBoolean(isCorruptedElement.getTextContent());
                result.setIsCorrupted(isCorruptedInstance);
            }
            
            NodeList elements15 = diskElement.getElementsByTagName("IsPremium");
            Element isPremiumElement = elements15.getLength() > 0 ? ((Element)elements15.item(0)) : null;
            if (isPremiumElement != null && (isPremiumElement.getTextContent() != null && isPremiumElement.getTextContent().isEmpty() != true) == false)
            {
                boolean isPremiumInstance;
                isPremiumInstance = Boolean.parseBoolean(isPremiumElement.getTextContent());
                result.setIsPremium(isPremiumInstance);
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The List Disks operation retrieves a list of the disks in your image
    * repository.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157176.aspx for
    * more information)
    *
    * @return The List Disks operation response.
    */
    @Override
    public Future<VirtualMachineDiskListResponse> listDisksAsync()
    {
        return this.getClient().getExecutorService().submit(new Callable<VirtualMachineDiskListResponse>() { 
            @Override
            public VirtualMachineDiskListResponse call() throws Exception
            {
                return listDisks();
            }
         });
    }
    
    /**
    * The List Disks operation retrieves a list of the disks in your image
    * repository.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157176.aspx for
    * more information)
    *
    * @return The List Disks operation response.
    */
    @Override
    public VirtualMachineDiskListResponse listDisks() throws IOException, ServiceException, ParserConfigurationException, SAXException, URISyntaxException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/disks";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        VirtualMachineDiskListResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new VirtualMachineDiskListResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("Disks");
        Element disksSequenceElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (disksSequenceElement != null)
        {
            for (int i1 = 0; i1 < disksSequenceElement.getElementsByTagName("Disk").getLength(); i1 = i1 + 1)
            {
                org.w3c.dom.Element disksElement = ((org.w3c.dom.Element)disksSequenceElement.getElementsByTagName("Disk").item(i1));
                VirtualMachineDiskListResponse.VirtualMachineDisk diskInstance = new VirtualMachineDiskListResponse.VirtualMachineDisk();
                result.getDisks().add(diskInstance);
                
                NodeList elements2 = disksElement.getElementsByTagName("AffinityGroup");
                Element affinityGroupElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
                if (affinityGroupElement != null)
                {
                    String affinityGroupInstance;
                    affinityGroupInstance = affinityGroupElement.getTextContent();
                    diskInstance.setAffinityGroup(affinityGroupInstance);
                }
                
                NodeList elements3 = disksElement.getElementsByTagName("Location");
                Element locationElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                if (locationElement != null)
                {
                    String locationInstance;
                    locationInstance = locationElement.getTextContent();
                    diskInstance.setLocation(locationInstance);
                }
                
                NodeList elements4 = disksElement.getElementsByTagName("Label");
                Element labelElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                if (labelElement != null)
                {
                    String labelInstance;
                    labelInstance = labelElement.getTextContent();
                    diskInstance.setLabel(labelInstance);
                }
                
                NodeList elements5 = disksElement.getElementsByTagName("LogicalDiskSizeInGB");
                Element logicalDiskSizeInGBElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                if (logicalDiskSizeInGBElement != null)
                {
                    double logicalDiskSizeInGBInstance;
                    logicalDiskSizeInGBInstance = Double.parseDouble(logicalDiskSizeInGBElement.getTextContent());
                    diskInstance.setLogicalSizeInGB(logicalDiskSizeInGBInstance);
                }
                
                NodeList elements6 = disksElement.getElementsByTagName("MediaLink");
                Element mediaLinkElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                if (mediaLinkElement != null)
                {
                    URI mediaLinkInstance;
                    mediaLinkInstance = new URI(mediaLinkElement.getTextContent());
                    diskInstance.setMediaLinkUri(mediaLinkInstance);
                }
                
                NodeList elements7 = disksElement.getElementsByTagName("Name");
                Element nameElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                if (nameElement != null)
                {
                    String nameInstance;
                    nameInstance = nameElement.getTextContent();
                    diskInstance.setName(nameInstance);
                }
                
                NodeList elements8 = disksElement.getElementsByTagName("OS");
                Element osElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                if (osElement != null)
                {
                    String osInstance;
                    osInstance = osElement.getTextContent();
                    diskInstance.setOperatingSystemType(osInstance);
                }
                
                NodeList elements9 = disksElement.getElementsByTagName("SourceImageName");
                Element sourceImageNameElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
                if (sourceImageNameElement != null)
                {
                    String sourceImageNameInstance;
                    sourceImageNameInstance = sourceImageNameElement.getTextContent();
                    diskInstance.setSourceImageName(sourceImageNameInstance);
                }
                
                NodeList elements10 = disksElement.getElementsByTagName("AttachedTo");
                Element attachedToElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
                if (attachedToElement != null)
                {
                    VirtualMachineDiskListResponse.VirtualMachineDiskUsageDetails attachedToInstance = new VirtualMachineDiskListResponse.VirtualMachineDiskUsageDetails();
                    diskInstance.setUsageDetails(attachedToInstance);
                    
                    NodeList elements11 = attachedToElement.getElementsByTagName("HostedServiceName");
                    Element hostedServiceNameElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                    if (hostedServiceNameElement != null)
                    {
                        String hostedServiceNameInstance;
                        hostedServiceNameInstance = hostedServiceNameElement.getTextContent();
                        attachedToInstance.setHostedServiceName(hostedServiceNameInstance);
                    }
                    
                    NodeList elements12 = attachedToElement.getElementsByTagName("DeploymentName");
                    Element deploymentNameElement = elements12.getLength() > 0 ? ((Element)elements12.item(0)) : null;
                    if (deploymentNameElement != null)
                    {
                        String deploymentNameInstance;
                        deploymentNameInstance = deploymentNameElement.getTextContent();
                        attachedToInstance.setDeploymentName(deploymentNameInstance);
                    }
                    
                    NodeList elements13 = attachedToElement.getElementsByTagName("RoleName");
                    Element roleNameElement = elements13.getLength() > 0 ? ((Element)elements13.item(0)) : null;
                    if (roleNameElement != null)
                    {
                        String roleNameInstance;
                        roleNameInstance = roleNameElement.getTextContent();
                        attachedToInstance.setRoleName(roleNameInstance);
                    }
                }
                
                NodeList elements14 = disksElement.getElementsByTagName("IsCorrupted");
                Element isCorruptedElement = elements14.getLength() > 0 ? ((Element)elements14.item(0)) : null;
                if (isCorruptedElement != null && (isCorruptedElement.getTextContent() != null && isCorruptedElement.getTextContent().isEmpty() != true) == false)
                {
                    boolean isCorruptedInstance;
                    isCorruptedInstance = Boolean.parseBoolean(isCorruptedElement.getTextContent());
                    diskInstance.setIsCorrupted(isCorruptedInstance);
                }
                
                NodeList elements15 = disksElement.getElementsByTagName("IsPremium");
                Element isPremiumElement = elements15.getLength() > 0 ? ((Element)elements15.item(0)) : null;
                if (isPremiumElement != null && (isPremiumElement.getTextContent() != null && isPremiumElement.getTextContent().isEmpty() != true) == false)
                {
                    boolean isPremiumInstance;
                    isPremiumInstance = Boolean.parseBoolean(isPremiumElement.getTextContent());
                    diskInstance.setIsPremium(isPremiumInstance);
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The Update Data Disk operation updates the specified data disk attached
    * to the specified virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157190.aspx for
    * more information)
    *
    * @param serviceName The name of your service.
    * @param deploymentName The name of the deployment.
    * @param roleName The name of the role to add the data disk to.
    * @param logicalUnitNumber The logical unit number of the disk.
    * @param parameters Parameters supplied to the Update Virtual Machine Data
    * Disk operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> updateDataDiskAsync(final String serviceName, final String deploymentName, final String roleName, final int logicalUnitNumber, final VirtualMachineDiskUpdateDataDiskParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception
            {
                return updateDataDisk(serviceName, deploymentName, roleName, logicalUnitNumber, parameters);
            }
         });
    }
    
    /**
    * The Update Data Disk operation updates the specified data disk attached
    * to the specified virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157190.aspx for
    * more information)
    *
    * @param serviceName The name of your service.
    * @param deploymentName The name of the deployment.
    * @param roleName The name of the role to add the data disk to.
    * @param logicalUnitNumber The logical unit number of the disk.
    * @param parameters Parameters supplied to the Update Virtual Machine Data
    * Disk operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse updateDataDisk(String serviceName, String deploymentName, String roleName, int logicalUnitNumber, VirtualMachineDiskUpdateDataDiskParameters parameters) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException
    {
        // Validate
        if (serviceName == null)
        {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null)
        {
            throw new NullPointerException("deploymentName");
        }
        if (roleName == null)
        {
            throw new NullPointerException("roleName");
        }
        if (parameters == null)
        {
            throw new NullPointerException("parameters");
        }
        if (parameters.getMediaLinkUri() == null)
        {
            throw new NullPointerException("parameters.MediaLinkUri");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "/roles/" + roleName + "/DataDisks/" + logicalUnitNumber;
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element dataVirtualHardDiskElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisk");
        requestDoc.appendChild(dataVirtualHardDiskElement);
        
        Element hostCachingElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "HostCaching");
        hostCachingElement.appendChild(requestDoc.createTextNode(parameters.getHostCaching().toString()));
        dataVirtualHardDiskElement.appendChild(hostCachingElement);
        
        if (parameters.getDiskLabel() != null)
        {
            Element diskLabelElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "DiskLabel");
            diskLabelElement.appendChild(requestDoc.createTextNode(parameters.getDiskLabel()));
            dataVirtualHardDiskElement.appendChild(diskLabelElement);
        }
        
        if (parameters.getDiskName() != null)
        {
            Element diskNameElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "DiskName");
            diskNameElement.appendChild(requestDoc.createTextNode(parameters.getDiskName()));
            dataVirtualHardDiskElement.appendChild(diskNameElement);
        }
        
        if (parameters.getLogicalUnitNumber() != null)
        {
            Element lunElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Lun");
            lunElement.appendChild(requestDoc.createTextNode(Integer.toString(parameters.getLogicalUnitNumber())));
            dataVirtualHardDiskElement.appendChild(lunElement);
        }
        
        Element logicalDiskSizeInGBElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "LogicalDiskSizeInGB");
        logicalDiskSizeInGBElement.appendChild(requestDoc.createTextNode(Double.toString(parameters.getLogicalDiskSizeInGB())));
        dataVirtualHardDiskElement.appendChild(logicalDiskSizeInGBElement);
        
        Element mediaLinkElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "MediaLink");
        mediaLinkElement.appendChild(requestDoc.createTextNode(parameters.getMediaLinkUri().toString()));
        dataVirtualHardDiskElement.appendChild(mediaLinkElement);
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        OperationResponse result = null;
        result = new OperationResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The Add Disk operation adds a disk to the user image repository. The disk
    * can be an operating system disk or a data disk.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for
    * more information)
    *
    * @param diskName The name of the disk being updated.
    * @param parameters Parameters supplied to the Update Virtual Machine Disk
    * operation.
    * @return A virtual machine disk associated with your subscription.
    */
    @Override
    public Future<VirtualMachineDiskUpdateDiskResponse> updateDiskAsync(final String diskName, final VirtualMachineDiskUpdateDiskParameters parameters)
    {
        return this.getClient().getExecutorService().submit(new Callable<VirtualMachineDiskUpdateDiskResponse>() { 
            @Override
            public VirtualMachineDiskUpdateDiskResponse call() throws Exception
            {
                return updateDisk(diskName, parameters);
            }
         });
    }
    
    /**
    * The Add Disk operation adds a disk to the user image repository. The disk
    * can be an operating system disk or a data disk.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for
    * more information)
    *
    * @param diskName The name of the disk being updated.
    * @param parameters Parameters supplied to the Update Virtual Machine Disk
    * operation.
    * @return A virtual machine disk associated with your subscription.
    */
    @Override
    public VirtualMachineDiskUpdateDiskResponse updateDisk(String diskName, VirtualMachineDiskUpdateDiskParameters parameters) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException, URISyntaxException
    {
        // Validate
        if (diskName == null)
        {
            throw new NullPointerException("diskName");
        }
        if (parameters == null)
        {
            throw new NullPointerException("parameters");
        }
        if (parameters.getLabel() == null)
        {
            throw new NullPointerException("parameters.Label");
        }
        if (parameters.getName() == null)
        {
            throw new NullPointerException("parameters.Name");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/disks/" + diskName;
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element diskElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Disk");
        requestDoc.appendChild(diskElement);
        
        if (parameters.getHasOperatingSystem() != null)
        {
            Element hasOperatingSystemElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "HasOperatingSystem");
            hasOperatingSystemElement.appendChild(requestDoc.createTextNode(Boolean.toString(parameters.getHasOperatingSystem()).toLowerCase()));
            diskElement.appendChild(hasOperatingSystemElement);
        }
        
        if (parameters.getOperatingSystemType() != null)
        {
            Element osElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "OS");
            osElement.appendChild(requestDoc.createTextNode(parameters.getOperatingSystemType()));
            diskElement.appendChild(osElement);
        }
        
        Element labelElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Label");
        labelElement.appendChild(requestDoc.createTextNode(parameters.getLabel()));
        diskElement.appendChild(labelElement);
        
        if (parameters.getMediaLinkUri() != null)
        {
            Element mediaLinkElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "MediaLink");
            mediaLinkElement.appendChild(requestDoc.createTextNode(parameters.getMediaLinkUri().toString()));
            diskElement.appendChild(mediaLinkElement);
        }
        
        Element nameElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "Name");
        nameElement.appendChild(requestDoc.createTextNode(parameters.getName()));
        diskElement.appendChild(nameElement);
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        VirtualMachineDiskUpdateDiskResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new VirtualMachineDiskUpdateDiskResponse();
        DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder2 = documentBuilderFactory2.newDocumentBuilder();
        Document responseDoc = documentBuilder2.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagName("Disk");
        Element diskElement2 = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (diskElement2 != null)
        {
            NodeList elements2 = diskElement2.getElementsByTagName("OS");
            Element osElement2 = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (osElement2 != null)
            {
                String osInstance;
                osInstance = osElement2.getTextContent();
                result.setOperatingSystem(osInstance);
            }
            
            NodeList elements3 = diskElement2.getElementsByTagName("Label");
            Element labelElement2 = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
            if (labelElement2 != null)
            {
                String labelInstance;
                labelInstance = labelElement2.getTextContent();
                result.setLabel(labelInstance);
            }
            
            NodeList elements4 = diskElement2.getElementsByTagName("AffinityGroup");
            Element affinityGroupElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
            if (affinityGroupElement != null)
            {
                String affinityGroupInstance;
                affinityGroupInstance = affinityGroupElement.getTextContent();
                result.setAffinityGroup(affinityGroupInstance);
            }
            
            NodeList elements5 = diskElement2.getElementsByTagName("Location");
            Element locationElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
            if (locationElement != null)
            {
                String locationInstance;
                locationInstance = locationElement.getTextContent();
                result.setLocation(locationInstance);
            }
            
            NodeList elements6 = diskElement2.getElementsByTagName("LogicalDiskSizeInGB");
            Element logicalDiskSizeInGBElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
            if (logicalDiskSizeInGBElement != null)
            {
                double logicalDiskSizeInGBInstance;
                logicalDiskSizeInGBInstance = Double.parseDouble(logicalDiskSizeInGBElement.getTextContent());
                result.setLogicalSizeInGB(logicalDiskSizeInGBInstance);
            }
            
            NodeList elements7 = diskElement2.getElementsByTagName("MediaLink");
            Element mediaLinkElement2 = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
            if (mediaLinkElement2 != null)
            {
                URI mediaLinkInstance;
                mediaLinkInstance = new URI(mediaLinkElement2.getTextContent());
                result.setMediaLinkUri(mediaLinkInstance);
            }
            
            NodeList elements8 = diskElement2.getElementsByTagName("Name");
            Element nameElement2 = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
            if (nameElement2 != null)
            {
                String nameInstance;
                nameInstance = nameElement2.getTextContent();
                result.setName(nameInstance);
            }
            
            NodeList elements9 = diskElement2.getElementsByTagName("IsPremium");
            Element isPremiumElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
            if (isPremiumElement != null && (isPremiumElement.getTextContent() != null && isPremiumElement.getTextContent().isEmpty() != true) == false)
            {
                boolean isPremiumInstance;
                isPremiumInstance = Boolean.parseBoolean(isPremiumElement.getTextContent());
                result.setIsPremium(isPremiumInstance);
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
}
