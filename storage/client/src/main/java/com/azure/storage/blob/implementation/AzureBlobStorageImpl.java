/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.storage.blob.implementation;

import com.azure.core.ServiceClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.implementation.RestProxy;
import com.azure.storage.blob.AppendBlobs;
import com.azure.storage.blob.AzureBlobStorage;
import com.azure.storage.blob.Blobs;
import com.azure.storage.blob.BlockBlobs;
import com.azure.storage.blob.Containers;
import com.azure.storage.blob.PageBlobs;
import com.azure.storage.blob.Services;
import reactor.util.annotation.NonNull;

/**
 * Initializes a new instance of the AzureBlobStorage type.
 */
public final class AzureBlobStorageImpl extends ServiceClient implements AzureBlobStorage {
    /**
     * The URL of the service account, container, or blob that is the targe of the desired operation.
     */
    private String url;

    /**
     * Gets The URL of the service account, container, or blob that is the targe of the desired operation.
     *
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Sets The URL of the service account, container, or blob that is the targe of the desired operation.
     *
     * @param url the url value.
     * @return the service client itself.
     */
    public AzureBlobStorageImpl withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Specifies the version of the operation to use for this request.
     */
    private String version;

    /**
     * Gets Specifies the version of the operation to use for this request.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Sets Specifies the version of the operation to use for this request.
     *
     * @param version the version value.
     * @return the service client itself.
     */
    public AzureBlobStorageImpl withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * The Services object to access its operations.
     */
    private Services services;

    /**
     * Gets the Services object to access its operations.
     *
     * @return the Services object.
     */
    public Services services() {
        return this.services;
    }

    /**
     * The Containers object to access its operations.
     */
    private Containers containers;

    /**
     * Gets the Containers object to access its operations.
     *
     * @return the Containers object.
     */
    public Containers containers() {
        return this.containers;
    }

    /**
     * The Blobs object to access its operations.
     */
    private Blobs blobs;

    /**
     * Gets the Blobs object to access its operations.
     *
     * @return the Blobs object.
     */
    public Blobs blobs() {
        return this.blobs;
    }

    /**
     * The PageBlobs object to access its operations.
     */
    private PageBlobs pageBlobs;

    /**
     * Gets the PageBlobs object to access its operations.
     *
     * @return the PageBlobs object.
     */
    public PageBlobs pageBlobs() {
        return this.pageBlobs;
    }

    /**
     * The AppendBlobs object to access its operations.
     */
    private AppendBlobs appendBlobs;

    /**
     * Gets the AppendBlobs object to access its operations.
     *
     * @return the AppendBlobs object.
     */
    public AppendBlobs appendBlobs() {
        return this.appendBlobs;
    }

    /**
     * The BlockBlobs object to access its operations.
     */
    private BlockBlobs blockBlobs;

    /**
     * Gets the BlockBlobs object to access its operations.
     *
     * @return the BlockBlobs object.
     */
    public BlockBlobs blockBlobs() {
        return this.blockBlobs;
    }

    /**
     * Initializes an instance of AzureBlobStorage client.
     */
    public AzureBlobStorageImpl() {
        this(RestProxy.createDefaultPipeline());
    }

    /**
     * Initializes an instance of AzureBlobStorage client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public AzureBlobStorageImpl(@NonNull HttpPipeline httpPipeline) {
        super(httpPipeline);
        this.version = "2018-03-28";
        this.services = new ServicesImpl(this);
        this.containers = new ContainersImpl(this);
        this.blobs = new BlobsImpl(this);
        this.pageBlobs = new PageBlobsImpl(this);
        this.appendBlobs = new AppendBlobsImpl(this);
        this.blockBlobs = new BlockBlobsImpl(this);
    }
}
