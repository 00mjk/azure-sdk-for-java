/**
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.batch.protocol.models;

import org.joda.time.DateTime;
import org.joda.time.Period;

/**
 * The schedule according to which jobs will be created.
 */
public class Schedule {
    /**
     * Gets or sets the earliest time at which any job may be created under
     * this job schedule. If you do not specify a doNotRunUntil time, the
     * schedule becomes ready to create jobs immediately.
     */
    private DateTime doNotRunUntil;

    /**
     * Gets or sets a time after which no job will be created under this job
     * schedule.  The schedule will move to the completed state as soon as
     * this deadline is past and there is no active job under this job
     * schedule.
     */
    private DateTime doNotRunAfter;

    /**
     * Gets or sets the time interval, starting from the time at which the
     * schedule indicates a job should be created, within which a job must be
     * created.  If a job is not created within the startWindow interval,
     * then the 'opportunity' is lost; no job will be created until the next
     * recurrence of the schedule.
     */
    private Period startWindow;

    /**
     * Gets or sets the time interval between the start times of two
     * successive jobs under the job schedule. A job schedule can have at
     * most one active job under it at any given time.
     */
    private Period recurrenceInterval;

    /**
     * Get the doNotRunUntil value.
     *
     * @return the doNotRunUntil value
     */
    public DateTime getDoNotRunUntil() {
        return this.doNotRunUntil;
    }

    /**
     * Set the doNotRunUntil value.
     *
     * @param doNotRunUntil the doNotRunUntil value to set
     */
    public void setDoNotRunUntil(DateTime doNotRunUntil) {
        this.doNotRunUntil = doNotRunUntil;
    }

    /**
     * Get the doNotRunAfter value.
     *
     * @return the doNotRunAfter value
     */
    public DateTime getDoNotRunAfter() {
        return this.doNotRunAfter;
    }

    /**
     * Set the doNotRunAfter value.
     *
     * @param doNotRunAfter the doNotRunAfter value to set
     */
    public void setDoNotRunAfter(DateTime doNotRunAfter) {
        this.doNotRunAfter = doNotRunAfter;
    }

    /**
     * Get the startWindow value.
     *
     * @return the startWindow value
     */
    public Period getStartWindow() {
        return this.startWindow;
    }

    /**
     * Set the startWindow value.
     *
     * @param startWindow the startWindow value to set
     */
    public void setStartWindow(Period startWindow) {
        this.startWindow = startWindow;
    }

    /**
     * Get the recurrenceInterval value.
     *
     * @return the recurrenceInterval value
     */
    public Period getRecurrenceInterval() {
        return this.recurrenceInterval;
    }

    /**
     * Set the recurrenceInterval value.
     *
     * @param recurrenceInterval the recurrenceInterval value to set
     */
    public void setRecurrenceInterval(Period recurrenceInterval) {
        this.recurrenceInterval = recurrenceInterval;
    }

}
