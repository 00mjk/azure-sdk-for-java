/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.management.website;

import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.website.models.CsmMoveResourceEnvelope;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.squareup.okhttp.ResponseBody;
import java.io.IOException;
import retrofit.Call;
import retrofit.http.Body;
import retrofit.http.Header;
import retrofit.http.Headers;
import retrofit.http.Path;
import retrofit.http.POST;
import retrofit.http.Query;

/**
 * An instance of this class provides access to all the operations defined
 * in GlobalResourceGroupsOperations.
 */
public interface GlobalResourceGroupsOperations {
    /**
     * The interface defining all the services for GlobalResourceGroupsOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface GlobalResourceGroupsService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources")
        Call<ResponseBody> moveResources(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Body CsmMoveResourceEnvelope moveResourceEnvelope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

    }
    /**
     *
     * @param resourceGroupName the String value
     * @param moveResourceEnvelope the CsmMoveResourceEnvelope value
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ServiceResponse object if successful.
     */
    ServiceResponse<Void> moveResources(String resourceGroupName, CsmMoveResourceEnvelope moveResourceEnvelope) throws CloudException, IOException, IllegalArgumentException;

    /**
     *
     * @param resourceGroupName the String value
     * @param moveResourceEnvelope the CsmMoveResourceEnvelope value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> moveResourcesAsync(String resourceGroupName, CsmMoveResourceEnvelope moveResourceEnvelope, final ServiceCallback<Void> serviceCallback);

}
