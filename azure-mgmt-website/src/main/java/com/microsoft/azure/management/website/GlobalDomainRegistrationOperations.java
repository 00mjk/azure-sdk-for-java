/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.management.website;

import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.website.models.DomainAvailablilityCheckResult;
import com.microsoft.azure.management.website.models.DomainCollection;
import com.microsoft.azure.management.website.models.DomainControlCenterSsoRequest;
import com.microsoft.azure.management.website.models.DomainRecommendationSearchParameters;
import com.microsoft.azure.management.website.models.DomainRegistrationInput;
import com.microsoft.azure.management.website.models.NameIdentifier;
import com.microsoft.azure.management.website.models.NameIdentifierCollection;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.squareup.okhttp.ResponseBody;
import java.io.IOException;
import retrofit.Call;
import retrofit.http.Body;
import retrofit.http.GET;
import retrofit.http.Header;
import retrofit.http.Headers;
import retrofit.http.Path;
import retrofit.http.POST;
import retrofit.http.Query;

/**
 * An instance of this class provides access to all the operations defined
 * in GlobalDomainRegistrationOperations.
 */
public interface GlobalDomainRegistrationOperations {
    /**
     * The interface defining all the services for GlobalDomainRegistrationOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface GlobalDomainRegistrationService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains")
        Call<ResponseBody> getAllDomains(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest")
        Call<ResponseBody> getDomainControlCenterSsoRequest(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation")
        Call<ResponseBody> validateDomainPurchaseInformation(@Path("subscriptionId") String subscriptionId, @Body DomainRegistrationInput domainRegistrationInput, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability")
        Call<ResponseBody> checkDomainAvailability(@Path("subscriptionId") String subscriptionId, @Body NameIdentifier identifier, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations")
        Call<ResponseBody> listDomainRecommendations(@Path("subscriptionId") String subscriptionId, @Body DomainRecommendationSearchParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage);

    }
    /**
     * Lists all domains in a subscription.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the DomainCollection object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<DomainCollection> getAllDomains() throws CloudException, IOException, IllegalArgumentException;

    /**
     * Lists all domains in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getAllDomainsAsync(final ServiceCallback<DomainCollection> serviceCallback);

    /**
     * Generates a single sign on request for domain management portal.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the DomainControlCenterSsoRequest object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<DomainControlCenterSsoRequest> getDomainControlCenterSsoRequest() throws CloudException, IOException, IllegalArgumentException;

    /**
     * Generates a single sign on request for domain management portal.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDomainControlCenterSsoRequestAsync(final ServiceCallback<DomainControlCenterSsoRequest> serviceCallback);

    /**
     * Validates domain registration information.
     *
     * @param domainRegistrationInput Domain registration information
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<Object> validateDomainPurchaseInformation(DomainRegistrationInput domainRegistrationInput) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Validates domain registration information.
     *
     * @param domainRegistrationInput Domain registration information
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> validateDomainPurchaseInformationAsync(DomainRegistrationInput domainRegistrationInput, final ServiceCallback<Object> serviceCallback);

    /**
     * Checks if a domain is available for registration.
     *
     * @param identifier Name of the domain
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the DomainAvailablilityCheckResult object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<DomainAvailablilityCheckResult> checkDomainAvailability(NameIdentifier identifier) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Checks if a domain is available for registration.
     *
     * @param identifier Name of the domain
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> checkDomainAvailabilityAsync(NameIdentifier identifier, final ServiceCallback<DomainAvailablilityCheckResult> serviceCallback);

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param parameters Domain recommendation search parameters
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the NameIdentifierCollection object wrapped in ServiceResponse if successful.
     */
    ServiceResponse<NameIdentifierCollection> listDomainRecommendations(DomainRecommendationSearchParameters parameters) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param parameters Domain recommendation search parameters
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> listDomainRecommendationsAsync(DomainRecommendationSearchParameters parameters, final ServiceCallback<NameIdentifierCollection> serviceCallback);

}
