/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.servicebus;

import com.microsoft.windowsazure.core.ServiceOperations;
import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.management.servicebus.models.AccessRight;
import com.microsoft.windowsazure.management.servicebus.models.CountDetails;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusConnectionDetail;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusConnectionDetailsResponse;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusSharedAccessAuthorizationRule;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusTopic;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusTopicResponse;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusTopicsResponse;
import com.microsoft.windowsazure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.TimeZone;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
* The Service Bus Management API includes operations for managing Service Bus
* topics for a namespace.
*/
public class TopicOperationsImpl implements ServiceOperations<ServiceBusManagementClientImpl>, TopicOperations
{
    /**
    * Initializes a new instance of the TopicOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    TopicOperationsImpl(ServiceBusManagementClientImpl client)
    {
        this.client = client;
    }
    
    private ServiceBusManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.servicebus.ServiceBusManagementClientImpl.
    * @return The Client value.
    */
    public ServiceBusManagementClientImpl getClient()
    {
        return this.client;
    }
    
    /**
    * Creates a new topic. Once created, this topic resource manifest is
    * immutable. This operation is not idempotent. Repeating the create call,
    * after a topic with same name has been created successfully, will result
    * in a 409 Conflict error message.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh780728.aspx for
    * more information)
    *
    * @param namespaceName The namespace name.
    * @param topic The Service Bus topic.
    * @return A response to a request for a particular topic.
    */
    @Override
    public Future<ServiceBusTopicResponse> createAsync(final String namespaceName, final ServiceBusTopic topic)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusTopicResponse>() { 
            @Override
            public ServiceBusTopicResponse call() throws Exception
            {
                return create(namespaceName, topic);
            }
         });
    }
    
    /**
    * Creates a new topic. Once created, this topic resource manifest is
    * immutable. This operation is not idempotent. Repeating the create call,
    * after a topic with same name has been created successfully, will result
    * in a 409 Conflict error message.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh780728.aspx for
    * more information)
    *
    * @param namespaceName The namespace name.
    * @param topic The Service Bus topic.
    * @throws ParserConfigurationException Thrown if there was an error
    * configuring the parser for the response body.
    * @throws SAXException Thrown if there was an error parsing the response
    * body.
    * @throws TransformerException Thrown if there was an error creating the
    * DOM transformer.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return A response to a request for a particular topic.
    */
    @Override
    public ServiceBusTopicResponse create(String namespaceName, ServiceBusTopic topic) throws ParserConfigurationException, SAXException, TransformerException, IOException, ServiceException, ParseException, URISyntaxException
    {
        // Validate
        if (namespaceName == null)
        {
            throw new NullPointerException("namespaceName");
        }
        if (topic == null)
        {
            throw new NullPointerException("topic");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("namespaceName", namespaceName);
            tracingParameters.put("topic", topic);
            CloudTracing.enter(invocationId, this, "createAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/topics/" + topic.getName() + "/";
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        httpRequest.setHeader("type", "entry");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        httpRequest.setHeader("x-process-at", "ServiceBus");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element entryElement = requestDoc.createElementNS("http://www.w3.org/2005/Atom", "entry");
        requestDoc.appendChild(entryElement);
        
        Element contentElement = requestDoc.createElementNS("http://www.w3.org/2005/Atom", "content");
        entryElement.appendChild(contentElement);
        
        Attr typeAttribute = requestDoc.createAttribute("type");
        typeAttribute.setValue("application/atom+xml;type=entry;charset=utf-8");
        contentElement.setAttributeNode(typeAttribute);
        
        Element topicDescriptionElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "TopicDescription");
        contentElement.appendChild(topicDescriptionElement);
        
        if (topic.getDefaultMessageTimeToLive() != null)
        {
            Element defaultMessageTimeToLiveElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DefaultMessageTimeToLive");
            defaultMessageTimeToLiveElement.appendChild(requestDoc.createTextNode(topic.getDefaultMessageTimeToLive()));
            topicDescriptionElement.appendChild(defaultMessageTimeToLiveElement);
        }
        
        Element maxSizeInMegabytesElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "MaxSizeInMegabytes");
        maxSizeInMegabytesElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getMaxSizeInMegabytes())));
        topicDescriptionElement.appendChild(maxSizeInMegabytesElement);
        
        Element requiresDuplicateDetectionElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "RequiresDuplicateDetection");
        requiresDuplicateDetectionElement.appendChild(requestDoc.createTextNode(Boolean.toString(topic.isRequiresDuplicateDetection()).toLowerCase()));
        topicDescriptionElement.appendChild(requiresDuplicateDetectionElement);
        
        if (topic.getDuplicateDetectionHistoryTimeWindow() != null)
        {
            Element duplicateDetectionHistoryTimeWindowElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DuplicateDetectionHistoryTimeWindow");
            duplicateDetectionHistoryTimeWindowElement.appendChild(requestDoc.createTextNode(topic.getDuplicateDetectionHistoryTimeWindow()));
            topicDescriptionElement.appendChild(duplicateDetectionHistoryTimeWindowElement);
        }
        
        Element enableBatchedOperationsElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EnableBatchedOperations");
        enableBatchedOperationsElement.appendChild(requestDoc.createTextNode(Boolean.toString(topic.isEnableBatchedOperations()).toLowerCase()));
        topicDescriptionElement.appendChild(enableBatchedOperationsElement);
        
        Element sizeInBytesElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SizeInBytes");
        sizeInBytesElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getSizeInBytes())));
        topicDescriptionElement.appendChild(sizeInBytesElement);
        
        Element filteringMessagesBeforePublishingElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "FilteringMessagesBeforePublishing");
        filteringMessagesBeforePublishingElement.appendChild(requestDoc.createTextNode(Boolean.toString(topic.isFilteringMessagesBeforePublishing()).toLowerCase()));
        topicDescriptionElement.appendChild(filteringMessagesBeforePublishingElement);
        
        Element isAnonymousAccessibleElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "IsAnonymousAccessible");
        isAnonymousAccessibleElement.appendChild(requestDoc.createTextNode(Boolean.toString(topic.isAnonymousAccessible()).toLowerCase()));
        topicDescriptionElement.appendChild(isAnonymousAccessibleElement);
        
        if (topic.getAuthorizationRules() != null)
        {
            Element authorizationRulesSequenceElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRules");
            for (ServiceBusSharedAccessAuthorizationRule authorizationRulesItem : topic.getAuthorizationRules())
            {
                Element authorizationRuleElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRule");
                authorizationRulesSequenceElement.appendChild(authorizationRuleElement);
                
                Attr typeAttribute2 = requestDoc.createAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "type");
                typeAttribute2.setValue("SharedAccessAuthorizationRule");
                authorizationRuleElement.setAttributeNode(typeAttribute2);
                
                if (authorizationRulesItem.getClaimType() != null)
                {
                    Element claimTypeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                    claimTypeElement.appendChild(requestDoc.createTextNode(authorizationRulesItem.getClaimType()));
                    authorizationRuleElement.appendChild(claimTypeElement);
                }
                
                if (authorizationRulesItem.getClaimValue() != null)
                {
                    Element claimValueElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                    claimValueElement.appendChild(requestDoc.createTextNode(authorizationRulesItem.getClaimValue()));
                    authorizationRuleElement.appendChild(claimValueElement);
                }
                
                if (authorizationRulesItem.getRights() != null)
                {
                    Element rightsSequenceElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                    for (AccessRight rightsItem : authorizationRulesItem.getRights())
                    {
                        Element rightsItemElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights");
                        rightsItemElement.appendChild(requestDoc.createTextNode(rightsItem.toString()));
                        rightsSequenceElement.appendChild(rightsItemElement);
                    }
                    authorizationRuleElement.appendChild(rightsSequenceElement);
                }
                
                Element createdTimeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
                simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                createdTimeElement.appendChild(requestDoc.createTextNode(simpleDateFormat.format(authorizationRulesItem.getCreatedTime().getTime())));
                authorizationRuleElement.appendChild(createdTimeElement);
                
                if (authorizationRulesItem.getKeyName() != null)
                {
                    Element keyNameElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                    keyNameElement.appendChild(requestDoc.createTextNode(authorizationRulesItem.getKeyName()));
                    authorizationRuleElement.appendChild(keyNameElement);
                }
                
                Element modifiedTimeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
                SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
                simpleDateFormat2.setTimeZone(TimeZone.getTimeZone("UTC"));
                modifiedTimeElement.appendChild(requestDoc.createTextNode(simpleDateFormat2.format(authorizationRulesItem.getModifiedTime().getTime())));
                authorizationRuleElement.appendChild(modifiedTimeElement);
                
                if (authorizationRulesItem.getPrimaryKey() != null)
                {
                    Element primaryKeyElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                    primaryKeyElement.appendChild(requestDoc.createTextNode(authorizationRulesItem.getPrimaryKey()));
                    authorizationRuleElement.appendChild(primaryKeyElement);
                }
                
                if (authorizationRulesItem.getSecondaryKey() != null)
                {
                    Element secondaryKeyElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryKey");
                    secondaryKeyElement.appendChild(requestDoc.createTextNode(authorizationRulesItem.getSecondaryKey()));
                    authorizationRuleElement.appendChild(secondaryKeyElement);
                }
            }
            topicDescriptionElement.appendChild(authorizationRulesSequenceElement);
        }
        
        if (topic.getStatus() != null)
        {
            Element statusElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Status");
            statusElement.appendChild(requestDoc.createTextNode(topic.getStatus()));
            topicDescriptionElement.appendChild(statusElement);
        }
        
        Element createdAtElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedAt");
        SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
        simpleDateFormat3.setTimeZone(TimeZone.getTimeZone("UTC"));
        createdAtElement.appendChild(requestDoc.createTextNode(simpleDateFormat3.format(topic.getCreatedAt().getTime())));
        topicDescriptionElement.appendChild(createdAtElement);
        
        Element updatedAtElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "UpdatedAt");
        SimpleDateFormat simpleDateFormat4 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
        simpleDateFormat4.setTimeZone(TimeZone.getTimeZone("UTC"));
        updatedAtElement.appendChild(requestDoc.createTextNode(simpleDateFormat4.format(topic.getUpdatedAt().getTime())));
        topicDescriptionElement.appendChild(updatedAtElement);
        
        Element accessedAtElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessedAt");
        SimpleDateFormat simpleDateFormat5 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
        simpleDateFormat5.setTimeZone(TimeZone.getTimeZone("UTC"));
        accessedAtElement.appendChild(requestDoc.createTextNode(simpleDateFormat5.format(topic.getAccessedAt().getTime())));
        topicDescriptionElement.appendChild(accessedAtElement);
        
        Element supportOrderingElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SupportOrdering");
        supportOrderingElement.appendChild(requestDoc.createTextNode(Boolean.toString(topic.isSupportOrdering()).toLowerCase()));
        topicDescriptionElement.appendChild(supportOrderingElement);
        
        if (topic.getCountDetails() != null)
        {
            Element countDetailsElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CountDetails");
            topicDescriptionElement.appendChild(countDetailsElement);
            
            Element activeMessageCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2011/06/servicebus", "ActiveMessageCount");
            activeMessageCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getCountDetails().getActiveMessageCount())));
            countDetailsElement.appendChild(activeMessageCountElement);
            
            Element deadLetterMessageCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2011/06/servicebus", "DeadLetterMessageCount");
            deadLetterMessageCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getCountDetails().getDeadLetterMessageCount())));
            countDetailsElement.appendChild(deadLetterMessageCountElement);
            
            Element scheduledMessageCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2011/06/servicebus", "ScheduledMessageCount");
            scheduledMessageCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getCountDetails().getScheduledMessageCount())));
            countDetailsElement.appendChild(scheduledMessageCountElement);
            
            Element transferDeadLetterMessageCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2011/06/servicebus", "TransferDeadLetterMessageCount");
            transferDeadLetterMessageCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getCountDetails().getTransferDeadLetterMessageCount())));
            countDetailsElement.appendChild(transferDeadLetterMessageCountElement);
            
            Element transferMessageCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2011/06/servicebus", "TransferMessageCount");
            transferMessageCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getCountDetails().getTransferMessageCount())));
            countDetailsElement.appendChild(transferMessageCountElement);
        }
        
        Element subscriptionCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SubscriptionCount");
        subscriptionCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getSubscriptionCount())));
        topicDescriptionElement.appendChild(subscriptionCountElement);
        
        if (topic.getAutoDeleteOnIdle() != null)
        {
            Element autoDeleteOnIdleElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AutoDeleteOnIdle");
            autoDeleteOnIdleElement.appendChild(requestDoc.createTextNode(topic.getAutoDeleteOnIdle()));
            topicDescriptionElement.appendChild(autoDeleteOnIdleElement);
        }
        
        if (topic.getEntityAvailabilityStatus() != null)
        {
            Element entityAvailabilityStatusElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EntityAvailabilityStatus");
            entityAvailabilityStatusElement.appendChild(requestDoc.createTextNode(topic.getEntityAvailabilityStatus()));
            topicDescriptionElement.appendChild(entityAvailabilityStatusElement);
        }
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_CREATED)
            {
                ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ServiceBusTopicResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new ServiceBusTopicResponse();
            DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder2 = documentBuilderFactory2.newDocumentBuilder();
            Document responseDoc = documentBuilder2.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry");
            Element entryElement2 = elements.getLength() > 0 ? ((Element) elements.item(0)) : null;
            if (entryElement2 != null)
            {
                NodeList elements2 = entryElement2.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "title");
                Element titleElement = elements2.getLength() > 0 ? ((Element) elements2.item(0)) : null;
                if (titleElement != null)
                {
                }
                
                NodeList elements3 = entryElement2.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
                Element contentElement2 = elements3.getLength() > 0 ? ((Element) elements3.item(0)) : null;
                if (contentElement2 != null)
                {
                    NodeList elements4 = contentElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "TopicDescription");
                    Element topicDescriptionElement2 = elements4.getLength() > 0 ? ((Element) elements4.item(0)) : null;
                    if (topicDescriptionElement2 != null)
                    {
                        ServiceBusTopic topicDescriptionInstance = new ServiceBusTopic();
                        result.setTopic(topicDescriptionInstance);
                        
                        NodeList elements5 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DefaultMessageTimeToLive");
                        Element defaultMessageTimeToLiveElement2 = elements5.getLength() > 0 ? ((Element) elements5.item(0)) : null;
                        if (defaultMessageTimeToLiveElement2 != null)
                        {
                            String defaultMessageTimeToLiveInstance;
                            defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement2.getTextContent();
                            topicDescriptionInstance.setDefaultMessageTimeToLive(defaultMessageTimeToLiveInstance);
                        }
                        
                        NodeList elements6 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "MaxSizeInMegabytes");
                        Element maxSizeInMegabytesElement2 = elements6.getLength() > 0 ? ((Element) elements6.item(0)) : null;
                        if (maxSizeInMegabytesElement2 != null)
                        {
                            int maxSizeInMegabytesInstance;
                            maxSizeInMegabytesInstance = Integer.parseInt(maxSizeInMegabytesElement2.getTextContent());
                            topicDescriptionInstance.setMaxSizeInMegabytes(maxSizeInMegabytesInstance);
                        }
                        
                        NodeList elements7 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "RequiresDuplicateDetection");
                        Element requiresDuplicateDetectionElement2 = elements7.getLength() > 0 ? ((Element) elements7.item(0)) : null;
                        if (requiresDuplicateDetectionElement2 != null)
                        {
                            boolean requiresDuplicateDetectionInstance;
                            requiresDuplicateDetectionInstance = Boolean.parseBoolean(requiresDuplicateDetectionElement2.getTextContent());
                            topicDescriptionInstance.setRequiresDuplicateDetection(requiresDuplicateDetectionInstance);
                        }
                        
                        NodeList elements8 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DuplicateDetectionHistoryTimeWindow");
                        Element duplicateDetectionHistoryTimeWindowElement2 = elements8.getLength() > 0 ? ((Element) elements8.item(0)) : null;
                        if (duplicateDetectionHistoryTimeWindowElement2 != null)
                        {
                            String duplicateDetectionHistoryTimeWindowInstance;
                            duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement2.getTextContent();
                            topicDescriptionInstance.setDuplicateDetectionHistoryTimeWindow(duplicateDetectionHistoryTimeWindowInstance);
                        }
                        
                        NodeList elements9 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EnableBatchedOperations");
                        Element enableBatchedOperationsElement2 = elements9.getLength() > 0 ? ((Element) elements9.item(0)) : null;
                        if (enableBatchedOperationsElement2 != null)
                        {
                            boolean enableBatchedOperationsInstance;
                            enableBatchedOperationsInstance = Boolean.parseBoolean(enableBatchedOperationsElement2.getTextContent());
                            topicDescriptionInstance.setEnableBatchedOperations(enableBatchedOperationsInstance);
                        }
                        
                        NodeList elements10 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SizeInBytes");
                        Element sizeInBytesElement2 = elements10.getLength() > 0 ? ((Element) elements10.item(0)) : null;
                        if (sizeInBytesElement2 != null)
                        {
                            int sizeInBytesInstance;
                            sizeInBytesInstance = Integer.parseInt(sizeInBytesElement2.getTextContent());
                            topicDescriptionInstance.setSizeInBytes(sizeInBytesInstance);
                        }
                        
                        NodeList elements11 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "FilteringMessagesBeforePublishing");
                        Element filteringMessagesBeforePublishingElement2 = elements11.getLength() > 0 ? ((Element) elements11.item(0)) : null;
                        if (filteringMessagesBeforePublishingElement2 != null)
                        {
                            boolean filteringMessagesBeforePublishingInstance;
                            filteringMessagesBeforePublishingInstance = Boolean.parseBoolean(filteringMessagesBeforePublishingElement2.getTextContent());
                            topicDescriptionInstance.setFilteringMessagesBeforePublishing(filteringMessagesBeforePublishingInstance);
                        }
                        
                        NodeList elements12 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "IsAnonymousAccessible");
                        Element isAnonymousAccessibleElement2 = elements12.getLength() > 0 ? ((Element) elements12.item(0)) : null;
                        if (isAnonymousAccessibleElement2 != null)
                        {
                            boolean isAnonymousAccessibleInstance;
                            isAnonymousAccessibleInstance = Boolean.parseBoolean(isAnonymousAccessibleElement2.getTextContent());
                            topicDescriptionInstance.setIsAnonymousAccessible(isAnonymousAccessibleInstance);
                        }
                        
                        NodeList elements13 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRules");
                        Element authorizationRulesSequenceElement2 = elements13.getLength() > 0 ? ((Element) elements13.item(0)) : null;
                        if (authorizationRulesSequenceElement2 != null)
                        {
                            for (int i1 = 0; i1 < authorizationRulesSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRule").getLength(); i1 = i1 + 1)
                            {
                                org.w3c.dom.Element authorizationRulesElement = ((org.w3c.dom.Element) authorizationRulesSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRule").item(i1));
                                ServiceBusSharedAccessAuthorizationRule authorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                topicDescriptionInstance.getAuthorizationRules().add(authorizationRuleInstance);
                                
                                NodeList elements14 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                                Element claimTypeElement2 = elements14.getLength() > 0 ? ((Element) elements14.item(0)) : null;
                                if (claimTypeElement2 != null)
                                {
                                    String claimTypeInstance;
                                    claimTypeInstance = claimTypeElement2.getTextContent();
                                    authorizationRuleInstance.setClaimType(claimTypeInstance);
                                }
                                
                                NodeList elements15 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                                Element claimValueElement2 = elements15.getLength() > 0 ? ((Element) elements15.item(0)) : null;
                                if (claimValueElement2 != null)
                                {
                                    String claimValueInstance;
                                    claimValueInstance = claimValueElement2.getTextContent();
                                    authorizationRuleInstance.setClaimValue(claimValueInstance);
                                }
                                
                                NodeList elements16 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                                Element rightsSequenceElement2 = elements16.getLength() > 0 ? ((Element) elements16.item(0)) : null;
                                if (rightsSequenceElement2 != null)
                                {
                                    for (int i2 = 0; i2 < rightsSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i2 = i2 + 1)
                                    {
                                        org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element) rightsSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i2));
                                        authorizationRuleInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                                    }
                                }
                                
                                NodeList elements17 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
                                Element createdTimeElement2 = elements17.getLength() > 0 ? ((Element) elements17.item(0)) : null;
                                if (createdTimeElement2 != null)
                                {
                                    Calendar createdTimeInstance;
                                    SimpleDateFormat simpleDateFormat6 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                    Calendar calendar = Calendar.getInstance();
                                    calendar.setTime(simpleDateFormat6.parse(createdTimeElement2.getTextContent()));
                                    createdTimeInstance = calendar;
                                    authorizationRuleInstance.setCreatedTime(createdTimeInstance);
                                }
                                
                                NodeList elements18 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                                Element keyNameElement2 = elements18.getLength() > 0 ? ((Element) elements18.item(0)) : null;
                                if (keyNameElement2 != null)
                                {
                                    String keyNameInstance;
                                    keyNameInstance = keyNameElement2.getTextContent();
                                    authorizationRuleInstance.setKeyName(keyNameInstance);
                                }
                                
                                NodeList elements19 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
                                Element modifiedTimeElement2 = elements19.getLength() > 0 ? ((Element) elements19.item(0)) : null;
                                if (modifiedTimeElement2 != null)
                                {
                                    Calendar modifiedTimeInstance;
                                    SimpleDateFormat simpleDateFormat7 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                    Calendar calendar2 = Calendar.getInstance();
                                    calendar2.setTime(simpleDateFormat7.parse(modifiedTimeElement2.getTextContent()));
                                    modifiedTimeInstance = calendar2;
                                    authorizationRuleInstance.setModifiedTime(modifiedTimeInstance);
                                }
                                
                                NodeList elements20 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                                Element primaryKeyElement2 = elements20.getLength() > 0 ? ((Element) elements20.item(0)) : null;
                                if (primaryKeyElement2 != null)
                                {
                                    String primaryKeyInstance;
                                    primaryKeyInstance = primaryKeyElement2.getTextContent();
                                    authorizationRuleInstance.setPrimaryKey(primaryKeyInstance);
                                }
                                
                                NodeList elements21 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryKey");
                                Element secondaryKeyElement2 = elements21.getLength() > 0 ? ((Element) elements21.item(0)) : null;
                                if (secondaryKeyElement2 != null)
                                {
                                    String secondaryKeyInstance;
                                    secondaryKeyInstance = secondaryKeyElement2.getTextContent();
                                    authorizationRuleInstance.setSecondaryKey(secondaryKeyInstance);
                                }
                            }
                        }
                        
                        NodeList elements22 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Status");
                        Element statusElement2 = elements22.getLength() > 0 ? ((Element) elements22.item(0)) : null;
                        if (statusElement2 != null)
                        {
                            String statusInstance;
                            statusInstance = statusElement2.getTextContent();
                            topicDescriptionInstance.setStatus(statusInstance);
                        }
                        
                        NodeList elements23 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedAt");
                        Element createdAtElement2 = elements23.getLength() > 0 ? ((Element) elements23.item(0)) : null;
                        if (createdAtElement2 != null)
                        {
                            Calendar createdAtInstance;
                            SimpleDateFormat simpleDateFormat8 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar3 = Calendar.getInstance();
                            calendar3.setTime(simpleDateFormat8.parse(createdAtElement2.getTextContent()));
                            createdAtInstance = calendar3;
                            topicDescriptionInstance.setCreatedAt(createdAtInstance);
                        }
                        
                        NodeList elements24 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "UpdatedAt");
                        Element updatedAtElement2 = elements24.getLength() > 0 ? ((Element) elements24.item(0)) : null;
                        if (updatedAtElement2 != null)
                        {
                            Calendar updatedAtInstance;
                            SimpleDateFormat simpleDateFormat9 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar4 = Calendar.getInstance();
                            calendar4.setTime(simpleDateFormat9.parse(updatedAtElement2.getTextContent()));
                            updatedAtInstance = calendar4;
                            topicDescriptionInstance.setUpdatedAt(updatedAtInstance);
                        }
                        
                        NodeList elements25 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessedAt");
                        Element accessedAtElement2 = elements25.getLength() > 0 ? ((Element) elements25.item(0)) : null;
                        if (accessedAtElement2 != null)
                        {
                            Calendar accessedAtInstance;
                            SimpleDateFormat simpleDateFormat10 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar5 = Calendar.getInstance();
                            calendar5.setTime(simpleDateFormat10.parse(accessedAtElement2.getTextContent()));
                            accessedAtInstance = calendar5;
                            topicDescriptionInstance.setAccessedAt(accessedAtInstance);
                        }
                        
                        NodeList elements26 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SupportOrdering");
                        Element supportOrderingElement2 = elements26.getLength() > 0 ? ((Element) elements26.item(0)) : null;
                        if (supportOrderingElement2 != null)
                        {
                            boolean supportOrderingInstance;
                            supportOrderingInstance = Boolean.parseBoolean(supportOrderingElement2.getTextContent());
                            topicDescriptionInstance.setSupportOrdering(supportOrderingInstance);
                        }
                        
                        NodeList elements27 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CountDetails");
                        Element countDetailsElement2 = elements27.getLength() > 0 ? ((Element) elements27.item(0)) : null;
                        if (countDetailsElement2 != null)
                        {
                            CountDetails countDetailsInstance = new CountDetails();
                            topicDescriptionInstance.setCountDetails(countDetailsInstance);
                        }
                        
                        NodeList elements28 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SubscriptionCount");
                        Element subscriptionCountElement2 = elements28.getLength() > 0 ? ((Element) elements28.item(0)) : null;
                        if (subscriptionCountElement2 != null)
                        {
                            int subscriptionCountInstance;
                            subscriptionCountInstance = Integer.parseInt(subscriptionCountElement2.getTextContent());
                            topicDescriptionInstance.setSubscriptionCount(subscriptionCountInstance);
                        }
                        
                        NodeList elements29 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AutoDeleteOnIdle");
                        Element autoDeleteOnIdleElement2 = elements29.getLength() > 0 ? ((Element) elements29.item(0)) : null;
                        if (autoDeleteOnIdleElement2 != null)
                        {
                            String autoDeleteOnIdleInstance;
                            autoDeleteOnIdleInstance = autoDeleteOnIdleElement2.getTextContent();
                            topicDescriptionInstance.setAutoDeleteOnIdle(autoDeleteOnIdleInstance);
                        }
                        
                        NodeList elements30 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EntityAvailabilityStatus");
                        Element entityAvailabilityStatusElement2 = elements30.getLength() > 0 ? ((Element) elements30.item(0)) : null;
                        if (entityAvailabilityStatusElement2 != null)
                        {
                            String entityAvailabilityStatusInstance;
                            entityAvailabilityStatusInstance = entityAvailabilityStatusElement2.getTextContent();
                            topicDescriptionInstance.setEntityAvailabilityStatus(entityAvailabilityStatusInstance);
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * The topic description is an XML AtomPub document that defines the desired
    * semantics for a topic. The topic description contains the following
    * properties. For more information, see the TopicDescription Properties
    * topic.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh780749.aspx for
    * more information)
    *
    * @param namespaceName The namespace name.
    * @param topicName The topic.
    * @return A response to a request for a particular topic.
    */
    @Override
    public Future<ServiceBusTopicResponse> getAsync(final String namespaceName, final String topicName)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusTopicResponse>() { 
            @Override
            public ServiceBusTopicResponse call() throws Exception
            {
                return get(namespaceName, topicName);
            }
         });
    }
    
    /**
    * The topic description is an XML AtomPub document that defines the desired
    * semantics for a topic. The topic description contains the following
    * properties. For more information, see the TopicDescription Properties
    * topic.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh780749.aspx for
    * more information)
    *
    * @param namespaceName The namespace name.
    * @param topicName The topic.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParserConfigurationException Thrown if there was a serious
    * configuration error with the document parser.
    * @throws SAXException Thrown if there was an error parsing the XML
    * response.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return A response to a request for a particular topic.
    */
    @Override
    public ServiceBusTopicResponse get(String namespaceName, String topicName) throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException, URISyntaxException
    {
        // Validate
        if (namespaceName == null)
        {
            throw new NullPointerException("namespaceName");
        }
        if (topicName == null)
        {
            throw new NullPointerException("topicName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("namespaceName", namespaceName);
            tracingParameters.put("topicName", topicName);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/topics/" + topicName;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml; charset=utf-8");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK)
            {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ServiceBusTopicResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new ServiceBusTopicResponse();
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document responseDoc = documentBuilder.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry");
            Element entryElement = elements.getLength() > 0 ? ((Element) elements.item(0)) : null;
            if (entryElement != null)
            {
                NodeList elements2 = entryElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "title");
                Element titleElement = elements2.getLength() > 0 ? ((Element) elements2.item(0)) : null;
                if (titleElement != null)
                {
                }
                
                NodeList elements3 = entryElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
                Element contentElement = elements3.getLength() > 0 ? ((Element) elements3.item(0)) : null;
                if (contentElement != null)
                {
                    NodeList elements4 = contentElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "TopicDescription");
                    Element topicDescriptionElement = elements4.getLength() > 0 ? ((Element) elements4.item(0)) : null;
                    if (topicDescriptionElement != null)
                    {
                        ServiceBusTopic topicDescriptionInstance = new ServiceBusTopic();
                        result.setTopic(topicDescriptionInstance);
                        
                        NodeList elements5 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DefaultMessageTimeToLive");
                        Element defaultMessageTimeToLiveElement = elements5.getLength() > 0 ? ((Element) elements5.item(0)) : null;
                        if (defaultMessageTimeToLiveElement != null)
                        {
                            String defaultMessageTimeToLiveInstance;
                            defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement.getTextContent();
                            topicDescriptionInstance.setDefaultMessageTimeToLive(defaultMessageTimeToLiveInstance);
                        }
                        
                        NodeList elements6 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "MaxSizeInMegabytes");
                        Element maxSizeInMegabytesElement = elements6.getLength() > 0 ? ((Element) elements6.item(0)) : null;
                        if (maxSizeInMegabytesElement != null)
                        {
                            int maxSizeInMegabytesInstance;
                            maxSizeInMegabytesInstance = Integer.parseInt(maxSizeInMegabytesElement.getTextContent());
                            topicDescriptionInstance.setMaxSizeInMegabytes(maxSizeInMegabytesInstance);
                        }
                        
                        NodeList elements7 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "RequiresDuplicateDetection");
                        Element requiresDuplicateDetectionElement = elements7.getLength() > 0 ? ((Element) elements7.item(0)) : null;
                        if (requiresDuplicateDetectionElement != null)
                        {
                            boolean requiresDuplicateDetectionInstance;
                            requiresDuplicateDetectionInstance = Boolean.parseBoolean(requiresDuplicateDetectionElement.getTextContent());
                            topicDescriptionInstance.setRequiresDuplicateDetection(requiresDuplicateDetectionInstance);
                        }
                        
                        NodeList elements8 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DuplicateDetectionHistoryTimeWindow");
                        Element duplicateDetectionHistoryTimeWindowElement = elements8.getLength() > 0 ? ((Element) elements8.item(0)) : null;
                        if (duplicateDetectionHistoryTimeWindowElement != null)
                        {
                            String duplicateDetectionHistoryTimeWindowInstance;
                            duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement.getTextContent();
                            topicDescriptionInstance.setDuplicateDetectionHistoryTimeWindow(duplicateDetectionHistoryTimeWindowInstance);
                        }
                        
                        NodeList elements9 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EnableBatchedOperations");
                        Element enableBatchedOperationsElement = elements9.getLength() > 0 ? ((Element) elements9.item(0)) : null;
                        if (enableBatchedOperationsElement != null)
                        {
                            boolean enableBatchedOperationsInstance;
                            enableBatchedOperationsInstance = Boolean.parseBoolean(enableBatchedOperationsElement.getTextContent());
                            topicDescriptionInstance.setEnableBatchedOperations(enableBatchedOperationsInstance);
                        }
                        
                        NodeList elements10 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SizeInBytes");
                        Element sizeInBytesElement = elements10.getLength() > 0 ? ((Element) elements10.item(0)) : null;
                        if (sizeInBytesElement != null)
                        {
                            int sizeInBytesInstance;
                            sizeInBytesInstance = Integer.parseInt(sizeInBytesElement.getTextContent());
                            topicDescriptionInstance.setSizeInBytes(sizeInBytesInstance);
                        }
                        
                        NodeList elements11 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "FilteringMessagesBeforePublishing");
                        Element filteringMessagesBeforePublishingElement = elements11.getLength() > 0 ? ((Element) elements11.item(0)) : null;
                        if (filteringMessagesBeforePublishingElement != null)
                        {
                            boolean filteringMessagesBeforePublishingInstance;
                            filteringMessagesBeforePublishingInstance = Boolean.parseBoolean(filteringMessagesBeforePublishingElement.getTextContent());
                            topicDescriptionInstance.setFilteringMessagesBeforePublishing(filteringMessagesBeforePublishingInstance);
                        }
                        
                        NodeList elements12 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "IsAnonymousAccessible");
                        Element isAnonymousAccessibleElement = elements12.getLength() > 0 ? ((Element) elements12.item(0)) : null;
                        if (isAnonymousAccessibleElement != null)
                        {
                            boolean isAnonymousAccessibleInstance;
                            isAnonymousAccessibleInstance = Boolean.parseBoolean(isAnonymousAccessibleElement.getTextContent());
                            topicDescriptionInstance.setIsAnonymousAccessible(isAnonymousAccessibleInstance);
                        }
                        
                        NodeList elements13 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRules");
                        Element authorizationRulesSequenceElement = elements13.getLength() > 0 ? ((Element) elements13.item(0)) : null;
                        if (authorizationRulesSequenceElement != null)
                        {
                            for (int i1 = 0; i1 < authorizationRulesSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRule").getLength(); i1 = i1 + 1)
                            {
                                org.w3c.dom.Element authorizationRulesElement = ((org.w3c.dom.Element) authorizationRulesSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRule").item(i1));
                                ServiceBusSharedAccessAuthorizationRule authorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                topicDescriptionInstance.getAuthorizationRules().add(authorizationRuleInstance);
                                
                                NodeList elements14 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                                Element claimTypeElement = elements14.getLength() > 0 ? ((Element) elements14.item(0)) : null;
                                if (claimTypeElement != null)
                                {
                                    String claimTypeInstance;
                                    claimTypeInstance = claimTypeElement.getTextContent();
                                    authorizationRuleInstance.setClaimType(claimTypeInstance);
                                }
                                
                                NodeList elements15 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                                Element claimValueElement = elements15.getLength() > 0 ? ((Element) elements15.item(0)) : null;
                                if (claimValueElement != null)
                                {
                                    String claimValueInstance;
                                    claimValueInstance = claimValueElement.getTextContent();
                                    authorizationRuleInstance.setClaimValue(claimValueInstance);
                                }
                                
                                NodeList elements16 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                                Element rightsSequenceElement = elements16.getLength() > 0 ? ((Element) elements16.item(0)) : null;
                                if (rightsSequenceElement != null)
                                {
                                    for (int i2 = 0; i2 < rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i2 = i2 + 1)
                                    {
                                        org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element) rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i2));
                                        authorizationRuleInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                                    }
                                }
                                
                                NodeList elements17 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
                                Element createdTimeElement = elements17.getLength() > 0 ? ((Element) elements17.item(0)) : null;
                                if (createdTimeElement != null)
                                {
                                    Calendar createdTimeInstance;
                                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                    Calendar calendar = Calendar.getInstance();
                                    calendar.setTime(simpleDateFormat.parse(createdTimeElement.getTextContent()));
                                    createdTimeInstance = calendar;
                                    authorizationRuleInstance.setCreatedTime(createdTimeInstance);
                                }
                                
                                NodeList elements18 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                                Element keyNameElement = elements18.getLength() > 0 ? ((Element) elements18.item(0)) : null;
                                if (keyNameElement != null)
                                {
                                    String keyNameInstance;
                                    keyNameInstance = keyNameElement.getTextContent();
                                    authorizationRuleInstance.setKeyName(keyNameInstance);
                                }
                                
                                NodeList elements19 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
                                Element modifiedTimeElement = elements19.getLength() > 0 ? ((Element) elements19.item(0)) : null;
                                if (modifiedTimeElement != null)
                                {
                                    Calendar modifiedTimeInstance;
                                    SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                    Calendar calendar2 = Calendar.getInstance();
                                    calendar2.setTime(simpleDateFormat2.parse(modifiedTimeElement.getTextContent()));
                                    modifiedTimeInstance = calendar2;
                                    authorizationRuleInstance.setModifiedTime(modifiedTimeInstance);
                                }
                                
                                NodeList elements20 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                                Element primaryKeyElement = elements20.getLength() > 0 ? ((Element) elements20.item(0)) : null;
                                if (primaryKeyElement != null)
                                {
                                    String primaryKeyInstance;
                                    primaryKeyInstance = primaryKeyElement.getTextContent();
                                    authorizationRuleInstance.setPrimaryKey(primaryKeyInstance);
                                }
                                
                                NodeList elements21 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryKey");
                                Element secondaryKeyElement = elements21.getLength() > 0 ? ((Element) elements21.item(0)) : null;
                                if (secondaryKeyElement != null)
                                {
                                    String secondaryKeyInstance;
                                    secondaryKeyInstance = secondaryKeyElement.getTextContent();
                                    authorizationRuleInstance.setSecondaryKey(secondaryKeyInstance);
                                }
                            }
                        }
                        
                        NodeList elements22 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Status");
                        Element statusElement = elements22.getLength() > 0 ? ((Element) elements22.item(0)) : null;
                        if (statusElement != null)
                        {
                            String statusInstance;
                            statusInstance = statusElement.getTextContent();
                            topicDescriptionInstance.setStatus(statusInstance);
                        }
                        
                        NodeList elements23 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedAt");
                        Element createdAtElement = elements23.getLength() > 0 ? ((Element) elements23.item(0)) : null;
                        if (createdAtElement != null)
                        {
                            Calendar createdAtInstance;
                            SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar3 = Calendar.getInstance();
                            calendar3.setTime(simpleDateFormat3.parse(createdAtElement.getTextContent()));
                            createdAtInstance = calendar3;
                            topicDescriptionInstance.setCreatedAt(createdAtInstance);
                        }
                        
                        NodeList elements24 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "UpdatedAt");
                        Element updatedAtElement = elements24.getLength() > 0 ? ((Element) elements24.item(0)) : null;
                        if (updatedAtElement != null)
                        {
                            Calendar updatedAtInstance;
                            SimpleDateFormat simpleDateFormat4 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar4 = Calendar.getInstance();
                            calendar4.setTime(simpleDateFormat4.parse(updatedAtElement.getTextContent()));
                            updatedAtInstance = calendar4;
                            topicDescriptionInstance.setUpdatedAt(updatedAtInstance);
                        }
                        
                        NodeList elements25 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessedAt");
                        Element accessedAtElement = elements25.getLength() > 0 ? ((Element) elements25.item(0)) : null;
                        if (accessedAtElement != null)
                        {
                            Calendar accessedAtInstance;
                            SimpleDateFormat simpleDateFormat5 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar5 = Calendar.getInstance();
                            calendar5.setTime(simpleDateFormat5.parse(accessedAtElement.getTextContent()));
                            accessedAtInstance = calendar5;
                            topicDescriptionInstance.setAccessedAt(accessedAtInstance);
                        }
                        
                        NodeList elements26 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SupportOrdering");
                        Element supportOrderingElement = elements26.getLength() > 0 ? ((Element) elements26.item(0)) : null;
                        if (supportOrderingElement != null)
                        {
                            boolean supportOrderingInstance;
                            supportOrderingInstance = Boolean.parseBoolean(supportOrderingElement.getTextContent());
                            topicDescriptionInstance.setSupportOrdering(supportOrderingInstance);
                        }
                        
                        NodeList elements27 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CountDetails");
                        Element countDetailsElement = elements27.getLength() > 0 ? ((Element) elements27.item(0)) : null;
                        if (countDetailsElement != null)
                        {
                            CountDetails countDetailsInstance = new CountDetails();
                            topicDescriptionInstance.setCountDetails(countDetailsInstance);
                        }
                        
                        NodeList elements28 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SubscriptionCount");
                        Element subscriptionCountElement = elements28.getLength() > 0 ? ((Element) elements28.item(0)) : null;
                        if (subscriptionCountElement != null)
                        {
                            int subscriptionCountInstance;
                            subscriptionCountInstance = Integer.parseInt(subscriptionCountElement.getTextContent());
                            topicDescriptionInstance.setSubscriptionCount(subscriptionCountInstance);
                        }
                        
                        NodeList elements29 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AutoDeleteOnIdle");
                        Element autoDeleteOnIdleElement = elements29.getLength() > 0 ? ((Element) elements29.item(0)) : null;
                        if (autoDeleteOnIdleElement != null)
                        {
                            String autoDeleteOnIdleInstance;
                            autoDeleteOnIdleInstance = autoDeleteOnIdleElement.getTextContent();
                            topicDescriptionInstance.setAutoDeleteOnIdle(autoDeleteOnIdleInstance);
                        }
                        
                        NodeList elements30 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EntityAvailabilityStatus");
                        Element entityAvailabilityStatusElement = elements30.getLength() > 0 ? ((Element) elements30.item(0)) : null;
                        if (entityAvailabilityStatusElement != null)
                        {
                            String entityAvailabilityStatusInstance;
                            entityAvailabilityStatusInstance = entityAvailabilityStatusElement.getTextContent();
                            topicDescriptionInstance.setEntityAvailabilityStatus(entityAvailabilityStatusInstance);
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Gets the set of connection strings for a topic.
    *
    * @param namespaceName The namespace name.
    * @param topicName The topic.
    * @return The set of connection details for a service bus entity.
    */
    @Override
    public Future<ServiceBusConnectionDetailsResponse> getConnectionDetailsAsync(final String namespaceName, final String topicName)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusConnectionDetailsResponse>() { 
            @Override
            public ServiceBusConnectionDetailsResponse call() throws Exception
            {
                return getConnectionDetails(namespaceName, topicName);
            }
         });
    }
    
    /**
    * Gets the set of connection strings for a topic.
    *
    * @param namespaceName The namespace name.
    * @param topicName The topic.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParserConfigurationException Thrown if there was a serious
    * configuration error with the document parser.
    * @throws SAXException Thrown if there was an error parsing the XML
    * response.
    * @return The set of connection details for a service bus entity.
    */
    @Override
    public ServiceBusConnectionDetailsResponse getConnectionDetails(String namespaceName, String topicName) throws IOException, ServiceException, ParserConfigurationException, SAXException
    {
        // Validate
        if (namespaceName == null)
        {
            throw new NullPointerException("namespaceName");
        }
        if (topicName == null)
        {
            throw new NullPointerException("topicName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("namespaceName", namespaceName);
            tracingParameters.put("topicName", topicName);
            CloudTracing.enter(invocationId, this, "getConnectionDetailsAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/Topics/" + topicName + "/ConnectionDetails";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml; charset=utf-8");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK)
            {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ServiceBusConnectionDetailsResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new ServiceBusConnectionDetailsResponse();
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document responseDoc = documentBuilder.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "feed");
            Element feedElement = elements.getLength() > 0 ? ((Element) elements.item(0)) : null;
            if (feedElement != null)
            {
                if (feedElement != null)
                {
                    for (int i1 = 0; i1 < feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").getLength(); i1 = i1 + 1)
                    {
                        org.w3c.dom.Element entriesElement = ((org.w3c.dom.Element) feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").item(i1));
                        ServiceBusConnectionDetail entryInstance = new ServiceBusConnectionDetail();
                        result.getConnectionDetails().add(entryInstance);
                        
                        NodeList elements2 = entriesElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
                        Element contentElement = elements2.getLength() > 0 ? ((Element) elements2.item(0)) : null;
                        if (contentElement != null)
                        {
                            NodeList elements3 = contentElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ConnectionDetail");
                            Element connectionDetailElement = elements3.getLength() > 0 ? ((Element) elements3.item(0)) : null;
                            if (connectionDetailElement != null)
                            {
                                NodeList elements4 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                                Element keyNameElement = elements4.getLength() > 0 ? ((Element) elements4.item(0)) : null;
                                if (keyNameElement != null)
                                {
                                    String keyNameInstance;
                                    keyNameInstance = keyNameElement.getTextContent();
                                    entryInstance.setKeyName(keyNameInstance);
                                }
                                
                                NodeList elements5 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ConnectionString");
                                Element connectionStringElement = elements5.getLength() > 0 ? ((Element) elements5.item(0)) : null;
                                if (connectionStringElement != null)
                                {
                                    String connectionStringInstance;
                                    connectionStringInstance = connectionStringElement.getTextContent();
                                    entryInstance.setConnectionString(connectionStringInstance);
                                }
                                
                                NodeList elements6 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationType");
                                Element authorizationTypeElement = elements6.getLength() > 0 ? ((Element) elements6.item(0)) : null;
                                if (authorizationTypeElement != null)
                                {
                                    String authorizationTypeInstance;
                                    authorizationTypeInstance = authorizationTypeElement.getTextContent();
                                    entryInstance.setAuthorizationType(authorizationTypeInstance);
                                }
                                
                                NodeList elements7 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                                Element rightsSequenceElement = elements7.getLength() > 0 ? ((Element) elements7.item(0)) : null;
                                if (rightsSequenceElement != null)
                                {
                                    for (int i2 = 0; i2 < rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i2 = i2 + 1)
                                    {
                                        org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element) rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i2));
                                        entryInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Enumerates the topics in the service namespace. An empty feed is returned
    * if no topic exists in the service namespace.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh780744.aspx for
    * more information)
    *
    * @param namespaceName The namespace name.
    * @return A response to a request for a list of topics.
    */
    @Override
    public Future<ServiceBusTopicsResponse> listAsync(final String namespaceName)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusTopicsResponse>() { 
            @Override
            public ServiceBusTopicsResponse call() throws Exception
            {
                return list(namespaceName);
            }
         });
    }
    
    /**
    * Enumerates the topics in the service namespace. An empty feed is returned
    * if no topic exists in the service namespace.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh780744.aspx for
    * more information)
    *
    * @param namespaceName The namespace name.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParserConfigurationException Thrown if there was a serious
    * configuration error with the document parser.
    * @throws SAXException Thrown if there was an error parsing the XML
    * response.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return A response to a request for a list of topics.
    */
    @Override
    public ServiceBusTopicsResponse list(String namespaceName) throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException, URISyntaxException
    {
        // Validate
        if (namespaceName == null)
        {
            throw new NullPointerException("namespaceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("namespaceName", namespaceName);
            CloudTracing.enter(invocationId, this, "listAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/topics/";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/xml; charset=utf-8");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK)
            {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ServiceBusTopicsResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new ServiceBusTopicsResponse();
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document responseDoc = documentBuilder.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "feed");
            Element feedElement = elements.getLength() > 0 ? ((Element) elements.item(0)) : null;
            if (feedElement != null)
            {
                if (feedElement != null)
                {
                    for (int i1 = 0; i1 < feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").getLength(); i1 = i1 + 1)
                    {
                        org.w3c.dom.Element entriesElement = ((org.w3c.dom.Element) feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").item(i1));
                        ServiceBusTopic entryInstance = new ServiceBusTopic();
                        result.getTopics().add(entryInstance);
                        
                        NodeList elements2 = entriesElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "title");
                        Element titleElement = elements2.getLength() > 0 ? ((Element) elements2.item(0)) : null;
                        if (titleElement != null)
                        {
                            String titleInstance;
                            titleInstance = titleElement.getTextContent();
                            entryInstance.setName(titleInstance);
                        }
                        
                        NodeList elements3 = entriesElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
                        Element contentElement = elements3.getLength() > 0 ? ((Element) elements3.item(0)) : null;
                        if (contentElement != null)
                        {
                            NodeList elements4 = contentElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "TopicDescription");
                            Element topicDescriptionElement = elements4.getLength() > 0 ? ((Element) elements4.item(0)) : null;
                            if (topicDescriptionElement != null)
                            {
                                NodeList elements5 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DefaultMessageTimeToLive");
                                Element defaultMessageTimeToLiveElement = elements5.getLength() > 0 ? ((Element) elements5.item(0)) : null;
                                if (defaultMessageTimeToLiveElement != null)
                                {
                                    String defaultMessageTimeToLiveInstance;
                                    defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement.getTextContent();
                                    entryInstance.setDefaultMessageTimeToLive(defaultMessageTimeToLiveInstance);
                                }
                                
                                NodeList elements6 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "MaxSizeInMegabytes");
                                Element maxSizeInMegabytesElement = elements6.getLength() > 0 ? ((Element) elements6.item(0)) : null;
                                if (maxSizeInMegabytesElement != null)
                                {
                                    int maxSizeInMegabytesInstance;
                                    maxSizeInMegabytesInstance = Integer.parseInt(maxSizeInMegabytesElement.getTextContent());
                                    entryInstance.setMaxSizeInMegabytes(maxSizeInMegabytesInstance);
                                }
                                
                                NodeList elements7 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "RequiresDuplicateDetection");
                                Element requiresDuplicateDetectionElement = elements7.getLength() > 0 ? ((Element) elements7.item(0)) : null;
                                if (requiresDuplicateDetectionElement != null)
                                {
                                    boolean requiresDuplicateDetectionInstance;
                                    requiresDuplicateDetectionInstance = Boolean.parseBoolean(requiresDuplicateDetectionElement.getTextContent());
                                    entryInstance.setRequiresDuplicateDetection(requiresDuplicateDetectionInstance);
                                }
                                
                                NodeList elements8 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DuplicateDetectionHistoryTimeWindow");
                                Element duplicateDetectionHistoryTimeWindowElement = elements8.getLength() > 0 ? ((Element) elements8.item(0)) : null;
                                if (duplicateDetectionHistoryTimeWindowElement != null)
                                {
                                    String duplicateDetectionHistoryTimeWindowInstance;
                                    duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement.getTextContent();
                                    entryInstance.setDuplicateDetectionHistoryTimeWindow(duplicateDetectionHistoryTimeWindowInstance);
                                }
                                
                                NodeList elements9 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EnableBatchedOperations");
                                Element enableBatchedOperationsElement = elements9.getLength() > 0 ? ((Element) elements9.item(0)) : null;
                                if (enableBatchedOperationsElement != null)
                                {
                                    boolean enableBatchedOperationsInstance;
                                    enableBatchedOperationsInstance = Boolean.parseBoolean(enableBatchedOperationsElement.getTextContent());
                                    entryInstance.setEnableBatchedOperations(enableBatchedOperationsInstance);
                                }
                                
                                NodeList elements10 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SizeInBytes");
                                Element sizeInBytesElement = elements10.getLength() > 0 ? ((Element) elements10.item(0)) : null;
                                if (sizeInBytesElement != null)
                                {
                                    int sizeInBytesInstance;
                                    sizeInBytesInstance = Integer.parseInt(sizeInBytesElement.getTextContent());
                                    entryInstance.setSizeInBytes(sizeInBytesInstance);
                                }
                                
                                NodeList elements11 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "FilteringMessagesBeforePublishing");
                                Element filteringMessagesBeforePublishingElement = elements11.getLength() > 0 ? ((Element) elements11.item(0)) : null;
                                if (filteringMessagesBeforePublishingElement != null)
                                {
                                    boolean filteringMessagesBeforePublishingInstance;
                                    filteringMessagesBeforePublishingInstance = Boolean.parseBoolean(filteringMessagesBeforePublishingElement.getTextContent());
                                    entryInstance.setFilteringMessagesBeforePublishing(filteringMessagesBeforePublishingInstance);
                                }
                                
                                NodeList elements12 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "IsAnonymousAccessible");
                                Element isAnonymousAccessibleElement = elements12.getLength() > 0 ? ((Element) elements12.item(0)) : null;
                                if (isAnonymousAccessibleElement != null)
                                {
                                    boolean isAnonymousAccessibleInstance;
                                    isAnonymousAccessibleInstance = Boolean.parseBoolean(isAnonymousAccessibleElement.getTextContent());
                                    entryInstance.setIsAnonymousAccessible(isAnonymousAccessibleInstance);
                                }
                                
                                NodeList elements13 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRules");
                                Element authorizationRulesSequenceElement = elements13.getLength() > 0 ? ((Element) elements13.item(0)) : null;
                                if (authorizationRulesSequenceElement != null)
                                {
                                    for (int i2 = 0; i2 < authorizationRulesSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRule").getLength(); i2 = i2 + 1)
                                    {
                                        org.w3c.dom.Element authorizationRulesElement = ((org.w3c.dom.Element) authorizationRulesSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRule").item(i2));
                                        ServiceBusSharedAccessAuthorizationRule authorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                        entryInstance.getAuthorizationRules().add(authorizationRuleInstance);
                                        
                                        NodeList elements14 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                                        Element claimTypeElement = elements14.getLength() > 0 ? ((Element) elements14.item(0)) : null;
                                        if (claimTypeElement != null)
                                        {
                                            String claimTypeInstance;
                                            claimTypeInstance = claimTypeElement.getTextContent();
                                            authorizationRuleInstance.setClaimType(claimTypeInstance);
                                        }
                                        
                                        NodeList elements15 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                                        Element claimValueElement = elements15.getLength() > 0 ? ((Element) elements15.item(0)) : null;
                                        if (claimValueElement != null)
                                        {
                                            String claimValueInstance;
                                            claimValueInstance = claimValueElement.getTextContent();
                                            authorizationRuleInstance.setClaimValue(claimValueInstance);
                                        }
                                        
                                        NodeList elements16 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                                        Element rightsSequenceElement = elements16.getLength() > 0 ? ((Element) elements16.item(0)) : null;
                                        if (rightsSequenceElement != null)
                                        {
                                            for (int i3 = 0; i3 < rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i3 = i3 + 1)
                                            {
                                                org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element) rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i3));
                                                authorizationRuleInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                                            }
                                        }
                                        
                                        NodeList elements17 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
                                        Element createdTimeElement = elements17.getLength() > 0 ? ((Element) elements17.item(0)) : null;
                                        if (createdTimeElement != null)
                                        {
                                            Calendar createdTimeInstance;
                                            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                            Calendar calendar = Calendar.getInstance();
                                            calendar.setTime(simpleDateFormat.parse(createdTimeElement.getTextContent()));
                                            createdTimeInstance = calendar;
                                            authorizationRuleInstance.setCreatedTime(createdTimeInstance);
                                        }
                                        
                                        NodeList elements18 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                                        Element keyNameElement = elements18.getLength() > 0 ? ((Element) elements18.item(0)) : null;
                                        if (keyNameElement != null)
                                        {
                                            String keyNameInstance;
                                            keyNameInstance = keyNameElement.getTextContent();
                                            authorizationRuleInstance.setKeyName(keyNameInstance);
                                        }
                                        
                                        NodeList elements19 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
                                        Element modifiedTimeElement = elements19.getLength() > 0 ? ((Element) elements19.item(0)) : null;
                                        if (modifiedTimeElement != null)
                                        {
                                            Calendar modifiedTimeInstance;
                                            SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                            Calendar calendar2 = Calendar.getInstance();
                                            calendar2.setTime(simpleDateFormat2.parse(modifiedTimeElement.getTextContent()));
                                            modifiedTimeInstance = calendar2;
                                            authorizationRuleInstance.setModifiedTime(modifiedTimeInstance);
                                        }
                                        
                                        NodeList elements20 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                                        Element primaryKeyElement = elements20.getLength() > 0 ? ((Element) elements20.item(0)) : null;
                                        if (primaryKeyElement != null)
                                        {
                                            String primaryKeyInstance;
                                            primaryKeyInstance = primaryKeyElement.getTextContent();
                                            authorizationRuleInstance.setPrimaryKey(primaryKeyInstance);
                                        }
                                        
                                        NodeList elements21 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryKey");
                                        Element secondaryKeyElement = elements21.getLength() > 0 ? ((Element) elements21.item(0)) : null;
                                        if (secondaryKeyElement != null)
                                        {
                                            String secondaryKeyInstance;
                                            secondaryKeyInstance = secondaryKeyElement.getTextContent();
                                            authorizationRuleInstance.setSecondaryKey(secondaryKeyInstance);
                                        }
                                    }
                                }
                                
                                NodeList elements22 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Status");
                                Element statusElement = elements22.getLength() > 0 ? ((Element) elements22.item(0)) : null;
                                if (statusElement != null)
                                {
                                    String statusInstance;
                                    statusInstance = statusElement.getTextContent();
                                    entryInstance.setStatus(statusInstance);
                                }
                                
                                NodeList elements23 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedAt");
                                Element createdAtElement = elements23.getLength() > 0 ? ((Element) elements23.item(0)) : null;
                                if (createdAtElement != null)
                                {
                                    Calendar createdAtInstance;
                                    SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                    Calendar calendar3 = Calendar.getInstance();
                                    calendar3.setTime(simpleDateFormat3.parse(createdAtElement.getTextContent()));
                                    createdAtInstance = calendar3;
                                    entryInstance.setCreatedAt(createdAtInstance);
                                }
                                
                                NodeList elements24 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "UpdatedAt");
                                Element updatedAtElement = elements24.getLength() > 0 ? ((Element) elements24.item(0)) : null;
                                if (updatedAtElement != null)
                                {
                                    Calendar updatedAtInstance;
                                    SimpleDateFormat simpleDateFormat4 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                    Calendar calendar4 = Calendar.getInstance();
                                    calendar4.setTime(simpleDateFormat4.parse(updatedAtElement.getTextContent()));
                                    updatedAtInstance = calendar4;
                                    entryInstance.setUpdatedAt(updatedAtInstance);
                                }
                                
                                NodeList elements25 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessedAt");
                                Element accessedAtElement = elements25.getLength() > 0 ? ((Element) elements25.item(0)) : null;
                                if (accessedAtElement != null)
                                {
                                    Calendar accessedAtInstance;
                                    SimpleDateFormat simpleDateFormat5 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                    Calendar calendar5 = Calendar.getInstance();
                                    calendar5.setTime(simpleDateFormat5.parse(accessedAtElement.getTextContent()));
                                    accessedAtInstance = calendar5;
                                    entryInstance.setAccessedAt(accessedAtInstance);
                                }
                                
                                NodeList elements26 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SupportOrdering");
                                Element supportOrderingElement = elements26.getLength() > 0 ? ((Element) elements26.item(0)) : null;
                                if (supportOrderingElement != null)
                                {
                                    boolean supportOrderingInstance;
                                    supportOrderingInstance = Boolean.parseBoolean(supportOrderingElement.getTextContent());
                                    entryInstance.setSupportOrdering(supportOrderingInstance);
                                }
                                
                                NodeList elements27 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CountDetails");
                                Element countDetailsElement = elements27.getLength() > 0 ? ((Element) elements27.item(0)) : null;
                                if (countDetailsElement != null)
                                {
                                    CountDetails countDetailsInstance = new CountDetails();
                                    entryInstance.setCountDetails(countDetailsInstance);
                                }
                                
                                NodeList elements28 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SubscriptionCount");
                                Element subscriptionCountElement = elements28.getLength() > 0 ? ((Element) elements28.item(0)) : null;
                                if (subscriptionCountElement != null)
                                {
                                    int subscriptionCountInstance;
                                    subscriptionCountInstance = Integer.parseInt(subscriptionCountElement.getTextContent());
                                    entryInstance.setSubscriptionCount(subscriptionCountInstance);
                                }
                                
                                NodeList elements29 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AutoDeleteOnIdle");
                                Element autoDeleteOnIdleElement = elements29.getLength() > 0 ? ((Element) elements29.item(0)) : null;
                                if (autoDeleteOnIdleElement != null)
                                {
                                    String autoDeleteOnIdleInstance;
                                    autoDeleteOnIdleInstance = autoDeleteOnIdleElement.getTextContent();
                                    entryInstance.setAutoDeleteOnIdle(autoDeleteOnIdleInstance);
                                }
                                
                                NodeList elements30 = topicDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EntityAvailabilityStatus");
                                Element entityAvailabilityStatusElement = elements30.getLength() > 0 ? ((Element) elements30.item(0)) : null;
                                if (entityAvailabilityStatusElement != null)
                                {
                                    String entityAvailabilityStatusInstance;
                                    entityAvailabilityStatusInstance = entityAvailabilityStatusElement.getTextContent();
                                    entryInstance.setEntityAvailabilityStatus(entityAvailabilityStatusInstance);
                                }
                            }
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Updates a topic.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj839740.aspx for
    * more information)
    *
    * @param namespaceName The namespace name.
    * @param topic The Service Bus topic.
    * @return A response to a request for a particular topic.
    */
    @Override
    public Future<ServiceBusTopicResponse> updateAsync(final String namespaceName, final ServiceBusTopic topic)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusTopicResponse>() { 
            @Override
            public ServiceBusTopicResponse call() throws Exception
            {
                return update(namespaceName, topic);
            }
         });
    }
    
    /**
    * Updates a topic.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj839740.aspx for
    * more information)
    *
    * @param namespaceName The namespace name.
    * @param topic The Service Bus topic.
    * @throws ParserConfigurationException Thrown if there was an error
    * configuring the parser for the response body.
    * @throws SAXException Thrown if there was an error parsing the response
    * body.
    * @throws TransformerException Thrown if there was an error creating the
    * DOM transformer.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws ParseException Thrown if there was an error parsing a string in
    * the response.
    * @return A response to a request for a particular topic.
    */
    @Override
    public ServiceBusTopicResponse update(String namespaceName, ServiceBusTopic topic) throws ParserConfigurationException, SAXException, TransformerException, IOException, ServiceException, ParseException
    {
        // Validate
        if (namespaceName == null)
        {
            throw new NullPointerException("namespaceName");
        }
        if (topic == null)
        {
            throw new NullPointerException("topic");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace)
        {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("namespaceName", namespaceName);
            tracingParameters.put("topic", topic);
            CloudTracing.enter(invocationId, this, "updateAsync", tracingParameters);
        }
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/topics/" + topic.getName() + "/";
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        httpRequest.setHeader("if-match", "*");
        httpRequest.setHeader("type", "entry");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        httpRequest.setHeader("x-process-at", "ServiceBus");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element entryElement = requestDoc.createElementNS("http://www.w3.org/2005/Atom", "entry");
        requestDoc.appendChild(entryElement);
        
        Element contentElement = requestDoc.createElementNS("http://www.w3.org/2005/Atom", "content");
        entryElement.appendChild(contentElement);
        
        Attr typeAttribute = requestDoc.createAttribute("type");
        typeAttribute.setValue("application/atom+xml;type=entry;charset=utf-8");
        contentElement.setAttributeNode(typeAttribute);
        
        Element topicDescriptionElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "TopicDescription");
        contentElement.appendChild(topicDescriptionElement);
        
        if (topic.getDefaultMessageTimeToLive() != null)
        {
            Element defaultMessageTimeToLiveElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DefaultMessageTimeToLive");
            defaultMessageTimeToLiveElement.appendChild(requestDoc.createTextNode(topic.getDefaultMessageTimeToLive()));
            topicDescriptionElement.appendChild(defaultMessageTimeToLiveElement);
        }
        
        Element maxSizeInMegabytesElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "MaxSizeInMegabytes");
        maxSizeInMegabytesElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getMaxSizeInMegabytes())));
        topicDescriptionElement.appendChild(maxSizeInMegabytesElement);
        
        Element requiresDuplicateDetectionElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "RequiresDuplicateDetection");
        requiresDuplicateDetectionElement.appendChild(requestDoc.createTextNode(Boolean.toString(topic.isRequiresDuplicateDetection()).toLowerCase()));
        topicDescriptionElement.appendChild(requiresDuplicateDetectionElement);
        
        if (topic.getDuplicateDetectionHistoryTimeWindow() != null)
        {
            Element duplicateDetectionHistoryTimeWindowElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DuplicateDetectionHistoryTimeWindow");
            duplicateDetectionHistoryTimeWindowElement.appendChild(requestDoc.createTextNode(topic.getDuplicateDetectionHistoryTimeWindow()));
            topicDescriptionElement.appendChild(duplicateDetectionHistoryTimeWindowElement);
        }
        
        Element enableBatchedOperationsElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EnableBatchedOperations");
        enableBatchedOperationsElement.appendChild(requestDoc.createTextNode(Boolean.toString(topic.isEnableBatchedOperations()).toLowerCase()));
        topicDescriptionElement.appendChild(enableBatchedOperationsElement);
        
        Element sizeInBytesElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SizeInBytes");
        sizeInBytesElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getSizeInBytes())));
        topicDescriptionElement.appendChild(sizeInBytesElement);
        
        Element filteringMessagesBeforePublishingElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "FilteringMessagesBeforePublishing");
        filteringMessagesBeforePublishingElement.appendChild(requestDoc.createTextNode(Boolean.toString(topic.isFilteringMessagesBeforePublishing()).toLowerCase()));
        topicDescriptionElement.appendChild(filteringMessagesBeforePublishingElement);
        
        Element isAnonymousAccessibleElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "IsAnonymousAccessible");
        isAnonymousAccessibleElement.appendChild(requestDoc.createTextNode(Boolean.toString(topic.isAnonymousAccessible()).toLowerCase()));
        topicDescriptionElement.appendChild(isAnonymousAccessibleElement);
        
        if (topic.getAuthorizationRules() != null)
        {
            Element authorizationRulesSequenceElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRules");
            for (ServiceBusSharedAccessAuthorizationRule authorizationRulesItem : topic.getAuthorizationRules())
            {
                Element authorizationRuleElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRule");
                authorizationRulesSequenceElement.appendChild(authorizationRuleElement);
                
                Attr typeAttribute2 = requestDoc.createAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "type");
                typeAttribute2.setValue("SharedAccessAuthorizationRule");
                authorizationRuleElement.setAttributeNode(typeAttribute2);
                
                if (authorizationRulesItem.getClaimType() != null)
                {
                    Element claimTypeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                    claimTypeElement.appendChild(requestDoc.createTextNode(authorizationRulesItem.getClaimType()));
                    authorizationRuleElement.appendChild(claimTypeElement);
                }
                
                if (authorizationRulesItem.getClaimValue() != null)
                {
                    Element claimValueElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                    claimValueElement.appendChild(requestDoc.createTextNode(authorizationRulesItem.getClaimValue()));
                    authorizationRuleElement.appendChild(claimValueElement);
                }
                
                if (authorizationRulesItem.getRights() != null)
                {
                    Element rightsSequenceElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                    for (AccessRight rightsItem : authorizationRulesItem.getRights())
                    {
                        Element rightsItemElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights");
                        rightsItemElement.appendChild(requestDoc.createTextNode(rightsItem.toString()));
                        rightsSequenceElement.appendChild(rightsItemElement);
                    }
                    authorizationRuleElement.appendChild(rightsSequenceElement);
                }
                
                Element createdTimeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
                simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                createdTimeElement.appendChild(requestDoc.createTextNode(simpleDateFormat.format(authorizationRulesItem.getCreatedTime().getTime())));
                authorizationRuleElement.appendChild(createdTimeElement);
                
                if (authorizationRulesItem.getKeyName() != null)
                {
                    Element keyNameElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                    keyNameElement.appendChild(requestDoc.createTextNode(authorizationRulesItem.getKeyName()));
                    authorizationRuleElement.appendChild(keyNameElement);
                }
                
                Element modifiedTimeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
                SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
                simpleDateFormat2.setTimeZone(TimeZone.getTimeZone("UTC"));
                modifiedTimeElement.appendChild(requestDoc.createTextNode(simpleDateFormat2.format(authorizationRulesItem.getModifiedTime().getTime())));
                authorizationRuleElement.appendChild(modifiedTimeElement);
                
                if (authorizationRulesItem.getPrimaryKey() != null)
                {
                    Element primaryKeyElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                    primaryKeyElement.appendChild(requestDoc.createTextNode(authorizationRulesItem.getPrimaryKey()));
                    authorizationRuleElement.appendChild(primaryKeyElement);
                }
                
                if (authorizationRulesItem.getSecondaryKey() != null)
                {
                    Element secondaryKeyElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryKey");
                    secondaryKeyElement.appendChild(requestDoc.createTextNode(authorizationRulesItem.getSecondaryKey()));
                    authorizationRuleElement.appendChild(secondaryKeyElement);
                }
            }
            topicDescriptionElement.appendChild(authorizationRulesSequenceElement);
        }
        
        if (topic.getStatus() != null)
        {
            Element statusElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Status");
            statusElement.appendChild(requestDoc.createTextNode(topic.getStatus()));
            topicDescriptionElement.appendChild(statusElement);
        }
        
        Element createdAtElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedAt");
        SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
        simpleDateFormat3.setTimeZone(TimeZone.getTimeZone("UTC"));
        createdAtElement.appendChild(requestDoc.createTextNode(simpleDateFormat3.format(topic.getCreatedAt().getTime())));
        topicDescriptionElement.appendChild(createdAtElement);
        
        Element updatedAtElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "UpdatedAt");
        SimpleDateFormat simpleDateFormat4 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
        simpleDateFormat4.setTimeZone(TimeZone.getTimeZone("UTC"));
        updatedAtElement.appendChild(requestDoc.createTextNode(simpleDateFormat4.format(topic.getUpdatedAt().getTime())));
        topicDescriptionElement.appendChild(updatedAtElement);
        
        Element accessedAtElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessedAt");
        SimpleDateFormat simpleDateFormat5 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
        simpleDateFormat5.setTimeZone(TimeZone.getTimeZone("UTC"));
        accessedAtElement.appendChild(requestDoc.createTextNode(simpleDateFormat5.format(topic.getAccessedAt().getTime())));
        topicDescriptionElement.appendChild(accessedAtElement);
        
        Element supportOrderingElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SupportOrdering");
        supportOrderingElement.appendChild(requestDoc.createTextNode(Boolean.toString(topic.isSupportOrdering()).toLowerCase()));
        topicDescriptionElement.appendChild(supportOrderingElement);
        
        if (topic.getCountDetails() != null)
        {
            Element countDetailsElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CountDetails");
            topicDescriptionElement.appendChild(countDetailsElement);
            
            Element activeMessageCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2011/06/servicebus", "ActiveMessageCount");
            activeMessageCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getCountDetails().getActiveMessageCount())));
            countDetailsElement.appendChild(activeMessageCountElement);
            
            Element deadLetterMessageCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2011/06/servicebus", "DeadLetterMessageCount");
            deadLetterMessageCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getCountDetails().getDeadLetterMessageCount())));
            countDetailsElement.appendChild(deadLetterMessageCountElement);
            
            Element scheduledMessageCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2011/06/servicebus", "ScheduledMessageCount");
            scheduledMessageCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getCountDetails().getScheduledMessageCount())));
            countDetailsElement.appendChild(scheduledMessageCountElement);
            
            Element transferDeadLetterMessageCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2011/06/servicebus", "TransferDeadLetterMessageCount");
            transferDeadLetterMessageCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getCountDetails().getTransferDeadLetterMessageCount())));
            countDetailsElement.appendChild(transferDeadLetterMessageCountElement);
            
            Element transferMessageCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2011/06/servicebus", "TransferMessageCount");
            transferMessageCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getCountDetails().getTransferMessageCount())));
            countDetailsElement.appendChild(transferMessageCountElement);
        }
        
        Element subscriptionCountElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SubscriptionCount");
        subscriptionCountElement.appendChild(requestDoc.createTextNode(Integer.toString(topic.getSubscriptionCount())));
        topicDescriptionElement.appendChild(subscriptionCountElement);
        
        if (topic.getAutoDeleteOnIdle() != null)
        {
            Element autoDeleteOnIdleElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AutoDeleteOnIdle");
            autoDeleteOnIdleElement.appendChild(requestDoc.createTextNode(topic.getAutoDeleteOnIdle()));
            topicDescriptionElement.appendChild(autoDeleteOnIdleElement);
        }
        
        if (topic.getEntityAvailabilityStatus() != null)
        {
            Element entityAvailabilityStatusElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EntityAvailabilityStatus");
            entityAvailabilityStatusElement.appendChild(requestDoc.createTextNode(topic.getEntityAvailabilityStatus()));
            topicDescriptionElement.appendChild(entityAvailabilityStatusElement);
        }
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        try
        {
            if (shouldTrace)
            {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace)
            {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK)
            {
                ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace)
                {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ServiceBusTopicResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new ServiceBusTopicResponse();
            DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder2 = documentBuilderFactory2.newDocumentBuilder();
            Document responseDoc = documentBuilder2.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry");
            Element entryElement2 = elements.getLength() > 0 ? ((Element) elements.item(0)) : null;
            if (entryElement2 != null)
            {
                NodeList elements2 = entryElement2.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "title");
                Element titleElement = elements2.getLength() > 0 ? ((Element) elements2.item(0)) : null;
                if (titleElement != null)
                {
                }
                
                NodeList elements3 = entryElement2.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
                Element contentElement2 = elements3.getLength() > 0 ? ((Element) elements3.item(0)) : null;
                if (contentElement2 != null)
                {
                    NodeList elements4 = contentElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "TopicDescription");
                    Element topicDescriptionElement2 = elements4.getLength() > 0 ? ((Element) elements4.item(0)) : null;
                    if (topicDescriptionElement2 != null)
                    {
                        ServiceBusTopic topicDescriptionInstance = new ServiceBusTopic();
                        result.setTopic(topicDescriptionInstance);
                        
                        NodeList elements5 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DefaultMessageTimeToLive");
                        Element defaultMessageTimeToLiveElement2 = elements5.getLength() > 0 ? ((Element) elements5.item(0)) : null;
                        if (defaultMessageTimeToLiveElement2 != null)
                        {
                            String defaultMessageTimeToLiveInstance;
                            defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement2.getTextContent();
                            topicDescriptionInstance.setDefaultMessageTimeToLive(defaultMessageTimeToLiveInstance);
                        }
                        
                        NodeList elements6 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "MaxSizeInMegabytes");
                        Element maxSizeInMegabytesElement2 = elements6.getLength() > 0 ? ((Element) elements6.item(0)) : null;
                        if (maxSizeInMegabytesElement2 != null)
                        {
                            int maxSizeInMegabytesInstance;
                            maxSizeInMegabytesInstance = Integer.parseInt(maxSizeInMegabytesElement2.getTextContent());
                            topicDescriptionInstance.setMaxSizeInMegabytes(maxSizeInMegabytesInstance);
                        }
                        
                        NodeList elements7 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "RequiresDuplicateDetection");
                        Element requiresDuplicateDetectionElement2 = elements7.getLength() > 0 ? ((Element) elements7.item(0)) : null;
                        if (requiresDuplicateDetectionElement2 != null)
                        {
                            boolean requiresDuplicateDetectionInstance;
                            requiresDuplicateDetectionInstance = Boolean.parseBoolean(requiresDuplicateDetectionElement2.getTextContent());
                            topicDescriptionInstance.setRequiresDuplicateDetection(requiresDuplicateDetectionInstance);
                        }
                        
                        NodeList elements8 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "DuplicateDetectionHistoryTimeWindow");
                        Element duplicateDetectionHistoryTimeWindowElement2 = elements8.getLength() > 0 ? ((Element) elements8.item(0)) : null;
                        if (duplicateDetectionHistoryTimeWindowElement2 != null)
                        {
                            String duplicateDetectionHistoryTimeWindowInstance;
                            duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement2.getTextContent();
                            topicDescriptionInstance.setDuplicateDetectionHistoryTimeWindow(duplicateDetectionHistoryTimeWindowInstance);
                        }
                        
                        NodeList elements9 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EnableBatchedOperations");
                        Element enableBatchedOperationsElement2 = elements9.getLength() > 0 ? ((Element) elements9.item(0)) : null;
                        if (enableBatchedOperationsElement2 != null)
                        {
                            boolean enableBatchedOperationsInstance;
                            enableBatchedOperationsInstance = Boolean.parseBoolean(enableBatchedOperationsElement2.getTextContent());
                            topicDescriptionInstance.setEnableBatchedOperations(enableBatchedOperationsInstance);
                        }
                        
                        NodeList elements10 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SizeInBytes");
                        Element sizeInBytesElement2 = elements10.getLength() > 0 ? ((Element) elements10.item(0)) : null;
                        if (sizeInBytesElement2 != null)
                        {
                            int sizeInBytesInstance;
                            sizeInBytesInstance = Integer.parseInt(sizeInBytesElement2.getTextContent());
                            topicDescriptionInstance.setSizeInBytes(sizeInBytesInstance);
                        }
                        
                        NodeList elements11 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "FilteringMessagesBeforePublishing");
                        Element filteringMessagesBeforePublishingElement2 = elements11.getLength() > 0 ? ((Element) elements11.item(0)) : null;
                        if (filteringMessagesBeforePublishingElement2 != null)
                        {
                            boolean filteringMessagesBeforePublishingInstance;
                            filteringMessagesBeforePublishingInstance = Boolean.parseBoolean(filteringMessagesBeforePublishingElement2.getTextContent());
                            topicDescriptionInstance.setFilteringMessagesBeforePublishing(filteringMessagesBeforePublishingInstance);
                        }
                        
                        NodeList elements12 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "IsAnonymousAccessible");
                        Element isAnonymousAccessibleElement2 = elements12.getLength() > 0 ? ((Element) elements12.item(0)) : null;
                        if (isAnonymousAccessibleElement2 != null)
                        {
                            boolean isAnonymousAccessibleInstance;
                            isAnonymousAccessibleInstance = Boolean.parseBoolean(isAnonymousAccessibleElement2.getTextContent());
                            topicDescriptionInstance.setIsAnonymousAccessible(isAnonymousAccessibleInstance);
                        }
                        
                        NodeList elements13 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRules");
                        Element authorizationRulesSequenceElement2 = elements13.getLength() > 0 ? ((Element) elements13.item(0)) : null;
                        if (authorizationRulesSequenceElement2 != null)
                        {
                            for (int i1 = 0; i1 < authorizationRulesSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRule").getLength(); i1 = i1 + 1)
                            {
                                org.w3c.dom.Element authorizationRulesElement = ((org.w3c.dom.Element) authorizationRulesSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationRule").item(i1));
                                ServiceBusSharedAccessAuthorizationRule authorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                topicDescriptionInstance.getAuthorizationRules().add(authorizationRuleInstance);
                                
                                NodeList elements14 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                                Element claimTypeElement2 = elements14.getLength() > 0 ? ((Element) elements14.item(0)) : null;
                                if (claimTypeElement2 != null)
                                {
                                    String claimTypeInstance;
                                    claimTypeInstance = claimTypeElement2.getTextContent();
                                    authorizationRuleInstance.setClaimType(claimTypeInstance);
                                }
                                
                                NodeList elements15 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                                Element claimValueElement2 = elements15.getLength() > 0 ? ((Element) elements15.item(0)) : null;
                                if (claimValueElement2 != null)
                                {
                                    String claimValueInstance;
                                    claimValueInstance = claimValueElement2.getTextContent();
                                    authorizationRuleInstance.setClaimValue(claimValueInstance);
                                }
                                
                                NodeList elements16 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                                Element rightsSequenceElement2 = elements16.getLength() > 0 ? ((Element) elements16.item(0)) : null;
                                if (rightsSequenceElement2 != null)
                                {
                                    for (int i2 = 0; i2 < rightsSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i2 = i2 + 1)
                                    {
                                        org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element) rightsSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i2));
                                        authorizationRuleInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                                    }
                                }
                                
                                NodeList elements17 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
                                Element createdTimeElement2 = elements17.getLength() > 0 ? ((Element) elements17.item(0)) : null;
                                if (createdTimeElement2 != null)
                                {
                                    Calendar createdTimeInstance;
                                    SimpleDateFormat simpleDateFormat6 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                    Calendar calendar = Calendar.getInstance();
                                    calendar.setTime(simpleDateFormat6.parse(createdTimeElement2.getTextContent()));
                                    createdTimeInstance = calendar;
                                    authorizationRuleInstance.setCreatedTime(createdTimeInstance);
                                }
                                
                                NodeList elements18 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                                Element keyNameElement2 = elements18.getLength() > 0 ? ((Element) elements18.item(0)) : null;
                                if (keyNameElement2 != null)
                                {
                                    String keyNameInstance;
                                    keyNameInstance = keyNameElement2.getTextContent();
                                    authorizationRuleInstance.setKeyName(keyNameInstance);
                                }
                                
                                NodeList elements19 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
                                Element modifiedTimeElement2 = elements19.getLength() > 0 ? ((Element) elements19.item(0)) : null;
                                if (modifiedTimeElement2 != null)
                                {
                                    Calendar modifiedTimeInstance;
                                    SimpleDateFormat simpleDateFormat7 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                    Calendar calendar2 = Calendar.getInstance();
                                    calendar2.setTime(simpleDateFormat7.parse(modifiedTimeElement2.getTextContent()));
                                    modifiedTimeInstance = calendar2;
                                    authorizationRuleInstance.setModifiedTime(modifiedTimeInstance);
                                }
                                
                                NodeList elements20 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                                Element primaryKeyElement2 = elements20.getLength() > 0 ? ((Element) elements20.item(0)) : null;
                                if (primaryKeyElement2 != null)
                                {
                                    String primaryKeyInstance;
                                    primaryKeyInstance = primaryKeyElement2.getTextContent();
                                    authorizationRuleInstance.setPrimaryKey(primaryKeyInstance);
                                }
                                
                                NodeList elements21 = authorizationRulesElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryKey");
                                Element secondaryKeyElement2 = elements21.getLength() > 0 ? ((Element) elements21.item(0)) : null;
                                if (secondaryKeyElement2 != null)
                                {
                                    String secondaryKeyInstance;
                                    secondaryKeyInstance = secondaryKeyElement2.getTextContent();
                                    authorizationRuleInstance.setSecondaryKey(secondaryKeyInstance);
                                }
                            }
                        }
                        
                        NodeList elements22 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Status");
                        Element statusElement2 = elements22.getLength() > 0 ? ((Element) elements22.item(0)) : null;
                        if (statusElement2 != null)
                        {
                            String statusInstance;
                            statusInstance = statusElement2.getTextContent();
                            topicDescriptionInstance.setStatus(statusInstance);
                        }
                        
                        NodeList elements23 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedAt");
                        Element createdAtElement2 = elements23.getLength() > 0 ? ((Element) elements23.item(0)) : null;
                        if (createdAtElement2 != null)
                        {
                            Calendar createdAtInstance;
                            SimpleDateFormat simpleDateFormat8 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar3 = Calendar.getInstance();
                            calendar3.setTime(simpleDateFormat8.parse(createdAtElement2.getTextContent()));
                            createdAtInstance = calendar3;
                            topicDescriptionInstance.setCreatedAt(createdAtInstance);
                        }
                        
                        NodeList elements24 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "UpdatedAt");
                        Element updatedAtElement2 = elements24.getLength() > 0 ? ((Element) elements24.item(0)) : null;
                        if (updatedAtElement2 != null)
                        {
                            Calendar updatedAtInstance;
                            SimpleDateFormat simpleDateFormat9 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar4 = Calendar.getInstance();
                            calendar4.setTime(simpleDateFormat9.parse(updatedAtElement2.getTextContent()));
                            updatedAtInstance = calendar4;
                            topicDescriptionInstance.setUpdatedAt(updatedAtInstance);
                        }
                        
                        NodeList elements25 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessedAt");
                        Element accessedAtElement2 = elements25.getLength() > 0 ? ((Element) elements25.item(0)) : null;
                        if (accessedAtElement2 != null)
                        {
                            Calendar accessedAtInstance;
                            SimpleDateFormat simpleDateFormat10 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Calendar calendar5 = Calendar.getInstance();
                            calendar5.setTime(simpleDateFormat10.parse(accessedAtElement2.getTextContent()));
                            accessedAtInstance = calendar5;
                            topicDescriptionInstance.setAccessedAt(accessedAtInstance);
                        }
                        
                        NodeList elements26 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SupportOrdering");
                        Element supportOrderingElement2 = elements26.getLength() > 0 ? ((Element) elements26.item(0)) : null;
                        if (supportOrderingElement2 != null)
                        {
                            boolean supportOrderingInstance;
                            supportOrderingInstance = Boolean.parseBoolean(supportOrderingElement2.getTextContent());
                            topicDescriptionInstance.setSupportOrdering(supportOrderingInstance);
                        }
                        
                        NodeList elements27 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CountDetails");
                        Element countDetailsElement2 = elements27.getLength() > 0 ? ((Element) elements27.item(0)) : null;
                        if (countDetailsElement2 != null)
                        {
                            CountDetails countDetailsInstance = new CountDetails();
                            topicDescriptionInstance.setCountDetails(countDetailsInstance);
                        }
                        
                        NodeList elements28 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SubscriptionCount");
                        Element subscriptionCountElement2 = elements28.getLength() > 0 ? ((Element) elements28.item(0)) : null;
                        if (subscriptionCountElement2 != null)
                        {
                            int subscriptionCountInstance;
                            subscriptionCountInstance = Integer.parseInt(subscriptionCountElement2.getTextContent());
                            topicDescriptionInstance.setSubscriptionCount(subscriptionCountInstance);
                        }
                        
                        NodeList elements29 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AutoDeleteOnIdle");
                        Element autoDeleteOnIdleElement2 = elements29.getLength() > 0 ? ((Element) elements29.item(0)) : null;
                        if (autoDeleteOnIdleElement2 != null)
                        {
                            String autoDeleteOnIdleInstance;
                            autoDeleteOnIdleInstance = autoDeleteOnIdleElement2.getTextContent();
                            topicDescriptionInstance.setAutoDeleteOnIdle(autoDeleteOnIdleInstance);
                        }
                        
                        NodeList elements30 = topicDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "EntityAvailabilityStatus");
                        Element entityAvailabilityStatusElement2 = elements30.getLength() > 0 ? ((Element) elements30.item(0)) : null;
                        if (entityAvailabilityStatusElement2 != null)
                        {
                            String entityAvailabilityStatusInstance;
                            entityAvailabilityStatusInstance = entityAvailabilityStatusElement2.getTextContent();
                            topicDescriptionInstance.setEntityAvailabilityStatus(entityAvailabilityStatusInstance);
                        }
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0)
            {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace)
            {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        }
        finally
        {
            if (httpResponse != null && httpResponse.getEntity() != null)
            {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
}
