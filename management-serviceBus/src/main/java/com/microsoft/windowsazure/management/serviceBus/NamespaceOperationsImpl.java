// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.servicebus;

import com.microsoft.windowsazure.management.OperationResponse;
import com.microsoft.windowsazure.management.servicebus.models.AccessRight;
import com.microsoft.windowsazure.management.servicebus.models.CheckNamespaceAvailabilityResponse;
import com.microsoft.windowsazure.management.servicebus.models.NamespaceDescription;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusAuthorizationRuleResponse;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusAuthorizationRulesResponse;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusNamespace;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusNamespaceDescriptionResponse;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusNamespaceResponse;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusNamespacesResponse;
import com.microsoft.windowsazure.management.servicebus.models.ServiceBusSharedAccessAuthorizationRule;
import com.microsoft.windowsazure.services.core.ServiceException;
import com.microsoft.windowsazure.services.core.ServiceOperations;
import com.microsoft.windowsazure.services.core.utils.pipeline.CustomHttpDelete;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
* The Service Bus Management API includes operations for managing Service Bus
* namespaces.
*/
public class NamespaceOperationsImpl implements ServiceOperations<ServiceBusManagementClientImpl>, NamespaceOperations
{
    /**
    * Initializes a new instance of the NamespaceOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    NamespaceOperationsImpl(ServiceBusManagementClientImpl client)
    {
        this.client = client;
    }
    
    private ServiceBusManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.servicebus.ServiceBusManagementClientImpl.
    */
    public ServiceBusManagementClientImpl getClient() { return this.client; }
    
    /**
    * Checks the availability of the given service namespace across all Windows
    * Azure subscriptions. This is useful because the domain name is created
    * based on the service namespace name.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx for
    * more information)
    *
    * @return The response to a query for the availability status of a
    * namespace name.
    */
    @Override
    public Future<CheckNamespaceAvailabilityResponse> checkAvailabilityAsync(final String namespaceName)
    {
        return this.getClient().getExecutorService().submit(new Callable<CheckNamespaceAvailabilityResponse>() { 
            @Override
            public CheckNamespaceAvailabilityResponse call() throws Exception
            {
                return checkAvailability(namespaceName);
            }
         });
    }
    
    /**
    * Checks the availability of the given service namespace across all Windows
    * Azure subscriptions. This is useful because the domain name is created
    * based on the service namespace name.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx for
    * more information)
    *
    * @return The response to a query for the availability status of a
    * namespace name.
    */
    @Override
    public CheckNamespaceAvailabilityResponse checkAvailability(String namespaceName) throws IOException, ServiceException, ParserConfigurationException, SAXException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/ServiceBus/CheckNamespaceAvailability?namespace=" + namespaceName;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/atom+xml");
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        httpRequest.setHeader("x-ms-version", "2013-06-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        CheckNamespaceAvailabilityResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new CheckNamespaceAvailabilityResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry");
        Element entryElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (entryElement != null)
        {
            NodeList elements2 = entryElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
            Element contentElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (contentElement != null)
            {
                NodeList elements3 = contentElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "NamespaceAvailability");
                Element namespaceAvailabilityElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                if (namespaceAvailabilityElement != null)
                {
                    NodeList elements4 = namespaceAvailabilityElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Result");
                    Element resultElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                    if (resultElement != null)
                    {
                        boolean resultInstance;
                        resultInstance = Boolean.parseBoolean(resultElement.getTextContent());
                        result.setIsAvailable(resultInstance);
                    }
                    
                    NodeList elements5 = namespaceAvailabilityElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ReasonDetail");
                    Element reasonDetailElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                    if (reasonDetailElement != null)
                    {
                        String reasonDetailInstance;
                        reasonDetailInstance = reasonDetailElement.getTextContent();
                        result.setReasonDetails(reasonDetailInstance);
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * Creates a new service namespace. Once created, this namespace's resource
    * manifest is immutable. This operation is idempotent.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx for
    * more information)
    *
    * @return The response to a request for a particular namespace.
    */
    @Override
    public Future<ServiceBusNamespaceResponse> createAsync(final String namespaceName, final String region)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusNamespaceResponse>() { 
            @Override
            public ServiceBusNamespaceResponse call() throws Exception
            {
                return create(namespaceName, region);
            }
         });
    }
    
    /**
    * Creates a new service namespace. Once created, this namespace's resource
    * manifest is immutable. This operation is idempotent.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx for
    * more information)
    *
    * @return The response to a request for a particular namespace.
    */
    @Override
    public ServiceBusNamespaceResponse create(String namespaceName, String region) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException, ParseException, URISyntaxException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName;
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/atom+xml");
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        httpRequest.setHeader("type", "entry");
        httpRequest.setHeader("x-ms-version", "2013-07-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element entryElement = requestDoc.createElementNS("http://www.w3.org/2005/Atom", "entry");
        requestDoc.appendChild(entryElement);
        
        Element contentElement = requestDoc.createElementNS("http://www.w3.org/2005/Atom", "content");
        entryElement.appendChild(contentElement);
        
        String typeAttribute = null;
        
        Element namespaceDescriptionElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "NamespaceDescription");
        contentElement.appendChild(namespaceDescriptionElement);
        
        if (region != null)
        {
            Element regionElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Region");
            regionElement.appendChild(requestDoc.createTextNode(region));
            namespaceDescriptionElement.appendChild(regionElement);
        }
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        ServiceBusNamespaceResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new ServiceBusNamespaceResponse();
        DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder2 = documentBuilderFactory2.newDocumentBuilder();
        Document responseDoc = documentBuilder2.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry");
        Element entryElement2 = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (entryElement2 != null)
        {
            NodeList elements2 = entryElement2.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
            Element contentElement2 = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (contentElement2 != null)
            {
                NodeList elements3 = contentElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "NamespaceDescription");
                Element namespaceDescriptionElement2 = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                if (namespaceDescriptionElement2 != null)
                {
                    ServiceBusNamespace namespaceDescriptionInstance = new ServiceBusNamespace();
                    result.setNamespace(namespaceDescriptionInstance);
                    
                    NodeList elements4 = namespaceDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Name");
                    Element nameElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                    if (nameElement != null)
                    {
                        String nameInstance;
                        nameInstance = nameElement.getTextContent();
                        namespaceDescriptionInstance.setName(nameInstance);
                    }
                    
                    NodeList elements5 = namespaceDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Region");
                    Element regionElement2 = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                    if (regionElement2 != null)
                    {
                        String regionInstance;
                        regionInstance = regionElement2.getTextContent();
                        namespaceDescriptionInstance.setRegion(regionInstance);
                    }
                    
                    NodeList elements6 = namespaceDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Status");
                    Element statusElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                    if (statusElement != null)
                    {
                        String statusInstance;
                        statusInstance = statusElement.getTextContent();
                        namespaceDescriptionInstance.setStatus(statusInstance);
                    }
                    
                    NodeList elements7 = namespaceDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedAt");
                    Element createdAtElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                    if (createdAtElement != null)
                    {
                        Calendar createdAtInstance;
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(simpleDateFormat.parse(createdAtElement.getTextContent()));
                        createdAtInstance = calendar;
                        namespaceDescriptionInstance.setCreatedAt(createdAtInstance);
                    }
                    
                    NodeList elements8 = namespaceDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AcsManagementEndpoint");
                    Element acsManagementEndpointElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                    if (acsManagementEndpointElement != null)
                    {
                        URI acsManagementEndpointInstance;
                        acsManagementEndpointInstance = new URI(acsManagementEndpointElement.getTextContent());
                        namespaceDescriptionInstance.setAcsManagementEndpoint(acsManagementEndpointInstance);
                    }
                    
                    NodeList elements9 = namespaceDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ServiceBusEndpoint");
                    Element serviceBusEndpointElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
                    if (serviceBusEndpointElement != null)
                    {
                        URI serviceBusEndpointInstance;
                        serviceBusEndpointInstance = new URI(serviceBusEndpointElement.getTextContent());
                        namespaceDescriptionInstance.setServiceBusEndpoint(serviceBusEndpointInstance);
                    }
                    
                    NodeList elements10 = namespaceDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SubscriptionId");
                    Element subscriptionIdElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
                    if (subscriptionIdElement != null)
                    {
                        String subscriptionIdInstance;
                        subscriptionIdInstance = subscriptionIdElement.getTextContent();
                        namespaceDescriptionInstance.setSubscriptionId(subscriptionIdInstance);
                    }
                    
                    NodeList elements11 = namespaceDescriptionElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Enabled");
                    Element enabledElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                    if (enabledElement != null)
                    {
                        boolean enabledInstance;
                        enabledInstance = Boolean.parseBoolean(enabledElement.getTextContent());
                        namespaceDescriptionInstance.setEnabled(enabledInstance);
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The create namespace authorization rule operation creates an
    * authorization rule for a namespace
    *
    * @return A response to a request for a particular authorization rule.
    */
    @Override
    public Future<ServiceBusAuthorizationRuleResponse> createAuthorizationRuleAsync(final String namespaceName, final ServiceBusSharedAccessAuthorizationRule rule)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusAuthorizationRuleResponse>() { 
            @Override
            public ServiceBusAuthorizationRuleResponse call() throws Exception
            {
                return createAuthorizationRule(namespaceName, rule);
            }
         });
    }
    
    /**
    * The create namespace authorization rule operation creates an
    * authorization rule for a namespace
    *
    * @return A response to a request for a particular authorization rule.
    */
    @Override
    public ServiceBusAuthorizationRuleResponse createAuthorizationRule(String namespaceName, ServiceBusSharedAccessAuthorizationRule rule) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException, ParseException
    {
        // Validate
        if (namespaceName == null)
        {
            throw new NullPointerException("namespaceName");
        }
        if (rule == null)
        {
            throw new NullPointerException("rule");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/AuthorizationRules";
        
        // Create HTTP transport objects
        HttpPost httpRequest = new HttpPost(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/atom+xml");
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        httpRequest.setHeader("type", "entry");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        Element entryElement = requestDoc.createElementNS("http://www.w3.org/2005/Atom", "entry");
        requestDoc.appendChild(entryElement);
        
        Element contentElement = requestDoc.createElementNS("http://www.w3.org/2005/Atom", "content");
        entryElement.appendChild(contentElement);
        
        String typeAttribute = null;
        
        Element sharedAccessAuthorizationRuleElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SharedAccessAuthorizationRule");
        contentElement.appendChild(sharedAccessAuthorizationRuleElement);
        
        if (rule.getClaimType() != null)
        {
            Element claimTypeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
            claimTypeElement.appendChild(requestDoc.createTextNode(rule.getClaimType()));
            sharedAccessAuthorizationRuleElement.appendChild(claimTypeElement);
        }
        
        if (rule.getClaimValue() != null)
        {
            Element claimValueElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
            claimValueElement.appendChild(requestDoc.createTextNode(rule.getClaimValue()));
            sharedAccessAuthorizationRuleElement.appendChild(claimValueElement);
        }
        
        if (rule.getRights() != null)
        {
            Element rightsSequenceElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
            for (AccessRight rightsItem : rule.getRights())
            {
                Element rightsItemElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights");
                rightsItemElement.appendChild(requestDoc.createTextNode(rightsItem.toString()));
                rightsSequenceElement.appendChild(rightsItemElement);
            }
            sharedAccessAuthorizationRuleElement.appendChild(rightsSequenceElement);
        }
        
        Element createdTimeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
        simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        createdTimeElement.appendChild(requestDoc.createTextNode(simpleDateFormat.format(rule.getCreatedTime().getTime())));
        sharedAccessAuthorizationRuleElement.appendChild(createdTimeElement);
        
        Element modifiedTimeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
        SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
        simpleDateFormat2.setTimeZone(TimeZone.getTimeZone("UTC"));
        modifiedTimeElement.appendChild(requestDoc.createTextNode(simpleDateFormat2.format(rule.getModifiedTime().getTime())));
        sharedAccessAuthorizationRuleElement.appendChild(modifiedTimeElement);
        
        Element revisionElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Revision");
        revisionElement.appendChild(requestDoc.createTextNode(Integer.toString(rule.getRevision())));
        sharedAccessAuthorizationRuleElement.appendChild(revisionElement);
        
        if (rule.getKeyName() != null)
        {
            Element keyNameElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
            keyNameElement.appendChild(requestDoc.createTextNode(rule.getKeyName()));
            sharedAccessAuthorizationRuleElement.appendChild(keyNameElement);
        }
        
        if (rule.getPrimaryKey() != null)
        {
            Element primaryKeyElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
            primaryKeyElement.appendChild(requestDoc.createTextNode(rule.getPrimaryKey()));
            sharedAccessAuthorizationRuleElement.appendChild(primaryKeyElement);
        }
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 201)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        ServiceBusAuthorizationRuleResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new ServiceBusAuthorizationRuleResponse();
        DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder2 = documentBuilderFactory2.newDocumentBuilder();
        Document responseDoc = documentBuilder2.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry");
        Element entryElement2 = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (entryElement2 != null)
        {
            NodeList elements2 = entryElement2.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
            Element contentElement2 = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (contentElement2 != null)
            {
                NodeList elements3 = contentElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SharedAccessAuthorizationRule");
                Element sharedAccessAuthorizationRuleElement2 = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                if (sharedAccessAuthorizationRuleElement2 != null)
                {
                    ServiceBusSharedAccessAuthorizationRule sharedAccessAuthorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                    result.setAuthorizationRule(sharedAccessAuthorizationRuleInstance);
                    
                    NodeList elements4 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                    Element claimTypeElement2 = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                    if (claimTypeElement2 != null)
                    {
                        String claimTypeInstance;
                        claimTypeInstance = claimTypeElement2.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setClaimType(claimTypeInstance);
                    }
                    
                    NodeList elements5 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                    Element claimValueElement2 = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                    if (claimValueElement2 != null)
                    {
                        String claimValueInstance;
                        claimValueInstance = claimValueElement2.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setClaimValue(claimValueInstance);
                    }
                    
                    NodeList elements6 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                    Element rightsSequenceElement2 = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                    if (rightsSequenceElement2 != null)
                    {
                        for (int i1 = 0; i1 < rightsSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i1 = i1 + 1)
                        {
                            org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element)rightsSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i1));
                            sharedAccessAuthorizationRuleInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                        }
                    }
                    
                    NodeList elements7 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
                    Element createdTimeElement2 = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                    if (createdTimeElement2 != null)
                    {
                        Calendar createdTimeInstance;
                        SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(simpleDateFormat3.parse(createdTimeElement2.getTextContent()));
                        createdTimeInstance = calendar;
                        sharedAccessAuthorizationRuleInstance.setCreatedTime(createdTimeInstance);
                    }
                    
                    NodeList elements8 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
                    Element modifiedTimeElement2 = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                    if (modifiedTimeElement2 != null)
                    {
                        Calendar modifiedTimeInstance;
                        SimpleDateFormat simpleDateFormat4 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                        Calendar calendar2 = Calendar.getInstance();
                        calendar2.setTime(simpleDateFormat4.parse(modifiedTimeElement2.getTextContent()));
                        modifiedTimeInstance = calendar2;
                        sharedAccessAuthorizationRuleInstance.setModifiedTime(modifiedTimeInstance);
                    }
                    
                    NodeList elements9 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                    Element keyNameElement2 = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
                    if (keyNameElement2 != null)
                    {
                        String keyNameInstance;
                        keyNameInstance = keyNameElement2.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setKeyName(keyNameInstance);
                    }
                    
                    NodeList elements10 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                    Element primaryKeyElement2 = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
                    if (primaryKeyElement2 != null)
                    {
                        String primaryKeyInstance;
                        primaryKeyInstance = primaryKeyElement2.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setPrimaryKey(primaryKeyInstance);
                    }
                    
                    NodeList elements11 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryKey");
                    Element secondaryKeyElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                    if (secondaryKeyElement != null)
                    {
                        String secondaryKeyInstance;
                        secondaryKeyInstance = secondaryKeyElement.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setSecondaryKey(secondaryKeyInstance);
                    }
                    
                    NodeList elements12 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Revision");
                    Element revisionElement2 = elements12.getLength() > 0 ? ((Element)elements12.item(0)) : null;
                    if (revisionElement2 != null)
                    {
                        int revisionInstance;
                        revisionInstance = Integer.parseInt(revisionElement2.getTextContent());
                        sharedAccessAuthorizationRuleInstance.setRevision(revisionInstance);
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * Deletes an existing namespace. This operation also removes all associated
    * entities including queues, topics, relay points, and messages stored
    * under the namespace.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj856296.aspx for
    * more information)
    *
    * @return A standard storage response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteAsync(final String namespaceName)
    {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception
            {
                return delete(namespaceName);
            }
         });
    }
    
    /**
    * Deletes an existing namespace. This operation also removes all associated
    * entities including queues, topics, relay points, and messages stored
    * under the namespace.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj856296.aspx for
    * more information)
    *
    * @return A standard storage response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse delete(String namespaceName) throws IOException, ServiceException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName;
        
        // Create HTTP transport objects
        CustomHttpDelete httpRequest = new CustomHttpDelete(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/atom+xml");
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        OperationResponse result = null;
        result = new OperationResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The delete namespace authorization rule operation deletes an
    * authorization rule for a namespace
    *
    * @return A standard storage response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteAuthorizationRuleAsync(final String namespaceName, final String ruleName)
    {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception
            {
                return deleteAuthorizationRule(namespaceName, ruleName);
            }
         });
    }
    
    /**
    * The delete namespace authorization rule operation deletes an
    * authorization rule for a namespace
    *
    * @return A standard storage response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse deleteAuthorizationRule(String namespaceName, String ruleName) throws IOException, ServiceException
    {
        // Validate
        if (namespaceName == null)
        {
            throw new NullPointerException("namespaceName");
        }
        if (ruleName == null)
        {
            throw new NullPointerException("ruleName");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/AuthorizationRules/" + ruleName;
        
        // Create HTTP transport objects
        CustomHttpDelete httpRequest = new CustomHttpDelete(url);
        
        // Set Headers
        httpRequest.setHeader("x-ms-version", "2012-03-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 204)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        OperationResponse result = null;
        result = new OperationResponse();
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * Returns the description for the specified namespace.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn140232.aspx for
    * more information)
    *
    * @return The response to a request for a particular namespace.
    */
    @Override
    public Future<ServiceBusNamespaceResponse> getAsync(final String namespaceName)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusNamespaceResponse>() { 
            @Override
            public ServiceBusNamespaceResponse call() throws Exception
            {
                return get(namespaceName);
            }
         });
    }
    
    /**
    * Returns the description for the specified namespace.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn140232.aspx for
    * more information)
    *
    * @return The response to a request for a particular namespace.
    */
    @Override
    public ServiceBusNamespaceResponse get(String namespaceName) throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException, URISyntaxException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/atom+xml");
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        ServiceBusNamespaceResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new ServiceBusNamespaceResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry");
        Element entryElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (entryElement != null)
        {
            NodeList elements2 = entryElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
            Element contentElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (contentElement != null)
            {
                NodeList elements3 = contentElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "NamespaceDescription");
                Element namespaceDescriptionElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                if (namespaceDescriptionElement != null)
                {
                    ServiceBusNamespace namespaceDescriptionInstance = new ServiceBusNamespace();
                    result.setNamespace(namespaceDescriptionInstance);
                    
                    NodeList elements4 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Name");
                    Element nameElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                    if (nameElement != null)
                    {
                        String nameInstance;
                        nameInstance = nameElement.getTextContent();
                        namespaceDescriptionInstance.setName(nameInstance);
                    }
                    
                    NodeList elements5 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Region");
                    Element regionElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                    if (regionElement != null)
                    {
                        String regionInstance;
                        regionInstance = regionElement.getTextContent();
                        namespaceDescriptionInstance.setRegion(regionInstance);
                    }
                    
                    NodeList elements6 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Status");
                    Element statusElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                    if (statusElement != null)
                    {
                        String statusInstance;
                        statusInstance = statusElement.getTextContent();
                        namespaceDescriptionInstance.setStatus(statusInstance);
                    }
                    
                    NodeList elements7 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedAt");
                    Element createdAtElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                    if (createdAtElement != null)
                    {
                        Calendar createdAtInstance;
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(simpleDateFormat.parse(createdAtElement.getTextContent()));
                        createdAtInstance = calendar;
                        namespaceDescriptionInstance.setCreatedAt(createdAtInstance);
                    }
                    
                    NodeList elements8 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AcsManagementEndpoint");
                    Element acsManagementEndpointElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                    if (acsManagementEndpointElement != null)
                    {
                        URI acsManagementEndpointInstance;
                        acsManagementEndpointInstance = new URI(acsManagementEndpointElement.getTextContent());
                        namespaceDescriptionInstance.setAcsManagementEndpoint(acsManagementEndpointInstance);
                    }
                    
                    NodeList elements9 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ServiceBusEndpoint");
                    Element serviceBusEndpointElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
                    if (serviceBusEndpointElement != null)
                    {
                        URI serviceBusEndpointInstance;
                        serviceBusEndpointInstance = new URI(serviceBusEndpointElement.getTextContent());
                        namespaceDescriptionInstance.setServiceBusEndpoint(serviceBusEndpointInstance);
                    }
                    
                    NodeList elements10 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SubscriptionId");
                    Element subscriptionIdElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
                    if (subscriptionIdElement != null)
                    {
                        String subscriptionIdInstance;
                        subscriptionIdInstance = subscriptionIdElement.getTextContent();
                        namespaceDescriptionInstance.setSubscriptionId(subscriptionIdInstance);
                    }
                    
                    NodeList elements11 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Enabled");
                    Element enabledElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                    if (enabledElement != null)
                    {
                        boolean enabledInstance;
                        enabledInstance = Boolean.parseBoolean(enabledElement.getTextContent());
                        namespaceDescriptionInstance.setEnabled(enabledInstance);
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The get authorization rule operation gets an authorization rule for a
    * namespace by name
    *
    * @param namespaceName The namespace to get the authorization rule for.
    * @param entityName The entity name to get the authorization rule for.
    * @return A response to a request for a particular authorization rule.
    */
    @Override
    public Future<ServiceBusAuthorizationRuleResponse> getAuthorizationRuleAsync(final String namespaceName, final String entityName)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusAuthorizationRuleResponse>() { 
            @Override
            public ServiceBusAuthorizationRuleResponse call() throws Exception
            {
                return getAuthorizationRule(namespaceName, entityName);
            }
         });
    }
    
    /**
    * The get authorization rule operation gets an authorization rule for a
    * namespace by name
    *
    * @param namespaceName The namespace to get the authorization rule for.
    * @param entityName The entity name to get the authorization rule for.
    * @return A response to a request for a particular authorization rule.
    */
    @Override
    public ServiceBusAuthorizationRuleResponse getAuthorizationRule(String namespaceName, String entityName) throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException
    {
        // Validate
        if (namespaceName == null)
        {
            throw new NullPointerException("namespaceName");
        }
        if (entityName == null)
        {
            throw new NullPointerException("entityName");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/AuthorizationRules/" + entityName;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/atom+xml");
        httpRequest.setHeader("Content-Type", "application/xml; charset=utf-8");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        ServiceBusAuthorizationRuleResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new ServiceBusAuthorizationRuleResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry");
        Element entryElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (entryElement != null)
        {
            NodeList elements2 = entryElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
            Element contentElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (contentElement != null)
            {
                NodeList elements3 = contentElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SharedAccessAuthorizationRule");
                Element sharedAccessAuthorizationRuleElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                if (sharedAccessAuthorizationRuleElement != null)
                {
                    ServiceBusSharedAccessAuthorizationRule sharedAccessAuthorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                    result.setAuthorizationRule(sharedAccessAuthorizationRuleInstance);
                    
                    NodeList elements4 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                    Element claimTypeElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                    if (claimTypeElement != null)
                    {
                        String claimTypeInstance;
                        claimTypeInstance = claimTypeElement.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setClaimType(claimTypeInstance);
                    }
                    
                    NodeList elements5 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                    Element claimValueElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                    if (claimValueElement != null)
                    {
                        String claimValueInstance;
                        claimValueInstance = claimValueElement.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setClaimValue(claimValueInstance);
                    }
                    
                    NodeList elements6 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                    Element rightsSequenceElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                    if (rightsSequenceElement != null)
                    {
                        for (int i1 = 0; i1 < rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i1 = i1 + 1)
                        {
                            org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element)rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i1));
                            sharedAccessAuthorizationRuleInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                        }
                    }
                    
                    NodeList elements7 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
                    Element createdTimeElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                    if (createdTimeElement != null)
                    {
                        Calendar createdTimeInstance;
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(simpleDateFormat.parse(createdTimeElement.getTextContent()));
                        createdTimeInstance = calendar;
                        sharedAccessAuthorizationRuleInstance.setCreatedTime(createdTimeInstance);
                    }
                    
                    NodeList elements8 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
                    Element modifiedTimeElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                    if (modifiedTimeElement != null)
                    {
                        Calendar modifiedTimeInstance;
                        SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                        Calendar calendar2 = Calendar.getInstance();
                        calendar2.setTime(simpleDateFormat2.parse(modifiedTimeElement.getTextContent()));
                        modifiedTimeInstance = calendar2;
                        sharedAccessAuthorizationRuleInstance.setModifiedTime(modifiedTimeInstance);
                    }
                    
                    NodeList elements9 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                    Element keyNameElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
                    if (keyNameElement != null)
                    {
                        String keyNameInstance;
                        keyNameInstance = keyNameElement.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setKeyName(keyNameInstance);
                    }
                    
                    NodeList elements10 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                    Element primaryKeyElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
                    if (primaryKeyElement != null)
                    {
                        String primaryKeyInstance;
                        primaryKeyInstance = primaryKeyElement.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setPrimaryKey(primaryKeyInstance);
                    }
                    
                    NodeList elements11 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryKey");
                    Element secondaryKeyElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                    if (secondaryKeyElement != null)
                    {
                        String secondaryKeyInstance;
                        secondaryKeyInstance = secondaryKeyElement.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setSecondaryKey(secondaryKeyInstance);
                    }
                    
                    NodeList elements12 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Revision");
                    Element revisionElement = elements12.getLength() > 0 ? ((Element)elements12.item(0)) : null;
                    if (revisionElement != null)
                    {
                        int revisionInstance;
                        revisionInstance = Integer.parseInt(revisionElement.getTextContent());
                        sharedAccessAuthorizationRuleInstance.setRevision(revisionInstance);
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The namespace description is an XML AtomPub document that defines the
    * desired semantics for a service namespace. The namespace description
    * contains the following properties.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx for
    * more information)
    *
    * @return A response to a request for a list of namespaces.
    */
    @Override
    public Future<ServiceBusNamespaceDescriptionResponse> getNamespaceDescriptionAsync(final String namespaceName)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusNamespaceDescriptionResponse>() { 
            @Override
            public ServiceBusNamespaceDescriptionResponse call() throws Exception
            {
                return getNamespaceDescription(namespaceName);
            }
         });
    }
    
    /**
    * The namespace description is an XML AtomPub document that defines the
    * desired semantics for a service namespace. The namespace description
    * contains the following properties.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx for
    * more information)
    *
    * @return A response to a request for a list of namespaces.
    */
    @Override
    public ServiceBusNamespaceDescriptionResponse getNamespaceDescription(String namespaceName) throws IOException, ServiceException, ParserConfigurationException, SAXException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/ConnectionDetails";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/atom+xml");
        httpRequest.setHeader("Content-Type", "application/xml; charset=utf-8");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        ServiceBusNamespaceDescriptionResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new ServiceBusNamespaceDescriptionResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "feed");
        Element feedElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (feedElement != null)
        {
            if (feedElement != null)
            {
                for (int i1 = 0; i1 < feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").getLength(); i1 = i1 + 1)
                {
                    org.w3c.dom.Element entriesElement = ((org.w3c.dom.Element)feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").item(i1));
                    NamespaceDescription entryInstance = new NamespaceDescription();
                    result.getNamespaceDescriptions().add(entryInstance);
                    
                    NodeList elements2 = entriesElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
                    Element contentElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
                    if (contentElement != null)
                    {
                        NodeList elements3 = contentElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ConnectionDetail");
                        Element connectionDetailElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                        if (connectionDetailElement != null)
                        {
                            NodeList elements4 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                            Element keyNameElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                            if (keyNameElement != null)
                            {
                                String keyNameInstance;
                                keyNameInstance = keyNameElement.getTextContent();
                                entryInstance.setKeyName(keyNameInstance);
                            }
                            
                            NodeList elements5 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ConnectionString");
                            Element connectionStringElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                            if (connectionStringElement != null)
                            {
                                String connectionStringInstance;
                                connectionStringInstance = connectionStringElement.getTextContent();
                                entryInstance.setConnectionString(connectionStringInstance);
                            }
                            
                            NodeList elements6 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AuthorizationType");
                            Element authorizationTypeElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                            if (authorizationTypeElement != null)
                            {
                                String authorizationTypeInstance;
                                authorizationTypeInstance = authorizationTypeElement.getTextContent();
                                entryInstance.setAuthorizationType(authorizationTypeInstance);
                            }
                            
                            NodeList elements7 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                            Element rightsSequenceElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                            if (rightsSequenceElement != null)
                            {
                                for (int i2 = 0; i2 < rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i2 = i2 + 1)
                                {
                                    org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element)rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i2));
                                    entryInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                                }
                            }
                            
                            NodeList elements8 = connectionDetailElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryConnectionString");
                            Element secondaryConnectionStringElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                            if (secondaryConnectionStringElement != null)
                            {
                                String secondaryConnectionStringInstance;
                                secondaryConnectionStringInstance = secondaryConnectionStringElement.getTextContent();
                                entryInstance.setSecondaryConnectionString(secondaryConnectionStringInstance);
                            }
                        }
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * Lists the available namespaces.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn140232.asp for
    * more information)
    *
    * @return The response to the request for a listing of namespaces
    */
    @Override
    public Future<ServiceBusNamespacesResponse> listAsync()
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusNamespacesResponse>() { 
            @Override
            public ServiceBusNamespacesResponse call() throws Exception
            {
                return list();
            }
         });
    }
    
    /**
    * Lists the available namespaces.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn140232.asp for
    * more information)
    *
    * @return The response to the request for a listing of namespaces
    */
    @Override
    public ServiceBusNamespacesResponse list() throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException, URISyntaxException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/atom+xml");
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        ServiceBusNamespacesResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new ServiceBusNamespacesResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "feed");
        Element feedElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (feedElement != null)
        {
            if (feedElement != null)
            {
                for (int i1 = 0; i1 < feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").getLength(); i1 = i1 + 1)
                {
                    org.w3c.dom.Element entriesElement = ((org.w3c.dom.Element)feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").item(i1));
                    ServiceBusNamespace entryInstance = new ServiceBusNamespace();
                    result.getNamespaces().add(entryInstance);
                    
                    NodeList elements2 = entriesElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
                    Element contentElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
                    if (contentElement != null)
                    {
                        NodeList elements3 = contentElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "NamespaceDescription");
                        Element namespaceDescriptionElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                        if (namespaceDescriptionElement != null)
                        {
                            NodeList elements4 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Name");
                            Element nameElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                            if (nameElement != null)
                            {
                                String nameInstance;
                                nameInstance = nameElement.getTextContent();
                                entryInstance.setName(nameInstance);
                            }
                            
                            NodeList elements5 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Region");
                            Element regionElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                            if (regionElement != null)
                            {
                                String regionInstance;
                                regionInstance = regionElement.getTextContent();
                                entryInstance.setRegion(regionInstance);
                            }
                            
                            NodeList elements6 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Status");
                            Element statusElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                            if (statusElement != null)
                            {
                                String statusInstance;
                                statusInstance = statusElement.getTextContent();
                                entryInstance.setStatus(statusInstance);
                            }
                            
                            NodeList elements7 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedAt");
                            Element createdAtElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                            if (createdAtElement != null)
                            {
                                Calendar createdAtInstance;
                                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                Calendar calendar = Calendar.getInstance();
                                calendar.setTime(simpleDateFormat.parse(createdAtElement.getTextContent()));
                                createdAtInstance = calendar;
                                entryInstance.setCreatedAt(createdAtInstance);
                            }
                            
                            NodeList elements8 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AcsManagementEndpoint");
                            Element acsManagementEndpointElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                            if (acsManagementEndpointElement != null)
                            {
                                URI acsManagementEndpointInstance;
                                acsManagementEndpointInstance = new URI(acsManagementEndpointElement.getTextContent());
                                entryInstance.setAcsManagementEndpoint(acsManagementEndpointInstance);
                            }
                            
                            NodeList elements9 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ServiceBusEndpoint");
                            Element serviceBusEndpointElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
                            if (serviceBusEndpointElement != null)
                            {
                                URI serviceBusEndpointInstance;
                                serviceBusEndpointInstance = new URI(serviceBusEndpointElement.getTextContent());
                                entryInstance.setServiceBusEndpoint(serviceBusEndpointInstance);
                            }
                            
                            NodeList elements10 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SubscriptionId");
                            Element subscriptionIdElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
                            if (subscriptionIdElement != null)
                            {
                                String subscriptionIdInstance;
                                subscriptionIdInstance = subscriptionIdElement.getTextContent();
                                entryInstance.setSubscriptionId(subscriptionIdInstance);
                            }
                            
                            NodeList elements11 = namespaceDescriptionElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Enabled");
                            Element enabledElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                            if (enabledElement != null)
                            {
                                boolean enabledInstance;
                                enabledInstance = Boolean.parseBoolean(enabledElement.getTextContent());
                                entryInstance.setEnabled(enabledInstance);
                            }
                        }
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The get authorization rules operation gets the authorization rules for a
    * namespace
    *
    * @param namespaceName The namespace to get the authorization rule for.
    * @return A response to a request for a list of authorization rules.
    */
    @Override
    public Future<ServiceBusAuthorizationRulesResponse> listAuthorizationRulesAsync(final String namespaceName)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusAuthorizationRulesResponse>() { 
            @Override
            public ServiceBusAuthorizationRulesResponse call() throws Exception
            {
                return listAuthorizationRules(namespaceName);
            }
         });
    }
    
    /**
    * The get authorization rules operation gets the authorization rules for a
    * namespace
    *
    * @param namespaceName The namespace to get the authorization rule for.
    * @return A response to a request for a list of authorization rules.
    */
    @Override
    public ServiceBusAuthorizationRulesResponse listAuthorizationRules(String namespaceName) throws IOException, ServiceException, ParserConfigurationException, SAXException, ParseException
    {
        // Validate
        if (namespaceName == null)
        {
            throw new NullPointerException("namespaceName");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/AuthorizationRules";
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/atom+xml");
        httpRequest.setHeader("Content-Type", "application/xml");
        httpRequest.setHeader("x-ms-version", "2013-08-01");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 200)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        ServiceBusAuthorizationRulesResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new ServiceBusAuthorizationRulesResponse();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document responseDoc = documentBuilder.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "feed");
        Element feedElement = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (feedElement != null)
        {
            if (feedElement != null)
            {
                for (int i1 = 0; i1 < feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").getLength(); i1 = i1 + 1)
                {
                    org.w3c.dom.Element entriesElement = ((org.w3c.dom.Element)feedElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry").item(i1));
                    ServiceBusSharedAccessAuthorizationRule entryInstance = new ServiceBusSharedAccessAuthorizationRule();
                    result.getAuthorizationRules().add(entryInstance);
                    
                    NodeList elements2 = entriesElement.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
                    Element contentElement = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
                    if (contentElement != null)
                    {
                        NodeList elements3 = contentElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SharedAccessAuthorizationRule");
                        Element sharedAccessAuthorizationRuleElement = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                        if (sharedAccessAuthorizationRuleElement != null)
                        {
                            NodeList elements4 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                            Element claimTypeElement = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                            if (claimTypeElement != null)
                            {
                                String claimTypeInstance;
                                claimTypeInstance = claimTypeElement.getTextContent();
                                entryInstance.setClaimType(claimTypeInstance);
                            }
                            
                            NodeList elements5 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                            Element claimValueElement = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                            if (claimValueElement != null)
                            {
                                String claimValueInstance;
                                claimValueInstance = claimValueElement.getTextContent();
                                entryInstance.setClaimValue(claimValueInstance);
                            }
                            
                            NodeList elements6 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                            Element rightsSequenceElement = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                            if (rightsSequenceElement != null)
                            {
                                for (int i2 = 0; i2 < rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i2 = i2 + 1)
                                {
                                    org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element)rightsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i2));
                                    entryInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                                }
                            }
                            
                            NodeList elements7 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
                            Element createdTimeElement = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                            if (createdTimeElement != null)
                            {
                                Calendar createdTimeInstance;
                                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                Calendar calendar = Calendar.getInstance();
                                calendar.setTime(simpleDateFormat.parse(createdTimeElement.getTextContent()));
                                createdTimeInstance = calendar;
                                entryInstance.setCreatedTime(createdTimeInstance);
                            }
                            
                            NodeList elements8 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
                            Element modifiedTimeElement = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                            if (modifiedTimeElement != null)
                            {
                                Calendar modifiedTimeInstance;
                                SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                                Calendar calendar2 = Calendar.getInstance();
                                calendar2.setTime(simpleDateFormat2.parse(modifiedTimeElement.getTextContent()));
                                modifiedTimeInstance = calendar2;
                                entryInstance.setModifiedTime(modifiedTimeInstance);
                            }
                            
                            NodeList elements9 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                            Element keyNameElement = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
                            if (keyNameElement != null)
                            {
                                String keyNameInstance;
                                keyNameInstance = keyNameElement.getTextContent();
                                entryInstance.setKeyName(keyNameInstance);
                            }
                            
                            NodeList elements10 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                            Element primaryKeyElement = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
                            if (primaryKeyElement != null)
                            {
                                String primaryKeyInstance;
                                primaryKeyInstance = primaryKeyElement.getTextContent();
                                entryInstance.setPrimaryKey(primaryKeyInstance);
                            }
                            
                            NodeList elements11 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryKey");
                            Element secondaryKeyElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                            if (secondaryKeyElement != null)
                            {
                                String secondaryKeyInstance;
                                secondaryKeyInstance = secondaryKeyElement.getTextContent();
                                entryInstance.setSecondaryKey(secondaryKeyInstance);
                            }
                            
                            NodeList elements12 = sharedAccessAuthorizationRuleElement.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Revision");
                            Element revisionElement = elements12.getLength() > 0 ? ((Element)elements12.item(0)) : null;
                            if (revisionElement != null)
                            {
                                int revisionInstance;
                                revisionInstance = Integer.parseInt(revisionElement.getTextContent());
                                entryInstance.setRevision(revisionInstance);
                            }
                        }
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
    
    /**
    * The update authorization rule operation updates an authorization rule for
    * a namespace.
    *
    * @return A response to a request for a particular authorization rule.
    */
    @Override
    public Future<ServiceBusAuthorizationRuleResponse> updateAuthorizationRuleAsync(final String namespaceName, final ServiceBusSharedAccessAuthorizationRule rule)
    {
        return this.getClient().getExecutorService().submit(new Callable<ServiceBusAuthorizationRuleResponse>() { 
            @Override
            public ServiceBusAuthorizationRuleResponse call() throws Exception
            {
                return updateAuthorizationRule(namespaceName, rule);
            }
         });
    }
    
    /**
    * The update authorization rule operation updates an authorization rule for
    * a namespace.
    *
    * @return A response to a request for a particular authorization rule.
    */
    @Override
    public ServiceBusAuthorizationRuleResponse updateAuthorizationRule(String namespaceName, ServiceBusSharedAccessAuthorizationRule rule) throws ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, UnsupportedEncodingException, IOException, ServiceException, ParseException
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/services/servicebus/namespaces/" + namespaceName + "/AuthorizationRules/" + rule.getKeyName();
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Accept", "application/atom+xml");
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        httpRequest.setHeader("if-match", "*");
        httpRequest.setHeader("type", "entry");
        httpRequest.setHeader("x-ms-version", "2012-03-01");
        
        // Serialize Request
        String requestContent = null;
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document requestDoc = documentBuilder.newDocument();
        
        if (rule != null)
        {
            Element entryElement = requestDoc.createElementNS("http://www.w3.org/2005/Atom", "entry");
            requestDoc.appendChild(entryElement);
            
            Element contentElement = requestDoc.createElementNS("http://www.w3.org/2005/Atom", "content");
            entryElement.appendChild(contentElement);
            
            String typeAttribute = null;
            
            Element sharedAccessAuthorizationRuleElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SharedAccessAuthorizationRule");
            contentElement.appendChild(sharedAccessAuthorizationRuleElement);
            
            if (rule.getClaimType() != null)
            {
                Element claimTypeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                claimTypeElement.appendChild(requestDoc.createTextNode(rule.getClaimType()));
                sharedAccessAuthorizationRuleElement.appendChild(claimTypeElement);
            }
            
            if (rule.getClaimValue() != null)
            {
                Element claimValueElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                claimValueElement.appendChild(requestDoc.createTextNode(rule.getClaimValue()));
                sharedAccessAuthorizationRuleElement.appendChild(claimValueElement);
            }
            
            if (rule.getRights() != null)
            {
                Element rightsSequenceElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                for (AccessRight rightsItem : rule.getRights())
                {
                    Element rightsItemElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights");
                    rightsItemElement.appendChild(requestDoc.createTextNode(rightsItem.toString()));
                    rightsSequenceElement.appendChild(rightsItemElement);
                }
                sharedAccessAuthorizationRuleElement.appendChild(rightsSequenceElement);
            }
            
            Element createdTimeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
            simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            createdTimeElement.appendChild(requestDoc.createTextNode(simpleDateFormat.format(rule.getCreatedTime().getTime())));
            sharedAccessAuthorizationRuleElement.appendChild(createdTimeElement);
            
            Element modifiedTimeElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
            SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
            simpleDateFormat2.setTimeZone(TimeZone.getTimeZone("UTC"));
            modifiedTimeElement.appendChild(requestDoc.createTextNode(simpleDateFormat2.format(rule.getModifiedTime().getTime())));
            sharedAccessAuthorizationRuleElement.appendChild(modifiedTimeElement);
            
            Element revisionElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Revision");
            revisionElement.appendChild(requestDoc.createTextNode(Integer.toString(rule.getRevision())));
            sharedAccessAuthorizationRuleElement.appendChild(revisionElement);
            
            if (rule.getKeyName() != null)
            {
                Element keyNameElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                keyNameElement.appendChild(requestDoc.createTextNode(rule.getKeyName()));
                sharedAccessAuthorizationRuleElement.appendChild(keyNameElement);
            }
            
            if (rule.getPrimaryKey() != null)
            {
                Element primaryKeyElement = requestDoc.createElementNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                primaryKeyElement.appendChild(requestDoc.createTextNode(rule.getPrimaryKey()));
                sharedAccessAuthorizationRuleElement.appendChild(primaryKeyElement);
            }
        }
        
        DOMSource domSource = new DOMSource(requestDoc);
        StringWriter stringWriter = new StringWriter();
        StreamResult streamResult = new StreamResult(stringWriter);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.transform(domSource, streamResult);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/atom+xml");
        
        // Send Request
        HttpResponse httpResponse = null;
        httpResponse = this.getClient().getHttpClient().execute(httpRequest);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        if (statusCode != 201)
        {
            ServiceException ex = ServiceException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
            throw ex;
        }
        
        // Create Result
        ServiceBusAuthorizationRuleResponse result = null;
        // Deserialize Response
        InputStream responseContent = httpResponse.getEntity().getContent();
        result = new ServiceBusAuthorizationRuleResponse();
        DocumentBuilderFactory documentBuilderFactory2 = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder2 = documentBuilderFactory2.newDocumentBuilder();
        Document responseDoc = documentBuilder2.parse(responseContent);
        
        NodeList elements = responseDoc.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "entry");
        Element entryElement2 = elements.getLength() > 0 ? ((Element)elements.item(0)) : null;
        if (entryElement2 != null)
        {
            NodeList elements2 = entryElement2.getElementsByTagNameNS("http://www.w3.org/2005/Atom", "content");
            Element contentElement2 = elements2.getLength() > 0 ? ((Element)elements2.item(0)) : null;
            if (contentElement2 != null)
            {
                NodeList elements3 = contentElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SharedAccessAuthorizationRule");
                Element sharedAccessAuthorizationRuleElement2 = elements3.getLength() > 0 ? ((Element)elements3.item(0)) : null;
                if (sharedAccessAuthorizationRuleElement2 != null)
                {
                    ServiceBusSharedAccessAuthorizationRule sharedAccessAuthorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                    result.setAuthorizationRule(sharedAccessAuthorizationRuleInstance);
                    
                    NodeList elements4 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimType");
                    Element claimTypeElement2 = elements4.getLength() > 0 ? ((Element)elements4.item(0)) : null;
                    if (claimTypeElement2 != null)
                    {
                        String claimTypeInstance;
                        claimTypeInstance = claimTypeElement2.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setClaimType(claimTypeInstance);
                    }
                    
                    NodeList elements5 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ClaimValue");
                    Element claimValueElement2 = elements5.getLength() > 0 ? ((Element)elements5.item(0)) : null;
                    if (claimValueElement2 != null)
                    {
                        String claimValueInstance;
                        claimValueInstance = claimValueElement2.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setClaimValue(claimValueInstance);
                    }
                    
                    NodeList elements6 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Rights");
                    Element rightsSequenceElement2 = elements6.getLength() > 0 ? ((Element)elements6.item(0)) : null;
                    if (rightsSequenceElement2 != null)
                    {
                        for (int i1 = 0; i1 < rightsSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").getLength(); i1 = i1 + 1)
                        {
                            org.w3c.dom.Element rightsElement = ((org.w3c.dom.Element)rightsSequenceElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "AccessRights").item(i1));
                            sharedAccessAuthorizationRuleInstance.getRights().add(AccessRight.valueOf(rightsElement.getTextContent()));
                        }
                    }
                    
                    NodeList elements7 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "CreatedTime");
                    Element createdTimeElement2 = elements7.getLength() > 0 ? ((Element)elements7.item(0)) : null;
                    if (createdTimeElement2 != null)
                    {
                        Calendar createdTimeInstance;
                        SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(simpleDateFormat3.parse(createdTimeElement2.getTextContent()));
                        createdTimeInstance = calendar;
                        sharedAccessAuthorizationRuleInstance.setCreatedTime(createdTimeInstance);
                    }
                    
                    NodeList elements8 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ModifiedTime");
                    Element modifiedTimeElement2 = elements8.getLength() > 0 ? ((Element)elements8.item(0)) : null;
                    if (modifiedTimeElement2 != null)
                    {
                        Calendar modifiedTimeInstance;
                        SimpleDateFormat simpleDateFormat4 = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                        Calendar calendar2 = Calendar.getInstance();
                        calendar2.setTime(simpleDateFormat4.parse(modifiedTimeElement2.getTextContent()));
                        modifiedTimeInstance = calendar2;
                        sharedAccessAuthorizationRuleInstance.setModifiedTime(modifiedTimeInstance);
                    }
                    
                    NodeList elements9 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "KeyName");
                    Element keyNameElement2 = elements9.getLength() > 0 ? ((Element)elements9.item(0)) : null;
                    if (keyNameElement2 != null)
                    {
                        String keyNameInstance;
                        keyNameInstance = keyNameElement2.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setKeyName(keyNameInstance);
                    }
                    
                    NodeList elements10 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "PrimaryKey");
                    Element primaryKeyElement2 = elements10.getLength() > 0 ? ((Element)elements10.item(0)) : null;
                    if (primaryKeyElement2 != null)
                    {
                        String primaryKeyInstance;
                        primaryKeyInstance = primaryKeyElement2.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setPrimaryKey(primaryKeyInstance);
                    }
                    
                    NodeList elements11 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SecondaryKey");
                    Element secondaryKeyElement = elements11.getLength() > 0 ? ((Element)elements11.item(0)) : null;
                    if (secondaryKeyElement != null)
                    {
                        String secondaryKeyInstance;
                        secondaryKeyInstance = secondaryKeyElement.getTextContent();
                        sharedAccessAuthorizationRuleInstance.setSecondaryKey(secondaryKeyInstance);
                    }
                    
                    NodeList elements12 = sharedAccessAuthorizationRuleElement2.getElementsByTagNameNS("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "Revision");
                    Element revisionElement2 = elements12.getLength() > 0 ? ((Element)elements12.item(0)) : null;
                    if (revisionElement2 != null)
                    {
                        int revisionInstance;
                        revisionInstance = Integer.parseInt(revisionElement2.getTextContent());
                        sharedAccessAuthorizationRuleInstance.setRevision(revisionInstance);
                    }
                }
            }
        }
        
        result.setStatusCode(statusCode);
        if (httpResponse.getHeaders("x-ms-request-id").length > 0)
        {
            result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
        }
        
        return result;
    }
}
