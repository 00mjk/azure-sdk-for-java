/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.network.models;

/**
* Inbound NAT pool of the loadbalancer
*/
public class InboundNatPool extends ChildResource {
    private int backendPort;
    
    /**
    * Optional. Gets or sets a port used for internal connections on the
    * endpoint. The localPort attribute maps the eternal port of the endpoint
    * to an internal port on a role. This is useful in scenarios where a role
    * must communicate to an internal compotnent on a port that is different
    * from the one that is exposed externally. If not specified, the value of
    * localPort is the same as the port attribute. Set the value of localPort
    * to '*' to automatically assign an unallocated port that is discoverable
    * using the runtime API
    * @return The BackendPort value.
    */
    public int getBackendPort() {
        return this.backendPort;
    }
    
    /**
    * Optional. Gets or sets a port used for internal connections on the
    * endpoint. The localPort attribute maps the eternal port of the endpoint
    * to an internal port on a role. This is useful in scenarios where a role
    * must communicate to an internal compotnent on a port that is different
    * from the one that is exposed externally. If not specified, the value of
    * localPort is the same as the port attribute. Set the value of localPort
    * to '*' to automatically assign an unallocated port that is discoverable
    * using the runtime API
    * @param backendPortValue The BackendPort value.
    */
    public void setBackendPort(final int backendPortValue) {
        this.backendPort = backendPortValue;
    }
    
    private ResourceId frontendIPConfiguration;
    
    /**
    * Optional. Gets or sets a reference to frontend IP Addresses
    * @return The FrontendIPConfiguration value.
    */
    public ResourceId getFrontendIPConfiguration() {
        return this.frontendIPConfiguration;
    }
    
    /**
    * Optional. Gets or sets a reference to frontend IP Addresses
    * @param frontendIPConfigurationValue The FrontendIPConfiguration value.
    */
    public void setFrontendIPConfiguration(final ResourceId frontendIPConfigurationValue) {
        this.frontendIPConfiguration = frontendIPConfigurationValue;
    }
    
    private int frontendPortRangeEnd;
    
    /**
    * Required. Gets or sets the ending port range for the NAT pool. You can
    * spcify any port number you choose, but the port numbers specified for
    * each role in the service must be unique. Possible values range between 1
    * and 65535, inclusive
    * @return The FrontendPortRangeEnd value.
    */
    public int getFrontendPortRangeEnd() {
        return this.frontendPortRangeEnd;
    }
    
    /**
    * Required. Gets or sets the ending port range for the NAT pool. You can
    * spcify any port number you choose, but the port numbers specified for
    * each role in the service must be unique. Possible values range between 1
    * and 65535, inclusive
    * @param frontendPortRangeEndValue The FrontendPortRangeEnd value.
    */
    public void setFrontendPortRangeEnd(final int frontendPortRangeEndValue) {
        this.frontendPortRangeEnd = frontendPortRangeEndValue;
    }
    
    private int frontendPortRangeStart;
    
    /**
    * Required. Gets or sets the starting port range for the NAT pool. You can
    * spcify any port number you choose, but the port numbers specified for
    * each role in the service must be unique. Possible values range between 1
    * and 65535, inclusive
    * @return The FrontendPortRangeStart value.
    */
    public int getFrontendPortRangeStart() {
        return this.frontendPortRangeStart;
    }
    
    /**
    * Required. Gets or sets the starting port range for the NAT pool. You can
    * spcify any port number you choose, but the port numbers specified for
    * each role in the service must be unique. Possible values range between 1
    * and 65535, inclusive
    * @param frontendPortRangeStartValue The FrontendPortRangeStart value.
    */
    public void setFrontendPortRangeStart(final int frontendPortRangeStartValue) {
        this.frontendPortRangeStart = frontendPortRangeStartValue;
    }
    
    private String protocol;
    
    /**
    * Required. Gets or sets the transport potocol for the external endpoint.
    * Possible values are Udp or Tcp
    * @return The Protocol value.
    */
    public String getProtocol() {
        return this.protocol;
    }
    
    /**
    * Required. Gets or sets the transport potocol for the external endpoint.
    * Possible values are Udp or Tcp
    * @param protocolValue The Protocol value.
    */
    public void setProtocol(final String protocolValue) {
        this.protocol = protocolValue;
    }
    
    private String provisioningState;
    
    /**
    * Optional. Gets or sets Provisioning state of the PublicIP resource
    * Updating/Deleting/Failed
    * @return The ProvisioningState value.
    */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    
    /**
    * Optional. Gets or sets Provisioning state of the PublicIP resource
    * Updating/Deleting/Failed
    * @param provisioningStateValue The ProvisioningState value.
    */
    public void setProvisioningState(final String provisioningStateValue) {
        this.provisioningState = provisioningStateValue;
    }
    
    /**
    * Initializes a new instance of the InboundNatPool class.
    *
    */
    public InboundNatPool() {
        super();
    }
    
    /**
    * Initializes a new instance of the InboundNatPool class with required
    * arguments.
    *
    * @param protocol Gets or sets the transport potocol for the external
    * endpoint. Possible values are Udp or Tcp
    * @param frontendPortRangeStart Gets or sets the starting port range for
    * the NAT pool. You can spcify any port number you choose, but the port
    * numbers specified for each role in the service must be unique. Possible
    * values range between 1 and 65535, inclusive
    * @param frontendPortRangeEnd Gets or sets the ending port range for the
    * NAT pool. You can spcify any port number you choose, but the port
    * numbers specified for each role in the service must be unique. Possible
    * values range between 1 and 65535, inclusive
    */
    public InboundNatPool(String protocol, int frontendPortRangeStart, int frontendPortRangeEnd) {
        if (protocol == null) {
            throw new NullPointerException("protocol");
        }
        this.setProtocol(protocol);
        this.setFrontendPortRangeStart(frontendPortRangeStart);
        this.setFrontendPortRangeEnd(frontendPortRangeEnd);
    }
}
