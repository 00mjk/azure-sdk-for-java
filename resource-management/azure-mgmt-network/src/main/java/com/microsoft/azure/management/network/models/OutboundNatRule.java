/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.network.models;

import com.microsoft.windowsazure.core.LazyArrayList;

import java.util.ArrayList;

/**
* Outbound NAT pool of the loadbalancer
*/
public class OutboundNatRule extends ChildResource {
    private int allocatedOutboundPorts;
    
    /**
    * Required. Gets or sets the number of outbound ports to be used for SNAT
    * @return The AllocatedOutboundPorts value.
    */
    public int getAllocatedOutboundPorts() {
        return this.allocatedOutboundPorts;
    }
    
    /**
    * Required. Gets or sets the number of outbound ports to be used for SNAT
    * @param allocatedOutboundPortsValue The AllocatedOutboundPorts value.
    */
    public void setAllocatedOutboundPorts(final int allocatedOutboundPortsValue) {
        this.allocatedOutboundPorts = allocatedOutboundPortsValue;
    }
    
    private ResourceId backendAddressPool;
    
    /**
    * Required. Gets or sets a reference to a pool of DIPs. Outbound traffic is
    * randomly load balanced across IPs in the backend IPs
    * @return The BackendAddressPool value.
    */
    public ResourceId getBackendAddressPool() {
        return this.backendAddressPool;
    }
    
    /**
    * Required. Gets or sets a reference to a pool of DIPs. Outbound traffic is
    * randomly load balanced across IPs in the backend IPs
    * @param backendAddressPoolValue The BackendAddressPool value.
    */
    public void setBackendAddressPool(final ResourceId backendAddressPoolValue) {
        this.backendAddressPool = backendAddressPoolValue;
    }
    
    private ArrayList<ResourceId> frontendIpConfigurations;
    
    /**
    * Optional. Gets or sets Frontend IP addresses of the load balancer
    * @return The FrontendIpConfigurations value.
    */
    public ArrayList<ResourceId> getFrontendIpConfigurations() {
        return this.frontendIpConfigurations;
    }
    
    /**
    * Optional. Gets or sets Frontend IP addresses of the load balancer
    * @param frontendIpConfigurationsValue The FrontendIpConfigurations value.
    */
    public void setFrontendIpConfigurations(final ArrayList<ResourceId> frontendIpConfigurationsValue) {
        this.frontendIpConfigurations = frontendIpConfigurationsValue;
    }
    
    private String provisioningState;
    
    /**
    * Optional. Gets or sets Provisioning state of the PublicIP resource
    * Updating/Deleting/Failed
    * @return The ProvisioningState value.
    */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    
    /**
    * Optional. Gets or sets Provisioning state of the PublicIP resource
    * Updating/Deleting/Failed
    * @param provisioningStateValue The ProvisioningState value.
    */
    public void setProvisioningState(final String provisioningStateValue) {
        this.provisioningState = provisioningStateValue;
    }
    
    /**
    * Initializes a new instance of the OutboundNatRule class.
    *
    */
    public OutboundNatRule() {
        super();
        this.setFrontendIpConfigurations(new LazyArrayList<ResourceId>());
    }
    
    /**
    * Initializes a new instance of the OutboundNatRule class with required
    * arguments.
    *
    * @param allocatedOutboundPorts Gets or sets the number of outbound ports
    * to be used for SNAT
    * @param backendAddressPool Gets or sets a reference to a pool of DIPs.
    * Outbound traffic is randomly load balanced across IPs in the backend IPs
    */
    public OutboundNatRule(int allocatedOutboundPorts, ResourceId backendAddressPool) {
        this();
        if (backendAddressPool == null) {
            throw new NullPointerException("backendAddressPool");
        }
        this.setAllocatedOutboundPorts(allocatedOutboundPorts);
        this.setBackendAddressPool(backendAddressPool);
    }
}
