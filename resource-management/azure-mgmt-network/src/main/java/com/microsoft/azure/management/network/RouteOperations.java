/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.network;

import com.microsoft.azure.management.network.models.AzureAsyncOperationResponse;
import com.microsoft.azure.management.network.models.Route;
import com.microsoft.azure.management.network.models.RouteGetResponse;
import com.microsoft.azure.management.network.models.RouteListResponse;
import com.microsoft.azure.management.network.models.RoutePutResponse;
import com.microsoft.azure.management.network.models.UpdateOperationResponse;
import com.microsoft.windowsazure.core.OperationResponse;
import com.microsoft.windowsazure.exception.ServiceException;

import java.io.IOException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

/**
* The Network Resource Provider API includes operations for managing the Routes
* for your subscription.
*/
public interface RouteOperations {
    /**
    * The Put route operation creates/updates a route in the specified route
    * table
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @param routeName Required. The name of the route.
    * @param routeParameters Required. Parameters supplied to the create/update
    * routeoperation
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Response for PUT Routes Api servive call
    */
    RoutePutResponse beginCreateOrUpdating(String resourceGroupName, String routeTableName, String routeName, Route routeParameters) throws IOException, ServiceException;
    
    /**
    * The Put route operation creates/updates a route in the specified route
    * table
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @param routeName Required. The name of the route.
    * @param routeParameters Required. Parameters supplied to the create/update
    * routeoperation
    * @return Response for PUT Routes Api servive call
    */
    Future<RoutePutResponse> beginCreateOrUpdatingAsync(String resourceGroupName, String routeTableName, String routeName, Route routeParameters);
    
    /**
    * The delete route operation deletes the specified route from a route table.
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @param routeName Required. The name of the route.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return If the resource provide needs to return an error to any
    * operation, it should return the appropriate HTTP error code and a
    * message body as can be seen below.The message should be localized per
    * the Accept-Language header specified in the original request such thatit
    * could be directly be exposed to users
    */
    UpdateOperationResponse beginDeleting(String resourceGroupName, String routeTableName, String routeName) throws IOException, ServiceException;
    
    /**
    * The delete route operation deletes the specified route from a route table.
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @param routeName Required. The name of the route.
    * @return If the resource provide needs to return an error to any
    * operation, it should return the appropriate HTTP error code and a
    * message body as can be seen below.The message should be localized per
    * the Accept-Language header specified in the original request such thatit
    * could be directly be exposed to users
    */
    Future<UpdateOperationResponse> beginDeletingAsync(String resourceGroupName, String routeTableName, String routeName);
    
    /**
    * The Put route operation creates/updates a route in the specified route
    * table
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @param routeName Required. The name of the route.
    * @param routeParameters Required. Parameters supplied to the create/update
    * route operation
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws IOException Thrown if there was an error setting up tracing for
    * the request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    AzureAsyncOperationResponse createOrUpdate(String resourceGroupName, String routeTableName, String routeName, Route routeParameters) throws InterruptedException, ExecutionException, IOException;
    
    /**
    * The Put route operation creates/updates a route in the specified route
    * table
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @param routeName Required. The name of the route.
    * @param routeParameters Required. Parameters supplied to the create/update
    * route operation
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    Future<AzureAsyncOperationResponse> createOrUpdateAsync(String resourceGroupName, String routeTableName, String routeName, Route routeParameters);
    
    /**
    * The delete route operation deletes the specified route from a route table.
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @param routeName Required. The name of the route.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws IOException Thrown if there was an error setting up tracing for
    * the request.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse delete(String resourceGroupName, String routeTableName, String routeName) throws InterruptedException, ExecutionException, IOException;
    
    /**
    * The delete route operation deletes the specified route from a route table.
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @param routeName Required. The name of the route.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> deleteAsync(String resourceGroupName, String routeTableName, String routeName);
    
    /**
    * The Get route operation retreives information about the specified route
    * from the route table.
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @param routeName Required. The name of the route.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Response for GetRoute Api service call
    */
    RouteGetResponse get(String resourceGroupName, String routeTableName, String routeName) throws IOException, ServiceException;
    
    /**
    * The Get route operation retreives information about the specified route
    * from the route table.
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @param routeName Required. The name of the route.
    * @return Response for GetRoute Api service call
    */
    Future<RouteGetResponse> getAsync(String resourceGroupName, String routeTableName, String routeName);
    
    /**
    * The List network security rule opertion retrieves all the routes in a
    * route table.
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Response for ListRoute Api servive call
    */
    RouteListResponse list(String resourceGroupName, String routeTableName) throws IOException, ServiceException;
    
    /**
    * The List network security rule opertion retrieves all the routes in a
    * route table.
    *
    * @param resourceGroupName Required. The name of the resource group.
    * @param routeTableName Required. The name of the route table.
    * @return Response for ListRoute Api servive call
    */
    Future<RouteListResponse> listAsync(String resourceGroupName, String routeTableName);
}
