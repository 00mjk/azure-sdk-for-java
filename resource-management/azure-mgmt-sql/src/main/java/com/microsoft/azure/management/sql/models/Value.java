/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.sql.models;

import java.util.Calendar;

/**
* Represents an Azure SQL Database Elastic Pool metric name.
*/
public class Value {
    private Double average;
    
    /**
    * Optional. Gets or sets the timestamp for the metrics.
    * @return The Average value.
    */
    public Double getAverage() {
        return this.average;
    }
    
    /**
    * Optional. Gets or sets the timestamp for the metrics.
    * @param averageValue The Average value.
    */
    public void setAverage(final Double averageValue) {
        this.average = averageValue;
    }
    
    private double count;
    
    /**
    * Optional. Gets or sets the count for the interval.
    * @return The Count value.
    */
    public double getCount() {
        return this.count;
    }
    
    /**
    * Optional. Gets or sets the count for the interval.
    * @param countValue The Count value.
    */
    public void setCount(final double countValue) {
        this.count = countValue;
    }
    
    private Double maximum;
    
    /**
    * Optional. Gets or sets the maximum value for the interval.
    * @return The Maximum value.
    */
    public Double getMaximum() {
        return this.maximum;
    }
    
    /**
    * Optional. Gets or sets the maximum value for the interval.
    * @param maximumValue The Maximum value.
    */
    public void setMaximum(final Double maximumValue) {
        this.maximum = maximumValue;
    }
    
    private Double minimum;
    
    /**
    * Optional. Gets or sets the minimum value for the interval.
    * @return The Minimum value.
    */
    public Double getMinimum() {
        return this.minimum;
    }
    
    /**
    * Optional. Gets or sets the minimum value for the interval.
    * @param minimumValue The Minimum value.
    */
    public void setMinimum(final Double minimumValue) {
        this.minimum = minimumValue;
    }
    
    private Calendar timestamp;
    
    /**
    * Optional. Gets or sets the timestamp for the metrics.
    * @return The Timestamp value.
    */
    public Calendar getTimestamp() {
        return this.timestamp;
    }
    
    /**
    * Optional. Gets or sets the timestamp for the metrics.
    * @param timestampValue The Timestamp value.
    */
    public void setTimestamp(final Calendar timestampValue) {
        this.timestamp = timestampValue;
    }
    
    private Double total;
    
    /**
    * Optional. Gets or sets the total for the interval.
    * @return The Total value.
    */
    public Double getTotal() {
        return this.total;
    }
    
    /**
    * Optional. Gets or sets the total for the interval.
    * @param totalValue The Total value.
    */
    public void setTotal(final Double totalValue) {
        this.total = totalValue;
    }
}
