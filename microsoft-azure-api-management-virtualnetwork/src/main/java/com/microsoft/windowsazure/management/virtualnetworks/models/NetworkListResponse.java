// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.virtualnetworks.models;

import com.microsoft.windowsazure.management.OperationResponse;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Iterator;

/**
* The response structure for the Server List operation
*/
public class NetworkListResponse extends OperationResponse implements Iterable<NetworkListResponse.VirtualNetworkSite>
{
    private ArrayList<NetworkListResponse.VirtualNetworkSite> virtualNetworkSites;
    
    public ArrayList<NetworkListResponse.VirtualNetworkSite> getVirtualNetworkSites() { return this.virtualNetworkSites; }
    
    public void setVirtualNetworkSites(ArrayList<NetworkListResponse.VirtualNetworkSite> virtualNetworkSites) { this.virtualNetworkSites = virtualNetworkSites; }
    
    /**
    * Initializes a new instance of the NetworkListResponse class.
    *
    */
    public NetworkListResponse()
    {
        this.virtualNetworkSites = new ArrayList<NetworkListResponse.VirtualNetworkSite>();
    }
    
    /**
    * Gets the sequence of VirtualNetworkSites.
    *
    */
    public Iterator<NetworkListResponse.VirtualNetworkSite> iterator()
    {
        return this.getVirtualNetworkSites().iterator();
    }
    
    public static class AddressSpace
    {
        private ArrayList<String> addressPrefixes;
        
        /**
        * Address spaces, in CIDR format in the virtual network
        */
        public ArrayList<String> getAddressPrefixes() { return this.addressPrefixes; }
        
        /**
        * Address spaces, in CIDR format in the virtual network
        */
        public void setAddressPrefixes(ArrayList<String> addressPrefixes) { this.addressPrefixes = addressPrefixes; }
        
        /**
        * Initializes a new instance of the AddressSpace class.
        *
        */
        public AddressSpace()
        {
            this.addressPrefixes = new ArrayList<String>();
        }
    }
    
    /**
    * Specifies the type of connection of the local network site. The value of
    * this element can be either IPsec or Dedicated. The default value is
    * IPsec.
    */
    public static class Connection
    {
        private LocalNetworkConnectionType type;
        
        public LocalNetworkConnectionType getType() { return this.type; }
        
        public void setType(LocalNetworkConnectionType type) { this.type = type; }
        
        /**
        * Initializes a new instance of the Connection class.
        *
        */
        public Connection()
        {
        }
    }
    
    public static class DnsServer
    {
        private InetAddress address;
        
        /**
        * The IPv4 address of the DNS server
        */
        public InetAddress getAddress() { return this.address; }
        
        /**
        * The IPv4 address of the DNS server
        */
        public void setAddress(InetAddress address) { this.address = address; }
        
        private String name;
        
        /**
        * The name of the DNS server
        */
        public String getName() { return this.name; }
        
        /**
        * The name of the DNS server
        */
        public void setName(String name) { this.name = name; }
        
        /**
        * Initializes a new instance of the DnsServer class.
        *
        */
        public DnsServer()
        {
        }
    }
    
    /**
    * Contains gateway references to the local network sites that the virtual
    * network can connect to.
    */
    public static class Gateway
    {
        private GatewayProfile profile;
        
        /**
        * The gateway connection size
        */
        public GatewayProfile getProfile() { return this.profile; }
        
        /**
        * The gateway connection size
        */
        public void setProfile(GatewayProfile profile) { this.profile = profile; }
        
        private ArrayList<NetworkListResponse.LocalNetworkSite> sites;
        
        /**
        * The list of local network sites that the virtual network can connect
        * to.
        */
        public ArrayList<NetworkListResponse.LocalNetworkSite> getSites() { return this.sites; }
        
        /**
        * The list of local network sites that the virtual network can connect
        * to.
        */
        public void setSites(ArrayList<NetworkListResponse.LocalNetworkSite> sites) { this.sites = sites; }
        
        private NetworkListResponse.VPNClientAddressPool vPNClientAddressPool;
        
        /**
        * The VPNClientAddressPool reserves a pool of IP addresses for VPN
        * clients. This object is used for point-to-site connectivity.
        */
        public NetworkListResponse.VPNClientAddressPool getVPNClientAddressPool() { return this.vPNClientAddressPool; }
        
        /**
        * The VPNClientAddressPool reserves a pool of IP addresses for VPN
        * clients. This object is used for point-to-site connectivity.
        */
        public void setVPNClientAddressPool(NetworkListResponse.VPNClientAddressPool vPNClientAddressPool) { this.vPNClientAddressPool = vPNClientAddressPool; }
        
        /**
        * Initializes a new instance of the Gateway class.
        *
        */
        public Gateway()
        {
            this.sites = new ArrayList<NetworkListResponse.LocalNetworkSite>();
        }
    }
    
    /**
    * Contains the list of parameters defining the local network site.
    */
    public static class LocalNetworkSite
    {
        private NetworkListResponse.AddressSpace addressSpace;
        
        /**
        * The address space of the local network site
        */
        public NetworkListResponse.AddressSpace getAddressSpace() { return this.addressSpace; }
        
        /**
        * The address space of the local network site
        */
        public void setAddressSpace(NetworkListResponse.AddressSpace addressSpace) { this.addressSpace = addressSpace; }
        
        private ArrayList<NetworkListResponse.Connection> connections;
        
        /**
        * Specifies the types of connections to the local network site
        */
        public ArrayList<NetworkListResponse.Connection> getConnections() { return this.connections; }
        
        /**
        * Specifies the types of connections to the local network site
        */
        public void setConnections(ArrayList<NetworkListResponse.Connection> connections) { this.connections = connections; }
        
        private String name;
        
        /**
        * The name of the local network site
        */
        public String getName() { return this.name; }
        
        /**
        * The name of the local network site
        */
        public void setName(String name) { this.name = name; }
        
        private InetAddress vpnGatewayAddress;
        
        /**
        * The IPv4 address of the local network site
        */
        public InetAddress getVpnGatewayAddress() { return this.vpnGatewayAddress; }
        
        /**
        * The IPv4 address of the local network site
        */
        public void setVpnGatewayAddress(InetAddress vpnGatewayAddress) { this.vpnGatewayAddress = vpnGatewayAddress; }
        
        /**
        * Initializes a new instance of the LocalNetworkSite class.
        *
        */
        public LocalNetworkSite()
        {
            this.connections = new ArrayList<NetworkListResponse.Connection>();
        }
    }
    
    public static class Subnet
    {
        private String addressPrefix;
        
        /**
        * Represents an address space, in CIDR format that defines the subnet
        */
        public String getAddressPrefix() { return this.addressPrefix; }
        
        /**
        * Represents an address space, in CIDR format that defines the subnet
        */
        public void setAddressPrefix(String addressPrefix) { this.addressPrefix = addressPrefix; }
        
        private String name;
        
        /**
        * Name for the subnet
        */
        public String getName() { return this.name; }
        
        /**
        * Name for the subnet
        */
        public void setName(String name) { this.name = name; }
        
        /**
        * Initializes a new instance of the Subnet class.
        *
        */
        public Subnet()
        {
        }
    }
    
    /**
    * Contains the collections of parameters used to configure a virtual
    * network space that is dedicated to your subscription without overlapping
    * with other networks
    */
    public static class VirtualNetworkSite
    {
        private NetworkListResponse.AddressSpace addressSpace;
        
        /**
        * The list of network address spaces for a virtual network site. This
        * represents the overall network space contained within the virtual
        * network site.
        */
        public NetworkListResponse.AddressSpace getAddressSpace() { return this.addressSpace; }
        
        /**
        * The list of network address spaces for a virtual network site. This
        * represents the overall network space contained within the virtual
        * network site.
        */
        public void setAddressSpace(NetworkListResponse.AddressSpace addressSpace) { this.addressSpace = addressSpace; }
        
        private String affinityGroup;
        
        /**
        * An affinity group, which indirectly refers to the location where the
        * virtual network exists.
        */
        public String getAffinityGroup() { return this.affinityGroup; }
        
        /**
        * An affinity group, which indirectly refers to the location where the
        * virtual network exists.
        */
        public void setAffinityGroup(String affinityGroup) { this.affinityGroup = affinityGroup; }
        
        private ArrayList<NetworkListResponse.DnsServer> dnsServers;
        
        /**
        * The list of on DNS Servers associated with the virtual network site.
        */
        public ArrayList<NetworkListResponse.DnsServer> getDnsServers() { return this.dnsServers; }
        
        /**
        * The list of on DNS Servers associated with the virtual network site.
        */
        public void setDnsServers(ArrayList<NetworkListResponse.DnsServer> dnsServers) { this.dnsServers = dnsServers; }
        
        private NetworkListResponse.Gateway gateway;
        
        /**
        * Gateway that contains a list of Local Network Sites which enables the
        * Virtual network site to communicate with a customer’s on premise
        * networks.
        */
        public NetworkListResponse.Gateway getGateway() { return this.gateway; }
        
        /**
        * Gateway that contains a list of Local Network Sites which enables the
        * Virtual network site to communicate with a customer’s on premise
        * networks.
        */
        public void setGateway(NetworkListResponse.Gateway gateway) { this.gateway = gateway; }
        
        private String id;
        
        /**
        * A unique string identifier that represents the virtual network site.
        */
        public String getId() { return this.id; }
        
        /**
        * A unique string identifier that represents the virtual network site.
        */
        public void setId(String id) { this.id = id; }
        
        private String label;
        
        /**
        * The friendly identifier of the site.
        */
        public String getLabel() { return this.label; }
        
        /**
        * The friendly identifier of the site.
        */
        public void setLabel(String label) { this.label = label; }
        
        private String name;
        
        /**
        * Name of the virtual network site.
        */
        public String getName() { return this.name; }
        
        /**
        * Name of the virtual network site.
        */
        public void setName(String name) { this.name = name; }
        
        private String state;
        
        /**
        * Current status of the virtual network. (Created, Creating, Updating,
        * Deleting, Unavailable)
        */
        public String getState() { return this.state; }
        
        /**
        * Current status of the virtual network. (Created, Creating, Updating,
        * Deleting, Unavailable)
        */
        public void setState(String state) { this.state = state; }
        
        private ArrayList<NetworkListResponse.Subnet> subnets;
        
        /**
        * The list of network subnets for a virtual network site. All network
        * subnets must be contained within the overall virtual network address
        * spaces.
        */
        public ArrayList<NetworkListResponse.Subnet> getSubnets() { return this.subnets; }
        
        /**
        * The list of network subnets for a virtual network site. All network
        * subnets must be contained within the overall virtual network address
        * spaces.
        */
        public void setSubnets(ArrayList<NetworkListResponse.Subnet> subnets) { this.subnets = subnets; }
        
        /**
        * Initializes a new instance of the VirtualNetworkSite class.
        *
        */
        public VirtualNetworkSite()
        {
            this.dnsServers = new ArrayList<NetworkListResponse.DnsServer>();
            this.subnets = new ArrayList<NetworkListResponse.Subnet>();
        }
    }
    
    /**
    * The VPNClientAddressPool reserves a pool of IP addresses for VPN clients.
    * This object is used for point-to-site connectivity.
    */
    public static class VPNClientAddressPool
    {
        private ArrayList<String> addressPrefixes;
        
        /**
        * The CIDR identifiers that identify addresses in the pool.
        */
        public ArrayList<String> getAddressPrefixes() { return this.addressPrefixes; }
        
        /**
        * The CIDR identifiers that identify addresses in the pool.
        */
        public void setAddressPrefixes(ArrayList<String> addressPrefixes) { this.addressPrefixes = addressPrefixes; }
        
        /**
        * Initializes a new instance of the VPNClientAddressPool class.
        *
        */
        public VPNClientAddressPool()
        {
            this.addressPrefixes = new ArrayList<String>();
        }
    }
}
